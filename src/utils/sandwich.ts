export const sumToSeqs: any = {
    0: [[]],
    2: [
        [2],
    ],
    3: [
        [3],
    ],
    4: [
        [4],
    ],
    5: [
        [5],
        [2, 3],
    ],
    6: [
        [6],
        [2, 4],
    ],
    7: [
        [7],
        [2, 5],
        [3, 4],
    ],
    8: [
        [8],
        [2, 6],
        [3, 5],
    ],
    9: [
        [2, 7],
        [3, 6],
        [4, 5],
        [2, 3, 4],
    ],
    10: [
        [2, 8],
        [3, 7],
        [4, 6],
        [2, 3, 5],
    ],
    11: [
        [3, 8],
        [4, 7],
        [5, 6],
        [2, 3, 6],
        [2, 4, 5],
    ],
    12: [
        [4, 8],
        [5, 7],
        [2, 3, 7],
        [2, 4, 6],
        [3, 4, 5],
    ],
    13: [
        [5, 8],
        [6, 7],
        [2, 3, 8],
        [2, 4, 7],
        [2, 5, 6],
        [3, 4, 6],
    ],
    14: [
        [6, 8],
        [2, 4, 8],
        [2, 5, 7],
        [3, 4, 7],
        [3, 5, 6],
        [2, 3, 4, 5],
    ],
    15: [
        [7, 8],
        [2, 5, 8],
        [2, 6, 7],
        [3, 4, 8],
        [3, 5, 7],
        [4, 5, 6],
        [2, 3, 4, 6],
    ],
    16: [
        [2, 6, 8],
        [3, 5, 8],
        [3, 6, 7],
        [4, 5, 7],
        [2, 3, 4, 7],
        [2, 3, 5, 6],
    ],
    17: [
        [2, 7, 8],
        [3, 6, 8],
        [4, 5, 8],
        [4, 6, 7],
        [2, 3, 4, 8],
        [2, 3, 5, 7],
        [2, 4, 5, 6],
    ],
    18: [
        [3, 7, 8],
        [4, 6, 8],
        [5, 6, 7],
        [2, 3, 5, 8],
        [2, 3, 6, 7],
        [2, 4, 5, 7],
        [3, 4, 5, 6],
    ],
    19: [
        [4, 7, 8],
        [5, 6, 8],
        [2, 3, 6, 8],
        [2, 4, 5, 8],
        [2, 4, 6, 7],
        [3, 4, 5, 7],
    ],
    20: [
        [5, 7, 8],
        [2, 3, 7, 8],
        [2, 4, 6, 8],
        [2, 5, 6, 7],
        [3, 4, 5, 8],
        [3, 4, 6, 7],
        [2, 3, 4, 5, 6],
    ],
    21: [
        [6, 7, 8],
        [2, 4, 7, 8],
        [2, 5, 6, 8],
        [3, 4, 6, 8],
        [3, 5, 6, 7],
        [2, 3, 4, 5, 7],
    ],
    22: [
        [2, 5, 7, 8],
        [3, 4, 7, 8],
        [3, 5, 6, 8],
        [4, 5, 6, 7],
        [2, 3, 4, 5, 8],
        [2, 3, 4, 6, 7],
    ],
    23: [
        [2, 6, 7, 8],
        [3, 5, 7, 8],
        [4, 5, 6, 8],
        [2, 3, 4, 6, 8],
        [2, 3, 5, 6, 7],
    ],
    24: [
        [3, 6, 7, 8],
        [4, 5, 7, 8],
        [2, 3, 4, 7, 8],
        [2, 3, 5, 6, 8],
        [2, 4, 5, 6, 7],
    ],
    25: [
        [4, 6, 7, 8],
        [2, 3, 5, 7, 8],
        [2, 4, 5, 6, 8],
        [3, 4, 5, 6, 7],
    ],
    26: [
        [5, 6, 7, 8],
        [2, 3, 6, 7, 8],
        [2, 4, 5, 7, 8],
        [3, 4, 5, 6, 8],
    ],
    27: [
        [2, 4, 6, 7, 8],
        [3, 4, 5, 7, 8],
        [2, 3, 4, 5, 6, 7],
    ],
    28: [
        [2, 5, 6, 7, 8],
        [3, 4, 6, 7, 8],
        [2, 3, 4, 5, 6, 8],
    ],
    29: [
        [3, 5, 6, 7, 8],
        [2, 3, 4, 5, 7, 8],
    ],
    30: [
        [4, 5, 6, 7, 8],
        [2, 3, 4, 6, 7, 8],
    ],
    31: [
        [2, 3, 5, 6, 7, 8],
    ],
    32: [
        [2, 4, 5, 6, 7, 8],
    ],
    33: [
        [3, 4, 5, 6, 7, 8],
    ],
    35: [
        [2, 3, 4, 5, 6, 7, 8],
    ],
};
export const sandwichLengths: any = {
    0: [0],
    2: [1],
    3: [1],
    4: [1],
    5: [1, 2],
    6: [1, 2],
    7: [1, 2],
    8: [1, 2],
    9: [2, 3],
    10: [2, 3],
    11: [2, 3],
    12: [2, 3],
    13: [2, 3],
    14: [2, 3, 4],
    15: [2, 3, 4],
    16: [3, 4],
    17: [3, 4],
    18: [3, 4],
    19: [3, 4],
    20: [3, 4, 5],
    21: [3, 4, 5],
    22: [4, 5],
    23: [4, 5],
    24: [4, 5],
    25: [4, 5],
    26: [4, 5],
    27: [5, 6],
    28: [5, 6],
    29: [5, 6],
    30: [5, 6],
    31: [6],
    32: [6],
    33: [6],
    35: [7],
};

/** Generated by C++ code:

#include "bits/stdc++.h"
using namespace std;

using Seq = vector<int>;

void attempt(Seq& cur, int len, map<int, vector<Seq>>& res) {
    if (cur.size() == len) {
        int sum = accumulate(cur.begin(), cur.end(), 0);
        res[sum].push_back(cur);
        return;
    }

    int last = cur.empty() ? 1 : cur.back();
    for (int val = last + 1; val <= 8; val++) {
        cur.push_back(val);
        attempt(cur, len, res);
        cur.pop_back();
    }
}

string join(const Seq& seq, const string& sep) {
    bool first = true;
    stringstream ss;
    for (auto val : seq) {
        if (first) first = false;
        else ss << sep;
        ss << val;
    }
    return ss.str();
}

int main() {
    map<int, vector<Seq>> res;
    res[0].push_back({});
    for (int len = 1; len <= 7; len++) {
        Seq cur;
        attempt(cur, len, res);
    }

    cout << "export const sumToSeqs = {" << endl;
    for (auto [sum, seqs] : res) {
        cout << "    " << sum << ": [" << endl;
        for (auto seq : seqs) {
            cout << "        [";
            cout << join(seq, ", ");
            cout << "]," << endl;
        }
        cout << "    ]," << endl;
    }
    cout << "};" << endl;

    cout << "export const sandwichLengths = {" << endl;
    for (auto [sum, seqs] : res) {
        vector<int> possible_lens;
        for (auto seq : seqs) {
            possible_lens.push_back(seq.size());
        }
        possible_lens.resize(unique(possible_lens.begin(), possible_lens.end()) - possible_lens.begin());
        cout << "    " << sum << ": [" << join(possible_lens, ", ") << "]," << endl;
    }
    cout << "};" << endl;
    return 0;
}

*/