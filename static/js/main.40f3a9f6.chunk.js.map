{"version":3,"sources":["board.tsx","control.tsx","models/cellModel.ts","models/boardModel.ts","models/controlModel.ts","index.tsx"],"names":["Cell","this","props","cell","value","className","highlightMatching","sortedValues","Array","from","cornerValues","sort","map","classes","shouldHighlightMatching","key","id","centerValues","isRegionTop","push","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","selected","restricted","error","join","onClick","onMouseDown","onMouseOver","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","Board","i","board","cells","e","String","startingCell","renderCell","rows","renderRow","Control","Form","Button","onClickVerify","onClickUndo","onClickRedo","Check","type","label","checked","control","displayOptions","highlightRestricted","onChange","onToggleHighlightRestricted","highlightMatchingNumbers","onToggleHighlightMatchingNumbers","autoCleanUp","onToggleAutoCleanUp","gamePlay","antiKnight","onToggleAntiKnight","antiKing","onToggleAntiKing","onClickFillCenters","CellModel","row","col","Set","set_intersection","a","b","filter","x","has","BoardModel","result","forEach","JSON","stringify","serialized","clearAllErrors","clearAllRestricteds","clearAllSelections","obj","parse","cellId","toRowCol","getRegionByPosition","col2","add","toCellId","row2","region","getRegion","di","dj","isInside","delete","myValue","getVisibleCells","neighborId","seenValues","getPossibleValues","cellIds","newValue","autoCleanup","clear","ControlModel","Game","state","history","historyId","isMouseDown","serialize","_","clone","slice","setState","load","length","console","log","newBoard","cloneBoard","assignNewBoard","selectedValues","size","selectedValue","values","next","clearSelection","clearSelectionAndRestricted","setSelected","setRestricted","updateHighlightMatchingNumbers","select","metaKey","clearAllError","setValueOfSelectedCells","unsetSelectedCells","toggleCornerValuesOfSelectedCells","clearCornerValuesOfSelectedCells","toggleCenterValuesOfSelectedCells","clearCenterValuesOfSelectedCells","invalidCellIds","getInvalidCellIds","setErrors","alert","d_row","d_col","r","c","keyCode","isShift","shiftKey","isMeta","KeyCode","fromCharCode","preventDefault","moveSelection","undo","redo","newControl","cloneControl","toggleHighlightRestricted","assignNewControl","toggleHighlightMatchingNumbers","toggleAutoCleanUp","toggleAntiKnight","toggleAntiKing","fillAllPossibleValues","onKeyDown","handleKeyDown","tabIndex","onMouseUp","handleMouseUp","handleClick","handleMouseDown","handleMouseOver","verifyBoard","handleToggleHighlightRestricted","handleToggleHighlightMatchingNumbers","handleToggleAutoCleanUp","handleToggleAntiKnight","handleToggleAntiKing","handleClickFillCenter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40f3a9f6.chunk.js","sourcesContent":["import React from 'react';\n\nimport { BoardModel } from './models/boardModel';\nimport { CellModel, CellValue } from './models/cellModel';\n\ntype CellProps = {\n    cell: CellModel,\n    onClick: (e: any) => void,\n    onMouseDown: (e: any) => void,\n    onMouseOver: (e: any) => void,\n    key: string,\n    highlightMatching: CellValue,\n};\n\ntype BoardProps = {\n    board: BoardModel,\n    onClick: (e: any, i: number) => void,\n    onMouseDown: (e: any, i: number) => void,\n    onMouseOver: (i: number) => void,\n    highlightMatching: CellValue,\n};\n\nclass Cell extends React.Component<CellProps> {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    shouldHighlightMatching(value: CellValue) {\n        return this.props.highlightMatching && value === this.props.highlightMatching;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"corner-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"center-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        } else if (this.shouldHighlightMatching(this.props.cell.value)) {\n            classes.push('matching');\n        } else if (this.props.cell.restricted) {\n            classes.push('restricted');\n        }\n        if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                onMouseDown={this.props.onMouseDown}\n                onMouseOver={this.props.onMouseOver}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nclass Board extends React.Component<BoardProps> {\n    renderCell(i: number) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                onMouseDown={(e) => this.props.onMouseDown(e, i)}\n                onMouseOver={() => this.props.onMouseOver(i)}\n                key={String(i)}\n                highlightMatching={this.props.highlightMatching}\n            />\n        );\n    }\n\n    renderRow(startingCell: number) {\n        let cells = [];\n        for (let i = startingCell; i < startingCell + 9; i++) {\n            cells.push(this.renderCell(i));\n        }\n        return (\n            <div className=\"row\" key={startingCell}>\n                {cells}\n            </div>\n        );\n    }\n\n    render() {\n        let rows = [];\n        for (let i = 0; i < 81; i += 9) {\n            rows.push(this.renderRow(i));\n        }\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nimport { ControlModel } from './models/controlModel';\n\ntype ControlProps = {\n    control: ControlModel,\n\n    onClickVerify: () => void,\n    onClickUndo: () => void,\n    onClickRedo: () => void,\n\n    onToggleHighlightRestricted: () => void,\n    onToggleHighlightMatchingNumbers: () => void,\n    onToggleAutoCleanUp: () => void,\n\n    onToggleAntiKnight: () => void,\n    onToggleAntiKing: () => void,\n\n    onClickFillCenters: () => void,\n};\n\nclass Control extends React.Component<ControlProps> {\n    render() {\n        return (\n            <Form>\n                <div className=\"\">\n                    <Button onClick={this.props.onClickVerify}>\n                        Verify\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickUndo}\n                        className=\"btn-secondary\"\n                    >\n                        Undo\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickRedo}\n                        className=\"btn-secondary\"\n                    >\n                        Redo\n                    </Button>\n                </div>\n                <hr/>\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.control.displayOptions.highlightRestricted}\n                    onChange={this.props.onToggleHighlightRestricted}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-matching-numbers'\n                    label='Highlight matching numbers'\n                    checked={this.props.control.displayOptions.highlightMatchingNumbers}\n                    onChange={this.props.onToggleHighlightMatchingNumbers}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-auto-cleanup'\n                    label='Auto Cleanup corner & center values'\n                    checked={this.props.control.displayOptions.autoCleanUp}\n                    onChange={this.props.onToggleAutoCleanUp}\n                />\n                <hr/>\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label='Anti Knight'\n                    checked={this.props.control.gamePlay.antiKnight}\n                    onChange={this.props.onToggleAntiKnight}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label='Anti King'\n                    checked={this.props.control.gamePlay.antiKing}\n                    onChange={this.props.onToggleAntiKing}\n                />\n                <hr/>\n                <h4>Help</h4>\n                <Button\n                    onClick={this.props.onClickFillCenters}\n                    className=\"btn-secondary\"\n                >\n                    Fill all center values\n                </Button>\n            </Form>\n        );\n    }\n}\n\nexport default Control;\n","type CellValue = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | null;\n\nclass CellModel {\n    value: CellValue;\n    cornerValues: Set<CellValue>;\n    centerValues: Set<CellValue>;\n    selected: boolean;\n    restricted: boolean;\n    error: boolean;\n    row: number;\n    col: number;\n    id: number;\n\n    constructor(id: number) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop(): boolean {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom(): boolean {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft(): boolean {\n        return this.col % 3 === 0;\n    }\n    isRegionRight(): boolean {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop(): boolean {\n        return this.row === 0;\n    }\n    isBoardBottom(): boolean {\n        return this.row === 8;\n    }\n    isBoardLeft(): boolean {\n        return this.col === 0;\n    }\n    isBoardRight(): boolean {\n        return this.col === 8;\n    }\n}\n\nexport { CellModel };\nexport type { CellValue };\n","import { CellModel, CellValue } from './cellModel';\nimport { GamePlay } from './controlModel';\n\nfunction set_intersection(a: Set<any>, b: Set<any>) {\n    return new Set([...a].filter(x => b.has(x)));\n}\n\nfunction set_difference(a: Set<any>, b: Set<any>) {\n    return new Set([...a].filter(x => !b.has(x)));\n}\n\nclass BoardModel {\n    cells: Array<CellModel>;\n\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n    }\n\n    serialize(): string {\n        let result: Array<{\n            value: CellValue;\n            cornerValues: Array<CellValue>;\n            centerValues: Array<CellValue>;\n        }> = [];\n\n        this.cells.forEach((cell) => {\n            result.push({\n                value: cell.value,\n                cornerValues: Array.from(cell.cornerValues),\n                centerValues: Array.from(cell.centerValues),\n            });\n        });\n        return JSON.stringify(result);\n    }\n\n    load(serialized: string): void {\n        this.clearAllErrors();\n        this.clearAllRestricteds();\n        this.clearAllSelections();\n\n        let obj = JSON.parse(serialized);\n        for (let i = 0; i < 81; i++) {\n            this.cells[i].value = obj[i].value;\n            this.cells[i].cornerValues = new Set(obj[i].cornerValues);\n            this.cells[i].centerValues = new Set(obj[i].centerValues);\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row: number, col: number): boolean {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row: number, col: number): number {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId: number): [number, number] {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row: number, col: number): number {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId: number): number {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId: number, gamePlay: GamePlay): Set<number> {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result: Set<number> = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gamePlay.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gamePlay.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gamePlay: GamePlay): Set<number> {\n        let result: Set<number> = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gamePlay).forEach(neighborId => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    getPossibleValues(cellId: number, gamePlay: GamePlay): Set<CellValue> {\n        const seenValues = Array.from(this.getVisibleCells(cellId, gamePlay))\n            .map(neighborId => this.cells[neighborId].value)\n            .filter(x => x);\n\n        return set_difference(new Set(['1', '2', '3', '4', '5', '6', '7', '8', '9']), new Set(seenValues));\n    }\n\n    fillAllPossibleValues(gamePlay: GamePlay): void {\n        this.cells.forEach(cell => {\n            if (!cell.value) {\n                cell.centerValues = this.getPossibleValues(cell.id, gamePlay);\n            }\n        });\n    }\n\n    setSelected(cellId: number): void {\n        this.cells[cellId].selected = true;\n    }\n\n    setRestricted(gamePlay: GamePlay): void {\n        let restricted: Set<any> | null = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gamePlay);\n                } else {\n                    restricted = set_intersection(this.getVisibleCells(id, gamePlay), restricted);\n                }\n            }\n        }\n\n        if (restricted) {\n            restricted.forEach((cellId) => {\n                this.cells[cellId].restricted = true;\n            });\n        }\n    }\n\n    setErrors(cellIds: Set<number>): void {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSelectedCells(newValue: CellValue, gamePlay: GamePlay, autoCleanup: boolean = false): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = newValue;\n                if (autoCleanup) {\n                    this.getVisibleCells(cell.id, gamePlay).forEach((id) => {\n                        this.cells[id].cornerValues.delete(newValue);\n                        this.cells[id].centerValues.delete(newValue);\n                    });\n                }\n            }\n        });\n    }\n\n    unsetSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = null;\n            }\n        });\n    }\n\n    toggleCornerValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections(): void {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds(): void {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors(): void {\n        this.cells.forEach((cell) => {\n            cell.error = false;\n        });\n    }\n}\n\nexport { BoardModel };\n","type GamePlay = {\n    antiKnight: boolean;\n    antiKing: boolean;\n};\n\nclass ControlModel {\n    displayOptions: {\n        highlightRestricted: boolean;\n        highlightMatchingNumbers: boolean;\n        autoCleanUp: boolean;\n    };\n    gamePlay: {\n        antiKnight: boolean;\n        antiKing: boolean;\n    };\n\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n            highlightMatchingNumbers: false,\n            autoCleanUp: false,\n        };\n        this.gamePlay = {\n            antiKnight: false,\n            antiKing: false,\n        };\n    }\n\n    toggleHighlightRestricted(): void {\n        this.displayOptions.highlightRestricted = !this.displayOptions.highlightRestricted;\n    }\n\n    toggleHighlightMatchingNumbers(): void {\n        this.displayOptions.highlightMatchingNumbers = !this.displayOptions.highlightMatchingNumbers;\n    }\n\n    toggleAutoCleanUp(): void {\n        this.displayOptions.autoCleanUp = !this.displayOptions.autoCleanUp;\n    }\n\n    toggleAntiKnight(): void {\n        this.gamePlay.antiKnight = !this.gamePlay.antiKnight;\n    }\n\n    toggleAntiKing(): void {\n        this.gamePlay.antiKing = !this.gamePlay.antiKing;\n    }\n}\n\nexport { ControlModel };\nexport type { GamePlay };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport * as KeyCode from 'keycode-js';\n\nimport Board from './board';\nimport Control from './control';\nimport { BoardModel } from './models/boardModel';\nimport { CellValue } from './models/cellModel';\nimport { ControlModel } from './models/controlModel';\n\nimport './index.css';\n\ntype GameProps = {\n};\n\ntype GameState = {\n    board: BoardModel,\n    control: ControlModel,\n\n    history: Array<string>,\n    historyId: number,\n\n    isMouseDown: boolean,\n    highlightMatching: CellValue,\n};\n\nclass Game extends React.Component<GameProps, GameState> {\n    constructor(props: GameProps) {\n        super(props);\n        this.state = {\n            board: new BoardModel(),\n            control: new ControlModel(),\n            history: [],\n            historyId: 0,\n            isMouseDown: false,\n            highlightMatching: null,\n        };\n        // Assumption:\n        // board is equivalent to history[historyId] at all times.\n        this.state.history.push(this.state.board.serialize());\n    }\n    \n    cloneBoard() {\n        let newBoard = _.clone(this.state.board);\n        return newBoard;\n    }\n\n    cloneControl() {\n        let newControl = _.clone(this.state.control);\n        return newControl;\n    }\n\n    assignNewBoard(board: BoardModel) {\n        const serialized = board.serialize();\n        let history = this.state.history;\n        let historyId = this.state.historyId;\n\n        // Only update history if the serialized new board is different.\n        // Thus, we ignore all selections and restrictions.\n        if (serialized !== this.state.history[historyId]) {\n            // Remove the rest of history.\n            // This clean data in case we do lots of undo, and then make a new move.\n            history = _.slice(history, 0, historyId + 1);\n\n            // Update history.\n            history.push(serialized);\n            historyId += 1;\n        }\n\n        this.setState({\n            board: board,\n            history: history,\n            historyId: historyId,\n        });\n    }\n    \n    undo() {\n        if (this.state.historyId === 0) {\n            // Nothing to undo.\n            return;\n        }\n        let board = new BoardModel();\n        board.load(this.state.history[this.state.historyId - 1]);\n\n        this.setState({\n            board: board,\n            historyId: this.state.historyId - 1,\n        });\n    }\n\n    redo() {\n        if (this.state.historyId >= this.state.history.length - 1) {\n            // Nothing to redo.\n            return;\n        }\n        let board = new BoardModel();\n        board.load(this.state.history[this.state.historyId + 1]);\n\n        this.setState({\n            board: board,\n            historyId: this.state.historyId + 1,\n        });\n    }\n\n    assignNewControl(control: ControlModel) {\n        this.setState({ control: control });\n    }\n\n    clearSelectionAndRestricted() {\n        console.log('clearSelectionAndRestricted');\n        let newBoard = this.cloneBoard();\n\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n\n        this.assignNewBoard(newBoard);\n        this.setState({highlightMatching: null});\n    }\n\n    updateHighlightMatchingNumbers() {\n        if (this.state.control.displayOptions.highlightMatchingNumbers) {\n            const selectedValues = new Set(\n                this.state.board.cells\n                    .filter((cell) => cell.selected)\n                    .filter((cell) => cell.value)\n                    .map((cell) => cell.value)\n            );\n            if (selectedValues.size === 1) {\n                const selectedValue = selectedValues.values().next().value;\n                this.setState({highlightMatching: selectedValue});\n            }\n        }\n    }\n\n    // Select a cell.\n    select(cellId: number, clearSelection = true) {\n        console.log('select ' + cellId);\n        let newBoard = this.cloneBoard();\n        if (clearSelection) {\n            this.clearSelectionAndRestricted();\n        } else {\n            newBoard.clearAllRestricteds();\n        }\n\n        newBoard.setSelected(cellId);\n\n        if (this.state.control.displayOptions.highlightRestricted) {\n            newBoard.setRestricted(this.state.control.gamePlay);\n        }\n\n        this.assignNewBoard(newBoard);\n        this.updateHighlightMatchingNumbers();\n    }\n\n    // Handle clicking on a cell.\n    handleClick(e: any, cellId: number) {\n        console.log('handleClick ' + cellId);\n        this.select(cellId, !e.metaKey);\n    }\n\n    // Handle mousedown on a cell.\n    handleMouseDown(e: any, cellId: number) {\n        console.log('handleMouseDown ' + cellId);\n        this.setState({isMouseDown: true});\n\n        this.select(cellId, !e.metaKey);\n    }\n\n    // Handle mouseover a cell.\n    handleMouseOver(cellId: number) {\n        if (!this.state.isMouseDown) {\n            return;\n        }\n        console.log('handleMouseOver ' + cellId);\n        this.select(cellId, false);\n    }\n\n    handleMouseUp() {\n        console.log('handleMouseUp');\n        this.setState({isMouseDown: false});\n    }\n\n    setValueOfSelectedCells(newValue: CellValue) {\n        console.log('setValueOfSelectedCells ' + newValue);\n        this.clearAllError();\n\n        let newBoard = this.cloneBoard();\n        newBoard.setValueOfSelectedCells(\n            newValue,\n            this.state.control.gamePlay,\n            this.state.control.displayOptions.autoCleanUp);\n\n        this.assignNewBoard(newBoard);\n        this.updateHighlightMatchingNumbers();\n    }\n\n    unsetSelectedCells() {\n        console.log('unsetSelectedCells');\n        this.clearAllError();\n\n        let newBoard = this.cloneBoard();\n        newBoard.unsetSelectedCells();\n\n        this.assignNewBoard(newBoard);\n    }\n\n    toggleCornerValuesOfSelectedCells(newValue: CellValue) {\n        console.log('toggleCornerValuesOfSelectedCells ' + newValue);\n\n        let newBoard = this.cloneBoard();\n        newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    clearCornerValuesOfSelectedCells() {\n        console.log('clearCornerValuesOfSelectedCells');\n        \n        let newBoard = this.cloneBoard();\n        newBoard.clearCornerValuesOfSelectedCells();\n        this.assignNewBoard(newBoard);\n    }\n\n    toggleCenterValuesOfSelectedCells(newValue: CellValue) {\n        console.log('toggleCenterValuesOfSelectedCells ' + newValue);\n\n        let newBoard = this.cloneBoard();\n        newBoard.toggleCenterValuesOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    clearCenterValuesOfSelectedCells() {\n        console.log('clearCenterValuesOfSelectedCells');\n\n        let newBoard = this.cloneBoard();\n        newBoard.clearCenterValuesOfSelectedCells();\n        this.assignNewBoard(newBoard);\n    }\n\n    clearAllError() {\n        console.log('clearAllError');\n        let newBoard = this.cloneBoard();\n        newBoard.clearAllErrors();\n        this.assignNewBoard(newBoard);\n    }\n\n    verifyBoard() {\n        console.log('verifyBoard');\n        let newBoard = this.cloneBoard();\n        newBoard.clearAllErrors();\n        let invalidCellIds = newBoard.getInvalidCellIds(this.state.control.gamePlay);\n        newBoard.setErrors(invalidCellIds);\n        this.assignNewBoard(newBoard);\n\n        alert(invalidCellIds.size > 0 ? 'Error found :(' : 'LGTM!');\n    }\n\n    // Move selected cell in direction (d_row, d_col).\n    // If there are more than one selected cells, only move the first one.\n    moveSelection(d_row: number, d_col: number) {\n        let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n        for (let i = 0; i < 81; i++) {\n            if (this.state.board.cells[i].selected) {\n                console.log(this.state);\n                [r, c] = this.state.board.toRowCol(i);\n                break;\n            }\n        }\n        r = (r + d_row + 9) % 9;\n        c = (c + d_col + 9) % 9;\n        this.select(this.state.board.toCellId(r, c));\n    }\n\n    // Handle keypress event on a cell.\n    handleKeyDown(e: any) {\n        console.log('handleKeyDown, keyCode = ' + e.keyCode);\n\n        let isShift = !!e.shiftKey;\n        let isMeta = !!e.metaKey;\n\n        // Pressed 1-9\n        if (e.keyCode >= KeyCode.KEY_1 && e.keyCode <= KeyCode.KEY_9) {\n            const value = String.fromCharCode(e.keyCode) as CellValue;\n            if (isShift) {\n                this.toggleCornerValuesOfSelectedCells(value)\n            } else if (isMeta) {\n                this.toggleCenterValuesOfSelectedCells(value);\n                e.preventDefault();\n            } else {\n                this.setValueOfSelectedCells(value);\n            }\n        }\n\n        switch (e.keyCode) {\n            case KeyCode.KEY_SPACE:\n                this.unsetSelectedCells();\n                break;\n            case KeyCode.KEY_BACK_SPACE:\n                this.unsetSelectedCells();\n                this.clearCornerValuesOfSelectedCells();\n                this.clearCenterValuesOfSelectedCells();\n                e.preventDefault();\n                break;\n            case KeyCode.KEY_DOWN:\n                this.moveSelection(+1, 0);\n                break;\n            case KeyCode.KEY_UP:\n                this.moveSelection(-1, 0);\n                break;\n            case KeyCode.KEY_LEFT:\n                this.moveSelection(0, -1);\n                break;\n            case KeyCode.KEY_RIGHT:\n                this.moveSelection(0, +1);\n                break;\n            case KeyCode.KEY_ESCAPE:\n                this.clearSelectionAndRestricted();\n                break;\n            case KeyCode.KEY_Z:\n            case KeyCode.KEY_U:\n                this.undo();\n                break;\n            case KeyCode.KEY_Y:\n            case KeyCode.KEY_R:\n                this.redo();\n                break;\n            default:\n        }\n    }\n\n    handleToggleHighlightRestricted() {\n        console.log('handleToggleHighlightRestricted');\n        let newControl = this.cloneControl();\n        newControl.toggleHighlightRestricted();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleHighlightMatchingNumbers() {\n        console.log('handleToggleHighlightMatchingNumbers');\n        let newControl = this.cloneControl();\n        newControl.toggleHighlightMatchingNumbers();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAutoCleanUp() {\n        console.log('handleToggleAutoCleanUp');\n        let newControl = this.cloneControl();\n        newControl.toggleAutoCleanUp();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAntiKnight() {\n        console.log('handleToggleAntiKnight');\n        let newControl = this.cloneControl();\n        newControl.toggleAntiKnight();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAntiKing() {\n        console.log('handleToggleAntiKing');\n        let newControl = this.cloneControl();\n        newControl.toggleAntiKing();\n        this.assignNewControl(newControl);\n    }\n\n    handleClickFillCenter() {\n        console.log('handleClickFillCenter');\n        let newBoard = this.cloneBoard();\n        newBoard.fillAllPossibleValues(this.state.control.gamePlay);\n        this.assignNewBoard(newBoard);\n    }\n\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.handleKeyDown(e)}\n                tabIndex={0}\n                className=\"container\"\n                onMouseUp={() => this.handleMouseUp()}\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.state.board}\n                            onClick={(e, i) => this.handleClick(e, i)}\n                            onMouseDown={(e, i) => this.handleMouseDown(e, i)}\n                            onMouseOver={(i) => this.handleMouseOver(i)}\n                            highlightMatching={this.state.highlightMatching}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            control={this.state.control}\n                            onClickVerify={() => this.verifyBoard()}\n                            onClickUndo={() => this.undo()}\n                            onClickRedo={() => this.redo()}\n                            onToggleHighlightRestricted={() => this.handleToggleHighlightRestricted()}\n                            onToggleHighlightMatchingNumbers={() => this.handleToggleHighlightMatchingNumbers()}\n                            onToggleAutoCleanUp={() => this.handleToggleAutoCleanUp()}\n                            onToggleAntiKnight={() => this.handleToggleAntiKnight()}\n                            onToggleAntiKing={() => this.handleToggleAntiKing()}\n                            onClickFillCenters={() => this.handleClickFillCenter()}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}