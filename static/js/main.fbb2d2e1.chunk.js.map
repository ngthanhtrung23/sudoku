{"version":3,"sources":["components/board/Cell.tsx","components/board/Board.tsx","actions/types.ts","actions/history.ts","actions/board.ts","components/control/DisplayOptions.tsx","actions/control.ts","components/control/GameOptions.tsx","components/control/Control.tsx","components/Game.tsx","models/control.ts","models/cell.ts","models/board.ts","models/history.ts","reducers/index.ts","reducers/board.ts","reducers/control.ts","reducers/history.ts","index.tsx"],"names":["Cell","this","props","cell","value","className","highlightMatching","sortedValues","Array","from","cornerValues","sort","map","classes","shouldHighlightMatching","key","id","centerValues","isRegionTop","push","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","selected","restricted","error","join","onClick","onMouseDown","onMouseOver","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","Board","i","board","cells","e","String","startingCell","keys","x","renderCell","rows","renderRow","NO_OP","type","redo","history","boards","length","payload","serialized","undo","updateBoard","select","control","cellId","clearSelection","setMultiSelect","newBoard","_","cloneDeep","multiSelectMode","clearAllSelections","clearAllRestricteds","setSelected","displayOptions","highlightRestricted","setRestricted","gamePlay","highlightMatchingNumbers","selectedValues","getSelectedValues","size","selectedValue","values","next","move","d_row","d_col","r","c","toRowCol","toCellId","DisplayOptions","Form","Check","label","checked","onChange","updateDisplay","autoCleanUp","connector","connect","state","GamePlay","antiKnight","updateGamePlay","antiKing","Control","Button","onClickVerify","onClickUndo","onClickRedo","onClickFillCenters","Game","onKeyDown","keyDown","tabIndex","onMouseUp","mouseUp","metaKey","mouseDown","mouseOver","verify","fillCenter","isShift","shiftKey","isMeta","keyCode","KeyCode","fromCharCode","newValue","toggleCornerValuesOfSelectedCells","toggleCornerValues","preventDefault","toggleCenterValuesOfSelectedCells","toggleCenterValues","clearAllErrors","setValueOfSelectedCells","setValue","unsetSelectedCells","unsetValue","clearCornerValuesOfSelectedCells","clearCenterValuesOfSelectedCells","pressBackspace","pressEsc","Object","assign","fillAllPossibleValues","invalidCellIds","getInvalidCellIds","setErrors","alert","ControlModel","CellModel","row","col","Set","set_intersection","a","b","filter","has","BoardModel","result","forEach","JSON","stringify","obj","parse","getRegionByPosition","col2","add","row2","region","getRegion","di","dj","isInside","delete","myValue","getVisibleCells","neighborId","seenValues","getPossibleValues","cellIds","autoCleanup","clear","HistoryModel","serialize","combineReducers","action","load","slice","assert","isMouseDown","ReactDOM","render","store","createStore","reducers","document","getElementById"],"mappings":"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","file":"static/js/main.fbb2d2e1.chunk.js","sourcesContent":["import React from 'react';\n\nimport { CellModel, CellValue } from '../../models/cell';\n\ntype CellProps = {\n    cell: CellModel,\n    onClick: (e: any) => void,\n    onMouseDown: (e: any) => void,\n    onMouseOver: (e: any) => void,\n    key: string,\n    highlightMatching: CellValue,\n};\n\nclass Cell extends React.Component<CellProps> {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    shouldHighlightMatching(value: CellValue) {\n        return this.props.highlightMatching && value === this.props.highlightMatching;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"corner-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"center-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        } else if (this.shouldHighlightMatching(this.props.cell.value)) {\n            classes.push('matching');\n        } else if (this.props.cell.restricted) {\n            classes.push('restricted');\n        }\n        if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                onMouseDown={this.props.onMouseDown}\n                onMouseOver={this.props.onMouseOver}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nexport default Cell;\n","import React from 'react';\n\nimport Cell from './Cell';\nimport { BoardModel } from '../../models/board';\n\nclass Board extends React.Component<BoardProps> {\n    renderCell(i: number) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                onMouseDown={(e) => this.props.onMouseDown(e, i)}\n                onMouseOver={() => this.props.onMouseOver(i)}\n                key={String(i)}\n                highlightMatching={this.props.board.highlightMatching}\n            />\n        );\n    }\n\n    renderRow(startingCell: number) {\n        const cells = [...Array(9).keys()].map(x => this.renderCell(startingCell + x));\n        return (\n            <div className=\"row\" key={startingCell}>\n                {cells}\n            </div>\n        );\n    }\n\n    render() {\n        const rows = [...Array(9).keys()].map(x => this.renderRow(9 * x));\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\ntype BoardProps = {\n    board: BoardModel,\n    onClick: (e: any, i: number) => void,\n    onMouseDown: (e: any, i: number) => void,\n    onMouseOver: (i: number) => void,\n};\n\n\nexport default Board;\n","import { BoardModel } from '../models/board';\nimport { DisplayOptions, GameOptions } from '../models/control';\n\nexport const ACTION_NO_OP = 'ACTION_NO_OP';\nexport interface NoOpAction {\n    type: typeof ACTION_NO_OP,\n};\nexport const NO_OP: NoOpAction = { type: ACTION_NO_OP };\n\n// Board actions.\nexport const ACTION_UPDATE_BOARD = 'ACTION_UPDATE_BOARD';\n\nexport interface UpdateBoardAction {\n    type: typeof ACTION_UPDATE_BOARD,\n    payload: {\n        board: BoardModel,\n    },\n};\n\n// Control actions.\nexport const ACTION_UPDATE_DISPLAY = 'ACTION_UPDATE_DISPLAY';\nexport const ACTION_UPDATE_GAME_PLAY = 'ACTION_UPDATE_GAME_PLAY';\n\ninterface UpdateDisplayAction {\n    type: typeof ACTION_UPDATE_DISPLAY,\n    payload: DisplayOptions,\n};\n\ninterface UpdateGamePlayAction {\n    type: typeof ACTION_UPDATE_GAME_PLAY,\n    payload: GameOptions,\n}\n\n// History actions.\nexport const ACTION_REDO = 'ACTION_REDO';\nexport const ACTION_UNDO = 'ACTION_UNDO';\n\nexport interface RedoAction {\n    type: typeof ACTION_REDO,\n    payload: {\n        serialized: string,\n    },\n};\nexport interface UndoAction {\n    type: typeof ACTION_UNDO,\n    payload: {\n        serialized: string,\n    },\n};\n\n// Combine all action types.\nexport type ActionTypes = NoOpAction\n    | UpdateBoardAction\n    | UpdateDisplayAction | UpdateGamePlayAction\n    | RedoAction | UndoAction;\n","import { ACTION_REDO, ACTION_UNDO, NO_OP, ActionTypes } from './types';\nimport { HistoryModel } from '../models/history';\n\n\nexport const redo = (history: HistoryModel): ActionTypes => {\n    if (history.id >= history.boards.length - 1) {\n        // Nothing to redo.\n        return NO_OP;\n    }\n    return {\n        type: ACTION_REDO,\n        payload: {\n            serialized: history.boards[history.id + 1],\n        },\n    };\n};\n\nexport const undo = (history: HistoryModel): ActionTypes => {\n    if (history.id === 0) {\n        // Nothing to do.\n        return NO_OP;\n    }\n    return {\n        type: ACTION_UNDO,\n        payload: {\n            serialized: history.boards[history.id - 1],\n        },\n    };\n};\n","import * as KeyCode from 'keycode-js';\nimport _ from 'lodash';\n\nimport { ACTION_UPDATE_BOARD, NO_OP, ActionTypes } from './types';\nimport { undo, redo } from './history';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\nimport { ControlModel } from '../models/control';\nimport { HistoryModel } from '../models/history';\n\nexport const updateBoard = (board: BoardModel): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_BOARD,\n        payload: {\n            board: board,\n        }\n    };\n};\n\nconst pressEsc = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllSelections();\n    newBoard.clearAllRestricteds();\n    newBoard.highlightMatching = null;\n    return updateBoard(newBoard);\n}\n\nexport const select = (\n        board: BoardModel,\n        control: ControlModel,\n        cellId: number,\n        clearSelection: boolean = true,\n        setMultiSelect: boolean | null = null\n        ): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    if (setMultiSelect !== null) {\n        newBoard.multiSelectMode = setMultiSelect;\n    }\n\n    if (clearSelection) {\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n        newBoard.highlightMatching = null;\n    } else {\n        newBoard.clearAllRestricteds();\n    }\n\n    newBoard.setSelected(cellId);\n\n    if (control.displayOptions.highlightRestricted) {\n        newBoard.setRestricted(control.gamePlay);\n    }\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n\n    return updateBoard(newBoard);\n}\n\nexport const mouseDown = (board: BoardModel, control: ControlModel, cellId: number, clearSelection: boolean): ActionTypes => {\n    return select(board, control, cellId, clearSelection, true);\n}\n\nexport const mouseOver = (board: BoardModel, control: ControlModel, cellId: number): ActionTypes => {\n    if (!board.multiSelectMode) {\n        return NO_OP;\n    }\n    return select(board, control, cellId, false);\n}\n\nexport const mouseUp = (board: BoardModel): ActionTypes => {\n    return updateBoard(Object.assign(board, { multiSelectMode: false}));\n}\n\nconst setValue = (board: BoardModel, control: ControlModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.setValueOfSelectedCells(\n        newValue,\n        control.gamePlay,\n        control.displayOptions.autoCleanUp);\n\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n    return updateBoard(newBoard);\n};\n\nconst unsetValue = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.unsetSelectedCells();\n\n    return updateBoard(newBoard);\n};\n\nconst toggleCornerValues = (board: BoardModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n    return updateBoard(newBoard);\n}\n\nconst toggleCenterValues = (board: BoardModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.toggleCenterValuesOfSelectedCells(newValue);\n    return updateBoard(newBoard);\n}\n\n// Move selected cell in direction (d_row, d_col).\n// If there are more than one selected cells, only move the first one.\nconst move = (board: BoardModel, control: ControlModel, d_row: number, d_col: number): ActionTypes => {\n    let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n    for (let i = 0; i < 81; i++) {\n        if (board.cells[i].selected) {\n            [r, c] = board.toRowCol(i);\n            break;\n        }\n    }\n    r = (r + d_row + 9) % 9;\n    c = (c + d_col + 9) % 9;\n    return select(board, control, board.toCellId(r, c));\n}\n\nconst pressBackspace = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.unsetSelectedCells();\n\n    newBoard.clearCornerValuesOfSelectedCells();\n    newBoard.clearCenterValuesOfSelectedCells();\n\n    return updateBoard(newBoard);\n}\n\nexport const keyDown = (board: BoardModel, control: ControlModel, history: HistoryModel, e: any): ActionTypes => {\n    let isShift = !!e.shiftKey;\n    let isMeta = !!e.metaKey;\n\n    // Pressed 1-9\n    if (e.keyCode >= KeyCode.KEY_1 && e.keyCode <= KeyCode.KEY_9) {\n        const value = String.fromCharCode(e.keyCode) as CellValue;\n        if (isShift) {\n            return toggleCornerValues(board, value)\n        } else if (isMeta) {\n            e.preventDefault();\n            return toggleCenterValues(board, value);\n        } else {\n            return setValue(board, control, value);\n        }\n    }\n\n    switch (e.keyCode) {\n        case KeyCode.KEY_SPACE:\n            return unsetValue(board);\n        case KeyCode.KEY_BACK_SPACE:\n            e.preventDefault();\n            return pressBackspace(board);\n        case KeyCode.KEY_DOWN:\n            return move(board, control, +1, 0);\n        case KeyCode.KEY_UP:\n            return move(board, control, -1, 0);\n        case KeyCode.KEY_LEFT:\n            return move(board, control, 0, -1);\n        case KeyCode.KEY_RIGHT:\n            return move(board, control, 0, +1);\n        case KeyCode.KEY_ESCAPE:\n            return pressEsc(board);\n        case KeyCode.KEY_Z:\n        case KeyCode.KEY_U:\n            return undo(history);\n        case KeyCode.KEY_Y:\n        case KeyCode.KEY_R:\n            return redo(history);\n        default:\n    }\n    return NO_OP;\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { updateDisplay } from '../../actions/control';\nimport { GameState } from '../Game';\n\nclass DisplayOptions extends React.Component<DisplayOptionsProps> {\n    render() {\n        return (\n            <div id=\"display-options\">\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.highlightRestricted}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightRestricted: !this.props.highlightRestricted\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-matching-numbers'\n                    label='Highlight matching numbers'\n                    checked={this.props.highlightMatchingNumbers}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightMatchingNumbers: !this.props.highlightMatchingNumbers\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-auto-cleanup'\n                    label='Auto Cleanup corner &amp; center values'\n                    checked={this.props.autoCleanUp}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        autoCleanUp: !this.props.autoCleanUp\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.displayOptions};\n};\n\nconst connector = connect(mapStateToProps, { updateDisplay });\n\ntype DisplayOptionsProps = ConnectedProps<typeof connector>;\n\nexport default connector(DisplayOptions);\n","import _ from 'lodash';\n\nimport { ACTION_UPDATE_DISPLAY, ACTION_UPDATE_GAME_PLAY as ACTION_UPDATE_GAME_OPTIONS, ActionTypes } from './types';\nimport { BoardModel } from '../models/board';\nimport { ControlModel, DisplayOptions, GameOptions } from '../models/control';\nimport { updateBoard } from './board';\n\n\nexport const fillCenter = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.fillAllPossibleValues(control.gamePlay);\n    return updateBoard(newBoard);\n}\n\nexport const updateDisplay = (displayOptions: DisplayOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_DISPLAY,\n        payload: displayOptions,\n    };\n};\n\nexport const updateGameOptions = (gamePlay: GameOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_GAME_OPTIONS,\n        payload: gamePlay,\n    }\n};\n\nexport const verify = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllErrors();\n    let invalidCellIds = newBoard.getInvalidCellIds(control.gamePlay);\n    newBoard.setErrors(invalidCellIds);\n\n    alert(invalidCellIds.size > 0 ? 'Error found :(' : 'LGTM!');\n    return updateBoard(newBoard);\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { updateGameOptions } from '../../actions/control';\nimport { GameState } from '../Game';\n\nclass GamePlay extends React.Component<GamePlayProps> {\n    render() {\n        return (\n            <div id=\"game-play\">\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label='Anti Knight'\n                    checked={this.props.antiKnight}\n                    onChange={() => this.props.updateGamePlay({\n                        ...this.props,\n                        antiKnight: !this.props.antiKnight\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label='Anti King'\n                    checked={this.props.antiKing}\n                    onChange={() => this.props.updateGamePlay({\n                        ...this.props,\n                        antiKing: !this.props.antiKing\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.gamePlay};\n};\n\nconst connector = connect(mapStateToProps, { updateGamePlay: updateGameOptions });\n\ntype GamePlayProps = ConnectedProps<typeof connector>;\n\nexport default connector(GamePlay);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nimport DisplayOptions from './DisplayOptions';\nimport GamePlay from './GameOptions';\n\nclass Control extends React.Component<ControlProps> {\n    render() {\n        return (\n            <Form>\n                <div className=\"\">\n                    <Button onClick={this.props.onClickVerify}>\n                        Verify\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickUndo}\n                        className=\"btn-secondary\"\n                    >\n                        Undo\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickRedo}\n                        className=\"btn-secondary\"\n                    >\n                        Redo\n                    </Button>\n                </div>\n                <hr/>\n                <DisplayOptions />\n                <hr/>\n                <GamePlay />\n                <hr/>\n                <h4>Help</h4>\n                <Button\n                    onClick={this.props.onClickFillCenters}\n                    className=\"btn-secondary\"\n                >\n                    Fill all center values\n                </Button>\n            </Form>\n        );\n    }\n}\n\ntype ControlProps = {\n    onClickVerify: () => void,\n    onClickUndo: () => void,\n    onClickRedo: () => void,\n\n    onClickFillCenters: () => void,\n};\n\nexport default Control;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport Board from './board/Board';\nimport Control from './control/Control';\nimport { BoardModel } from '../models/board';\nimport { ControlModel } from '../models/control';\nimport { keyDown, mouseDown, mouseOver, mouseUp, select } from '../actions/board';\nimport { fillCenter, verify } from '../actions/control';\nimport { redo, undo } from '../actions/history';\nimport { HistoryModel } from '../models/history';\n\nexport type GameState = {\n    board: BoardModel,\n    control: ControlModel,\n    history: HistoryModel,\n};\n\nclass Game extends React.Component<GameProps, GameState> {\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.props.keyDown(this.props.board, this.props.control, this.props.history, e)}\n                tabIndex={0}\n                className=\"container\"\n                onMouseUp={() => this.props.mouseUp(this.props.board)}\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.props.board}\n                            onClick={(e, id) => this.props.select(this.props.board, this.props.control, id, !e.metaKey)}\n                            onMouseDown={(e, id) => this.props.mouseDown(this.props.board, this.props.control, id, !e.metaKey)}\n                            onMouseOver={(id) => this.props.mouseOver(this.props.board, this.props.control, id)}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            onClickVerify={() => this.props.verify(this.props.board, this.props.control)}\n                            onClickUndo={() => this.props.undo(this.props.history)}\n                            onClickRedo={() => this.props.redo(this.props.history)}\n                            onClickFillCenters={() => this.props.fillCenter(this.props.board, this.props.control)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state};\n};\n\nconst connector = connect(mapStateToProps, {\n    // history actions.\n    redo: redo,\n    undo: undo,\n\n    // board actions.\n    keyDown: keyDown,\n    mouseDown: mouseDown,\n    mouseOver: mouseOver,\n    mouseUp: mouseUp,\n    select: select,\n\n    // control actions.\n    fillCenter: fillCenter,\n    verify: verify,\n});\n\ntype GameProps = ConnectedProps<typeof connector>;\n\nexport default connector(Game);\n","export type GameOptions = {\n    antiKnight: boolean;\n    antiKing: boolean;\n};\n\nexport type DisplayOptions = {\n    highlightRestricted: boolean;\n    highlightMatchingNumbers: boolean;\n    autoCleanUp: boolean;\n};\n\nexport class ControlModel {\n    displayOptions: DisplayOptions;\n    gamePlay: GameOptions;\n\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n            highlightMatchingNumbers: false,\n            autoCleanUp: false,\n        };\n        this.gamePlay = {\n            antiKnight: false,\n            antiKing: false,\n        };\n    }\n}\n","export type CellValue = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | null;\n\nexport class CellModel {\n    value: CellValue;\n    cornerValues: Set<CellValue>;\n    centerValues: Set<CellValue>;\n    selected: boolean;\n    restricted: boolean;\n    error: boolean;\n    row: number;\n    col: number;\n    id: number;\n\n    constructor(id: number) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop(): boolean {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom(): boolean {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft(): boolean {\n        return this.col % 3 === 0;\n    }\n    isRegionRight(): boolean {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop(): boolean {\n        return this.row === 0;\n    }\n    isBoardBottom(): boolean {\n        return this.row === 8;\n    }\n    isBoardLeft(): boolean {\n        return this.col === 0;\n    }\n    isBoardRight(): boolean {\n        return this.col === 8;\n    }\n}\n","import { CellModel, CellValue } from './cell';\nimport { GameOptions } from './control';\n\nfunction set_intersection(a: Set<any>, b: Set<any>) {\n    return new Set([...a].filter(x => b.has(x)));\n}\n\nfunction set_difference(a: Set<any>, b: Set<any>) {\n    return new Set([...a].filter(x => !b.has(x)));\n}\n\nclass BoardModel {\n    cells: Array<CellModel>;\n    highlightMatching: CellValue;\n    multiSelectMode: boolean;\n\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n        this.highlightMatching = null;\n        this.multiSelectMode = false;\n    }\n\n    serialize(): string {\n        let result: Array<{\n            value: CellValue;\n            cornerValues: Array<CellValue>;\n            centerValues: Array<CellValue>;\n        }> = [];\n\n        this.cells.forEach((cell) => {\n            result.push({\n                value: cell.value,\n                cornerValues: Array.from(cell.cornerValues),\n                centerValues: Array.from(cell.centerValues),\n            });\n        });\n        return JSON.stringify(result);\n    }\n\n    load(serialized: string): void {\n        this.clearAllErrors();\n        this.clearAllRestricteds();\n        this.clearAllSelections();\n\n        let obj = JSON.parse(serialized);\n        for (let i = 0; i < 81; i++) {\n            this.cells[i].value = obj[i].value;\n            this.cells[i].cornerValues = new Set(obj[i].cornerValues);\n            this.cells[i].centerValues = new Set(obj[i].centerValues);\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row: number, col: number): boolean {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row: number, col: number): number {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId: number): [number, number] {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row: number, col: number): number {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId: number): number {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId: number, gamePlay: GameOptions): Set<number> {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result: Set<number> = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gamePlay.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gamePlay.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gamePlay: GameOptions): Set<number> {\n        let result: Set<number> = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gamePlay).forEach(neighborId => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    getPossibleValues(cellId: number, gamePlay: GameOptions): Set<CellValue> {\n        const seenValues = Array.from(this.getVisibleCells(cellId, gamePlay))\n            .map(neighborId => this.cells[neighborId].value)\n            .filter(x => x);\n\n        return set_difference(new Set(['1', '2', '3', '4', '5', '6', '7', '8', '9']), new Set(seenValues));\n    }\n\n    fillAllPossibleValues(gamePlay: GameOptions): void {\n        this.cells.forEach(cell => {\n            if (!cell.value) {\n                cell.centerValues = this.getPossibleValues(cell.id, gamePlay);\n            }\n        });\n    }\n\n    setSelected(cellId: number): void {\n        this.cells[cellId].selected = true;\n    }\n\n    getSelectedValues(): Set<CellValue> {\n        return new Set(\n            this.cells\n                .filter((cell) => cell.selected)\n                .filter((cell) => cell.value)\n                .map((cell) => cell.value)\n        );\n    }\n\n    setRestricted(gamePlay: GameOptions): void {\n        let restricted: Set<any> | null = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gamePlay);\n                } else {\n                    restricted = set_intersection(this.getVisibleCells(id, gamePlay), restricted);\n                }\n            }\n        }\n\n        if (restricted) {\n            restricted.forEach((cellId) => {\n                this.cells[cellId].restricted = true;\n            });\n        }\n    }\n\n    setErrors(cellIds: Set<number>): void {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSelectedCells(newValue: CellValue, gamePlay: GameOptions, autoCleanup: boolean = false): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = newValue;\n                if (autoCleanup) {\n                    this.getVisibleCells(cell.id, gamePlay).forEach((id) => {\n                        this.cells[id].cornerValues.delete(newValue);\n                        this.cells[id].centerValues.delete(newValue);\n                    });\n                }\n            }\n        });\n    }\n\n    unsetSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = null;\n            }\n        });\n    }\n\n    toggleCornerValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections(): void {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds(): void {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors(): void {\n        this.cells.forEach((cell) => {\n            cell.error = false;\n        });\n    }\n}\n\nexport { BoardModel };\n","import { BoardModel } from \"./board\";\n\nexport class HistoryModel {\n    boards: Array<string>;\n    id: number;\n\n    constructor() {\n        this.boards = [];\n        this.id = 0;\n\n        const board = new BoardModel();\n        this.boards.push(board.serialize());\n    }\n}\n","import { combineReducers } from 'redux';\n\nimport { controlReducer } from './control';\nimport { boardReducer } from './board';\nimport { historyReducer } from './history';\n\nconst isMouseDownReducer = (isMouseDown = false) => {\n    return isMouseDown;\n}\n\nconst highlightMatchingReducer = (highlightMatching = null) => {\n    return highlightMatching;\n}\n\nexport default combineReducers({\n    board: boardReducer,\n    control: controlReducer,\n    history: historyReducer,\n    isMouseDown: isMouseDownReducer,\n    highlightMatching: highlightMatchingReducer,\n});\n","import { ActionTypes, ACTION_UPDATE_BOARD, ACTION_UNDO, ACTION_REDO } from '../actions/types';\nimport { BoardModel } from '../models/board';\n\nexport const boardReducer = (board = new BoardModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        return action.payload.board;\n    }\n    if (action.type === ACTION_UNDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n    if (action.type === ACTION_REDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n\n    return board;\n}\n","import { ActionTypes, ACTION_UPDATE_DISPLAY, ACTION_UPDATE_GAME_PLAY } from '../actions/types';\nimport { ControlModel } from '../models/control';\n\nexport const controlReducer = (control: ControlModel = new ControlModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_DISPLAY) {\n        return {...control, displayOptions: action.payload};\n    }\n    if (action.type === ACTION_UPDATE_GAME_PLAY) {\n        return {...control, gamePlay: action.payload};\n    }\n    return control;\n};\n","import assert from 'assert';\nimport { ActionTypes, ACTION_UPDATE_BOARD, ACTION_UNDO, ACTION_REDO } from '../actions/types';\nimport { HistoryModel } from '../models/history';\n\nexport const historyReducer = (history = new HistoryModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        const serialized = action.payload.board.serialize();\n\n        // Only update history if the serialized new board is different.\n        // Thus, we ignore all selections and restrictions.\n        if (serialized !== history.boards[history.id]) {\n            // Remove the rest of history.\n            // This clean data in case we do lots of undo, and then make a new move.\n            history.boards = history.boards.slice(0, history.id + 1);\n\n            // Update history.\n            history.boards.push(serialized);\n            history.id += 1;\n        }\n        return history;\n    }\n    if (action.type === ACTION_UNDO) {\n        assert(history.id > 0);\n        return {...history, id: history.id - 1 };\n    }\n    if (action.type === ACTION_REDO) {\n        assert(history.id + 1 < history.boards.length);\n        return {...history, id: history.id + 1 };\n    }\n    return history;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport Game from './components/Game';\nimport reducers from './reducers';\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={createStore(reducers)}>\n        <Game />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}