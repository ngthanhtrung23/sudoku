{"version":3,"sources":["actions/types.ts","actions/history.ts","actions/board.ts","utils/solver.ts","components/board/Cell.tsx","components/board/SandwichCell.tsx","components/board/Board.tsx","components/control/DisplayOptions.tsx","actions/control.ts","components/control/GameOptions.tsx","components/control/Control.tsx","components/Game.tsx","utils/set.ts","models/cell.ts","models/sandwichCell.ts","models/board.ts","models/control.ts","models/history.ts","reducers/index.ts","reducers/board.ts","reducers/control.ts","reducers/history.ts","reducers/gameUrl.ts","index.tsx"],"names":["NO_OP","type","redo","history","id","boards","length","payload","serialized","undo","updateBoard","board","select","control","cellId","clearSelection","setMultiSelect","newBoard","_","cloneDeep","multiSelectMode","clearAllSelections","clearAllRestricteds","highlightMatching","setSelected","displayOptions","highlightRestricted","setRestricted","gameOptions","highlightMatchingNumbers","selectedValues","getSelectedValues","size","selectedValue","values","next","value","selectSandwich","isRow","sandwich","Error","rowSandwich","selected","colSandwich","move","d_row","d_col","r","c","i","cells","toRowCol","toCellId","bitCount","n","bitContains","bit","solveBoard","fillAllPossibleValues","map","cell","candidates","mask","centerValues","attempt","bestId","solution","setValueOfSingleCell","String","fromCharCode","firstSolution","cntSolutions","saveValues","clone","saveCandidates","neighborIds","getVisibleCells","neighborId","cnt","Cell","this","props","className","sortedValues","Array","from","cornerValues","sort","classes","shouldHighlightMatching","key","isRegionTop","push","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","restricted","isFixed","error","join","onClick","onMouseDown","onMouseOver","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","SandwichCell","defaultValue","undefined","Board","e","onSelectSandwich","rowId","startingCell","keys","x","renderCell","sandwichCell","renderSandwichCell","sandwichCells","renderEmptySandwichCell","sandwichRow","renderSandwichRow","rows","renderRow","DisplayOptions","Form","Check","label","checked","onChange","updateDisplay","autoCleanUp","connector","connect","state","GameOptions","message","OverlayTrigger","placement","overlay","Tooltip","renderLabel","antiKnight","updateGameOptions","antiKing","Control","url","href","Button","onClickVerify","onClickUndo","onClickRedo","renderTooltip","onClickFillCenters","solve","generateUrl","renderUrl","gameUrl","Game","encoded","initGameState","JSON","parse","window","atob","onKeyDown","keyDown","tabIndex","onMouseUp","mouseUp","metaKey","mouseDown","mouseOver","verify","fillCenter","ownProps","match","params","decodedState","rowSandwichSums","colSandwichSums","gameState","location","origin","pathname","btoa","stringify","isShift","shiftKey","isMeta","keyCode","KeyCode","hasSelected","newValue","toggleCornerValuesOfSelectedCells","toggleCornerValues","preventDefault","toggleCenterValuesOfSelectedCells","toggleCenterValues","clearAllErrors","setValueOfSelectedCells","setValue","hasSandwichSelected","filter","forEach","setSandwichValue","unsetSelectedCells","unsetValue","clearCornerValuesOfSelectedCells","clearCenterValuesOfSelectedCells","pressBackspace","pressEsc","Object","assign","invalidCellIds","getInvalidCellIds","setErrors","hasError","isValid","want","has","getRowSandwichSum","getColSandwichSum","alert","set_intersection","a","b","Set","CellModel","row","col","SandwichCellModel","BoardModel","result","obj","getRegionByPosition","col2","add","row2","region","getRegion","di","dj","isInside","delete","myValue","seenValues","getPossibleValues","find","indexOf","left","Math","min","right","max","sum","slice","getSandwichSum","colId","cellIds","autoCleanup","clear","ControlModel","HistoryModel","serialize","combineReducers","action","load","assert","isMouseDown","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","path","component","document","getElementById"],"mappings":"yTAOaA,EAAoB,CAAEC,KAJP,gBCCfC,EAAO,SAACC,GACjB,OAAIA,EAAQC,IAAMD,EAAQE,OAAOC,OAAS,EAE/BN,EAEJ,CACHC,KDyCmB,cCxCnBM,QAAS,CACLC,WAAYL,EAAQE,OAAOF,EAAQC,GAAK,MAKvCK,EAAO,SAACN,GACjB,OAAmB,IAAfA,EAAQC,GAEDJ,EAEJ,CACHC,KD6BmB,cC5BnBM,QAAS,CACLC,WAAYL,EAAQE,OAAOF,EAAQC,GAAK,MCqBvCM,EAAc,SAACC,GACxB,MAAO,CACHV,KFtC2B,sBEuC3BM,QAAS,CACLI,MAAOA,KAaNC,EAAS,SACdD,EACAE,EACAC,GAGmB,IAFnBC,IAEkB,yDADlBC,EACkB,uDADe,KAEjCC,EAAWC,IAAEC,UAAUR,GAmB3B,GAjBuB,OAAnBK,IACAC,EAASG,gBAAkBJ,GAG3BD,GACAE,EAASI,qBACTJ,EAASK,sBACTL,EAASM,kBAAoB,MAE7BN,EAASK,sBAGbL,EAASO,YAAYV,GAEjBD,EAAQY,eAAeC,qBACvBT,EAASU,cAAcd,EAAQe,aAE/Bf,EAAQY,eAAeI,yBAA0B,CACjDZ,EAASM,kBAAoB,KAE7B,IAAMO,EAAiBb,EAASc,oBAChC,GAA4B,IAAxBD,EAAeE,KAAY,CAC3B,IAAMC,EAAgBH,EAAeI,SAASC,OAAOC,MACrDnB,EAASM,kBAAoBU,GAIrC,OAAOvB,EAAYO,IAGVoB,EAAiB,SACtB1B,EACAE,EACAyB,EACAlC,GACJ,IAAIa,EAAWC,IAAEC,UAAUR,GAC3B,IAAKE,EAAQe,YAAYW,SACrB,MAAM,IAAIC,MAAM,6CAapB,OAVAvB,EAASI,qBACTJ,EAASK,sBACTL,EAASM,kBAAoB,KAEzBe,EACArB,EAASwB,YAAYrC,GAAIsC,UAAW,EAEpCzB,EAAS0B,YAAYvC,GAAIsC,UAAW,EAGjChC,EAAYO,IA4EjB2B,EAAO,SAACjC,EAAmBE,EAAuBgC,EAAeC,GAEnE,IADA,IAAIC,EAAI,EAAGC,EAAI,EACNC,EAAI,EAAGA,EAAI,GAAIA,IACpB,GAAItC,EAAMuC,MAAMD,GAAGP,SAAU,CAAC,IAAD,EAChB/B,EAAMwC,SAASF,GADC,mBACxBF,EADwB,KACrBC,EADqB,KAEzB,MAGR,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,GAAItC,EAAMgC,YAAYM,GAAGP,SAAU,CAC/BK,GAAK,EACLC,EAAIC,EACJ,MAEAtC,EAAM8B,YAAYQ,GAAGP,WACrBK,EAAIE,EACJD,GAAK,GAIb,OAAInC,EAAQe,YAAYW,UAEpBS,GAAKA,EAAIF,EAAQ,IAAM,GAEb,KAHVC,GAAKA,EAAIF,EAAQ,IAAM,KAGF,IAANG,EAEJX,EAAe1B,EAAOE,GAAS,EAAO,GAChC,IAANkC,EAEAV,EAAe1B,EAAOE,GAAS,EAAOmC,GAChC,IAANA,EAEAX,EAAe1B,EAAOE,GAAS,EAAMkC,GAErCnC,EAAOD,EAAOE,EAASF,EAAMyC,SAASL,EAAGC,MAGpDD,GAAKA,EAAIF,EAAQ,GAAK,EACtBG,GAAKA,EAAIF,EAAQ,GAAK,EACflC,EAAOD,EAAOE,EAASF,EAAMyC,SAASL,EAAGC,M,QCxOlDK,EAAW,SAACC,GAGd,OAAqC,WADrCA,GAAS,WADTA,GAAUA,GAAK,EAAK,cACKA,GAAK,EAAK,aACrBA,GAAK,GAAK,YAA2B,IAGjDC,EAAc,SAACD,EAAWE,GAC5B,OAASF,GAAKE,EAAO,GAAK,GAgEjBC,EAAa,SAAC9C,EAAmBE,GAC1C,IAAII,EAAWC,IAAEC,UAAUR,GAC3BM,EAASyC,sBAAsB7C,EAAQe,aAEvC,IAAIM,EAASjB,EAASiC,MAAMS,KAAI,SAAAC,GAC5B,OAAKA,EAAKxB,OACGwB,EAAKxB,MADM,KAGxByB,EAAa5C,EAASiC,MAAMS,KAAI,SAAAC,GAChC,IADwC,EACpCE,EAAO,EAD6B,cAEtBF,EAAKG,cAFiB,IAExC,2BAAqC,CAAC,IAA7B3B,EAA4B,QACnB,OAAVA,IACA0B,GAAQ,IAAO1B,IAJiB,8BAOxC,OAAO0B,KAEX,OAvEY,SAAVE,EAAWrD,EAAmBE,EAAuBqB,EAAuB2B,GAG9E,IADA,IAAII,GAAU,EACLhB,EAAI,EAAGA,EAAI,GAAIA,IACF,IAAdf,EAAOe,KACHgB,EAAS,GAAKZ,EAASnB,EAAOe,IAAMI,EAASnB,EAAO+B,OACpDA,EAAShB,GAIrB,GAAIgB,EAAS,EAAG,CAGZ,IADA,IAAIC,EAAWhD,IAAEC,UAAUR,GAClBsC,EAAI,EAAGA,EAAI,GAAIA,IACpBiB,EAASC,qBAAqBlB,EAAGmB,OAAOC,aAAa,GAAKnC,EAAOe,IAAkBpC,EAAQe,aAAa,GAE5G,MAAO,CAACsC,EAAU,GAGtB,GAAqC,IAAjCb,EAASQ,EAAWI,IACpB,MAAO,CAAC,KAAM,GAKlB,IAFA,IA9BuBX,EAAWE,EA8B9Bc,EAAgB,KAChBC,EAAe,EACVnC,EAAQ,EAAGA,GAAS,EAAGA,IAC5B,GAAImB,EAAYM,EAAWI,GAAS7B,GAAQ,CACxC,IAAMoC,EAAatD,IAAEuD,MAAMvC,GACrBwC,EAAiBxD,IAAEuD,MAAMZ,GAE/B3B,EAAO+B,GAAU7B,EACjB,IALwC,EAKlCuC,EAAchE,EAAMiE,gBAAgBX,EAAQpD,EAAQe,aALlB,cAMjB+C,GANiB,IAMxC,2BAAoC,CAAC,IAA5BE,EAA2B,QAChChB,EAAWgB,IAxCAvB,EAwCgCO,EAAWgB,GAvC7DtB,EAAYD,EADiBE,EAwC6CpB,GApCxEkB,GAAK,GAAGE,GAFJF,IA+BqC,oCAUlBU,EAAQrD,EAAOE,EAASqB,EAAQ2B,GAVd,mBAUnCK,EAVmC,KAUzBY,EAVyB,KAWxC,GAAIA,EAAM,IACgB,OAAlBR,IACAA,EAAgBJ,IAEpBK,GAAgBO,IACI,GAChB,MAIR5C,EAASsC,EACTX,EAAaa,EAGrB,MAAO,CAACJ,EAAeC,GAoBhBP,CAAQ/C,EAAUJ,EAASqB,EAAQ2B,ICwC/BkB,E,oLAtHP,GAAIC,KAAKC,MAAMrB,KAAKxB,MAChB,OACI,0BAAM8C,UAAU,mBACXF,KAAKC,MAAMrB,KAAKxB,S,8CAOTA,GACpB,OAAO4C,KAAKC,MAAM1D,mBAAqBa,IAAU4C,KAAKC,MAAM1D,oB,+CAGtC,IAAD,OACrB,IAAIyD,KAAKC,MAAMrB,KAAKxB,MAApB,CAIA,IAAM+C,EAAeC,MAAMC,KAAKL,KAAKC,MAAMrB,KAAK0B,cAC3CC,OACA5B,KAAI,SAACvB,GACF,IAAMoD,EAAU,EAAKC,wBAAwBrD,GAAS,WAAa,GACnE,OACI,0BACI8C,UAAWM,EACXE,IAAK,UAAY,EAAKT,MAAMrB,KAAKxD,GAAK,IAAMgC,GAE3CA,MAIjB,OACI,0BAAM8C,UAAU,qBACXC,M,+CAKa,IAAD,OACrB,IAAIH,KAAKC,MAAMrB,KAAKxB,MAApB,CAIA,IAAM+C,EAAeC,MAAMC,KAAKL,KAAKC,MAAMrB,KAAKG,cAC3CwB,OACA5B,KAAI,SAACvB,GACF,IAAMoD,EAAU,EAAKC,wBAAwBrD,GAAS,WAAa,GACnE,OACI,0BACI8C,UAAWM,EACXE,IAAK,UAAY,EAAKT,MAAMrB,KAAKxD,GAAK,IAAMgC,GAE3CA,MAIjB,OACI,0BAAM8C,UAAU,qBACXC,M,+BAMT,IAAIK,EAAU,CAAC,QAqCf,OAlCIR,KAAKC,MAAMrB,KAAK+B,eAChBH,EAAQI,KAAK,cAEbZ,KAAKC,MAAMrB,KAAKiC,gBAChBL,EAAQI,KAAK,eAIbZ,KAAKC,MAAMrB,KAAKkC,eAChBN,EAAQI,KAAK,cAEbZ,KAAKC,MAAMrB,KAAKmC,gBAChBP,EAAQI,KAAK,eAEbZ,KAAKC,MAAMrB,KAAKoC,cAChBR,EAAQI,KAAK,aAEbZ,KAAKC,MAAMrB,KAAKqC,iBAChBT,EAAQI,KAAK,gBAIbZ,KAAKC,MAAMrB,KAAKlB,SAChB8C,EAAQI,KAAK,YACNZ,KAAKS,wBAAwBT,KAAKC,MAAMrB,KAAKxB,OACpDoD,EAAQI,KAAK,YACNZ,KAAKC,MAAMrB,KAAKsC,WACvBV,EAAQI,KAAK,cACNZ,KAAKC,MAAMrB,KAAKuC,QACvBX,EAAQI,KAAK,SACNZ,KAAKC,MAAMrB,KAAKwC,OACvBZ,EAAQI,KAAK,SAIb,yBACIV,UAAWM,EAAQa,KAAK,KACxBC,QAAStB,KAAKC,MAAMqB,QACpBC,YAAavB,KAAKC,MAAMsB,YACxBC,YAAaxB,KAAKC,MAAMuB,YACxBd,IAAKV,KAAKC,MAAMrB,KAAKxD,IAEpB4E,KAAKyB,sBACLzB,KAAK0B,yBACL1B,KAAK2B,8B,GAlHHC,IAAMC,WCqBVC,E,uKAvBP,IAAIC,EAA2C,OAA3B/B,KAAKC,MAAM7C,MAAMA,WAAkB4E,EAAYhC,KAAKC,MAAM7C,MAAMA,MAEhFoD,EAAU,CAAC,iBASf,OARIR,KAAKC,MAAM7C,MAAMM,SACjB8C,EAAQI,KAAK,YACNZ,KAAKC,MAAM7C,MAAM+D,SACxBX,EAAQI,KAAK,SAEbZ,KAAKC,MAAM7C,MAAMgE,OACjBZ,EAAQI,KAAK,SAGb,yBACIU,QAAStB,KAAKC,MAAMqB,QACpBpB,UAAWM,EAAQa,KAAK,MACxB,yBAAKnB,UAAU,mBACV6B,Q,GAlBMH,IAAMC,WCqFlBI,E,yKAtFAhE,GAAY,IAAD,OAClB,OACI,kBAAC,EAAD,CACIW,KAAMoB,KAAKC,MAAMtE,MAAMuC,MAAMD,GAC7BqD,QAAS,SAACY,GAAD,OAAO,EAAKjC,MAAMqB,QAAQY,EAAGjE,IACtCsD,YAAa,SAACW,GAAD,OAAO,EAAKjC,MAAMsB,YAAYW,EAAGjE,IAC9CuD,YAAa,kBAAM,EAAKvB,MAAMuB,YAAYvD,IAC1CyC,IAAKtB,OAAOnB,GACZ1B,kBAAmByD,KAAKC,MAAMtE,MAAMY,sB,yCAK7Be,EAAgBlC,EAAYsF,GAAc,IAAD,OAClDtD,EAASE,EAAS0C,KAAKC,MAAMtE,MAAM8B,YAAYrC,GAAM4E,KAAKC,MAAMtE,MAAMgC,YAAYvC,GACxF,OACI,kBAAC,EAAD,CACIgC,MAAOA,EACPsD,IAAKA,EACLY,QAAS,SAACY,GAAD,OAAO,EAAKjC,MAAMkC,iBAAiBD,EAAG5E,EAAOlC,Q,gDAM9D,OACI,yBAAK8E,UAAU,oB,gCAIbkC,GAAgB,IAAD,OACfC,EAAuB,EAARD,EACflE,EAAQ,YAAIkC,MAAM,GAAGkC,QAAQ3D,KAAI,SAAA4D,GAAC,OAAI,EAAKC,WAAWH,EAAeE,MAEvEE,EAAe,KAMnB,OALIzC,KAAKC,MAAMrD,YAAYW,WACvBkF,EAAezC,KAAK0C,oBAChB,EAAMN,EADK,uBACkBA,KAIjC,yBAAKlC,UAAU,MAAMQ,IAAK2B,GACrBI,EACAvE,K,0CAKQ,IAAD,OACVyE,EAAgB,YAAIvC,MAAM,GAAGkC,QAAQ3D,KACvC,SAAA4D,GAAC,OAAI,EAAKG,oBAAmB,EAAOH,EAA/B,uBAAkDA,OAE3D,OACI,yBAAKrC,UAAU,OACVF,KAAK4C,0BACLD,K,+BAKH,IAAD,OACDE,EAAc,KACd7C,KAAKC,MAAMrD,YAAYW,WACvBsF,EAAc7C,KAAK8C,qBAGvB,IAAMC,EAAO,YAAI3C,MAAM,GAAGkC,QAAQ3D,KAAI,SAAA4D,GAAC,OAAI,EAAKS,UAAUT,MAC1D,OACI,6BACKM,EACAE,O,GAvEGnB,IAAMC,W,gCCApBoB,E,uKACQ,IAAD,OACL,OACI,yBAAK7H,GAAG,mBACJ,+CACA,kBAAC8H,EAAA,EAAKC,MAAN,CACIlI,KAAK,WACLG,GAAG,gCACHgI,MAAM,6BACNC,QAASrD,KAAKC,MAAMvD,oBACpB4G,SAAU,kBAAM,EAAKrD,MAAMsD,cAAX,2BACT,EAAKtD,OADI,IAEZvD,qBAAsB,EAAKuD,MAAMvD,0BAGzC,kBAACwG,EAAA,EAAKC,MAAN,CACIlI,KAAK,WACLG,GAAG,sCACHgI,MAAM,6BACNC,QAASrD,KAAKC,MAAMpD,yBACpByG,SAAU,kBAAM,EAAKrD,MAAMsD,cAAX,2BACT,EAAKtD,OADI,IAEZpD,0BAA2B,EAAKoD,MAAMpD,+BAG9C,kBAACqG,EAAA,EAAKC,MAAN,CACIlI,KAAK,WACLG,GAAG,wBACHgI,MAAM,sCACNC,QAASrD,KAAKC,MAAMuD,YACpBF,SAAU,kBAAM,EAAKrD,MAAMsD,cAAX,2BACT,EAAKtD,OADI,IAEZuD,aAAc,EAAKvD,MAAMuD,uB,GAhCpB5B,IAAMC,WAgDpB4B,EAJGC,aAJM,SAACC,GACrB,OAAO,eAAIA,EAAM9H,QAAQY,kBAGc,CAAE8G,cC/BhB,SAAC9G,GAC1B,MAAO,CACHxB,KRe6B,wBQd7BM,QAASkB,KDgCFgH,CAAUR,G,QE7CnBW,E,0KACUR,EAAYhI,EAAYyI,GAChC,OACI,kBAACC,EAAA,EAAD,CACIC,UAAU,QACVC,QAAS,kBAACC,EAAA,EAAD,CAAS7I,GAAIA,GAAKyI,IAE3B,8BACKT,EADL,OAEI,kBAAC,IAAD,U,+BAMN,IAAD,OACL,OACI,yBAAKhI,GAAG,aACJ,yCACA,kBAAC8H,EAAA,EAAKC,MAAN,CACIlI,KAAK,WACLG,GAAG,uBACHgI,MAAOpD,KAAKkE,YAAY,cAAe,sBAAuB,yFAC9Db,QAASrD,KAAKC,MAAMkE,WACpBb,SAAU,kBAAM,EAAKrD,MAAMmE,kBAAX,2BACT,EAAKnE,OADI,IAEZkE,YAAa,EAAKlE,MAAMkE,iBAGhC,kBAACjB,EAAA,EAAKC,MAAN,CACIlI,KAAK,WACLG,GAAG,qBACHgI,MAAOpD,KAAKkE,YAAY,YAAa,oBAAqB,uFAC1Db,QAASrD,KAAKC,MAAMoE,SACpBf,SAAU,kBAAM,EAAKrD,MAAMmE,kBAAX,2BACT,EAAKnE,OADI,IAEZoE,UAAW,EAAKpE,MAAMoE,eAG9B,kBAACnB,EAAA,EAAKC,MAAN,CACIlI,KAAK,WACLG,GAAG,oBACHgI,MAAOpD,KAAKkE,YAAY,WAAY,mBAAoB,qGACxDb,QAASrD,KAAKC,MAAM1C,SACpB+F,SAAU,kBAAM,EAAKrD,MAAMmE,kBAAX,2BACT,EAAKnE,OADI,IAEZ1C,UAAW,EAAK0C,MAAM1C,oB,GA9CpBqE,IAAMC,WA8DjB4B,EAJGC,aAJM,SAACC,GACrB,OAAO,eAAIA,EAAM9H,QAAQe,eAGc,CAAEwH,kBDzCZ,SAACxH,GAC9B,MAAO,CACH3B,KRS+B,0BQR/BM,QAASqB,KC0CF6G,CAAUG,GC7DnBU,E,0KAEE,GAAKtE,KAAKC,MAAMsE,IAGhB,OAAO,uBAAGC,KAAMxE,KAAKC,MAAMsE,KAApB,U,oCAGGnJ,EAAYyI,GACtB,OACI,kBAACI,EAAA,EAAD,CAAS7I,GAAIA,GACRyI,K,+BAMT,OACI,kBAACX,EAAA,EAAD,KACI,yBAAKhD,UAAU,IACX,kBAACuE,EAAA,EAAD,CAAQnD,QAAStB,KAAKC,MAAMyE,eAA5B,UADJ,OAKI,kBAACD,EAAA,EAAD,CACInD,QAAStB,KAAKC,MAAM0E,YACpBzE,UAAU,iBAFd,QALJ,OAYI,kBAACuE,EAAA,EAAD,CACInD,QAAStB,KAAKC,MAAM2E,YACpB1E,UAAU,iBAFd,SAOJ,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,oCACA,kBAAC4D,EAAA,EAAD,CACIC,UAAU,MACVC,QAAShE,KAAK6E,cAAc,sBAAuB,4CAEnD,kBAACJ,EAAA,EAAD,CACInD,QAAStB,KAAKC,MAAM6E,mBACpB5E,UAAU,iBAFd,2BA9BR,OAsCI,kBAACuE,EAAA,EAAD,CACInD,QAAStB,KAAKC,MAAM8E,MACpB7E,UAAU,iBAFd,SAMA,6BACA,kBAACuE,EAAA,EAAD,CACInD,QAAStB,KAAKC,MAAM+E,YACpB9E,UAAU,iBAFd,WA7CJ,OAoDKF,KAAKiF,iB,GAtEArD,IAAMC,WA0Fb4B,EAXGC,aAHM,SAACC,GACrB,MAAO,CAAEY,IAAKZ,EAAMuB,WAaTzB,CAAUa,GCxEnBa,E,kLAEMnF,KAAKC,MAAMmF,SACXpF,KAAKC,MAAMoF,cAAcC,KAAKC,MAAMC,OAAOC,KAAKzF,KAAKC,MAAMmF,a,+BAIzD,IAAD,OACL,OACI,yBACIM,UAAW,SAACxD,GAAD,OAAO,EAAKjC,MAAM0F,QAAQ,EAAK1F,MAAMtE,MAAO,EAAKsE,MAAMpE,QAAS,EAAKoE,MAAM9E,QAAS+G,IAC/F0D,SAAU,EACV1F,UAAU,YACV2F,UAAW,kBAAM,EAAK5F,MAAM6F,QAAQ,EAAK7F,MAAMtE,SAE/C,2CACA,yBAAKuE,UAAU,OACX,yBAAKA,UAAU,UACX,kBAAC,EAAD,CACIvE,MAAOqE,KAAKC,MAAMtE,MAClBiB,YAAaoD,KAAKC,MAAMpE,QAAQe,YAChC0E,QAAS,SAACY,EAAG9G,GAAJ,OAAW,EAAK6E,MAAMrE,OAAO,EAAKqE,MAAMtE,MAAO,EAAKsE,MAAMpE,QAAST,GAAK8G,EAAE6D,UACnF5D,iBAAkB,SAACD,EAAG5E,EAAOlC,GAAX,OAAkB,EAAK6E,MAAM5C,eAAe,EAAK4C,MAAMtE,MAAO,EAAKsE,MAAMpE,QAASyB,EAAOlC,IAC3GmG,YAAa,SAACW,EAAG9G,GAAJ,OAAW,EAAK6E,MAAM+F,UAAU,EAAK/F,MAAMtE,MAAO,EAAKsE,MAAMpE,QAAST,GAAK8G,EAAE6D,UAC1FvE,YAAa,SAACpG,GAAD,OAAQ,EAAK6E,MAAMgG,UAAU,EAAKhG,MAAMtE,MAAO,EAAKsE,MAAMpE,QAAST,OAGxF,yBAAK8E,UAAU,UACX,kBAAC,EAAD,CACIwE,cAAe,kBAAM,EAAKzE,MAAMiG,OAAO,EAAKjG,MAAMtE,MAAO,EAAKsE,MAAMpE,UACpE8I,YAAa,kBAAM,EAAK1E,MAAMxE,KAAK,EAAKwE,MAAM9E,UAC9CyJ,YAAa,kBAAM,EAAK3E,MAAM/E,KAAK,EAAK+E,MAAM9E,UAC9C2J,mBAAoB,kBAAM,EAAK7E,MAAMkG,WAAW,EAAKlG,MAAMtE,MAAO,EAAKsE,MAAMpE,UAC7EkJ,MAAO,kBAAM,EAAK9E,MAAM8E,MAAM,EAAK9E,MAAMtE,MAAO,EAAKsE,MAAMpE,UAC3DmJ,YAAa,kBAAM,EAAK/E,MAAM+E,YAAY,EAAK/E,MAAMtE,MAAO,EAAKsE,MAAMpE,mB,GAlChF+F,IAAMC,WA0EV4B,EAvBGC,aAPM,SAACC,EAAkByC,GACvC,OAAO,2BACAzC,GADP,IAEIyB,QAASgB,EAASC,MAAMC,OAAOlB,YAII,CAEvClK,OACAO,OAGA4J,cTtEyB,SAACkB,GAC1B,MAAO,CACHtL,KFN8B,yBEO9BM,QAAS,CACL2B,OAAQqJ,EAAarJ,OACrBsJ,gBAAiBD,EAAaC,gBAC9BC,gBAAiBF,EAAaE,gBAC9B7J,YAAa2J,EAAa3J,eSgElCoI,YT3DuB,SAACrJ,EAAmBE,GAC3C,IAAM6K,EAAY,CACdxJ,OAAQvB,EAAMuC,MAAMS,KAAI,SAAAC,GACpB,OAAIA,EAAKxB,MAAcwB,EAAKxB,MAChB,OACbiE,KAAK,IACRmF,gBAAkB3K,EAAQe,YAAYW,SAAY5B,EAAM8B,YAAYkB,KAAI,SAAAC,GAAI,OAAIA,EAAKxB,SAAS,KAC9FqJ,gBAAkB5K,EAAQe,YAAYW,SAAY5B,EAAMgC,YAAYgB,KAAI,SAAAC,GAAI,OAAIA,EAAKxB,SAAS,KAC9FR,YAAaf,EAAQe,aAEzB,MAAO,CACH3B,KF5B2B,sBE6B3BM,QAAS,CACLgJ,IAAKiB,OAAOmB,SAASC,OAASpB,OAAOmB,SAASE,SAAW,KAAOrB,OAAOsB,KAAKxB,KAAKyB,UAAUL,OS+CnGf,QTqKmB,SAAChK,EAAmBE,EAAuBV,EAAuB+G,GACrF,IAAI8E,IAAY9E,EAAE+E,SACdC,IAAWhF,EAAE6D,QAGjB,GAAI7D,EAAEiF,SAAWC,KAAiBlF,EAAEiF,SAAWC,IAAe,CAC1D,GAAIlF,EAAEiF,UAAYC,KAAiBzL,EAAM0L,cAAe,CACpD,IAAMjK,EAAQgC,OAAOC,aAAa6C,EAAEiF,SACpC,OAAIH,EA9EW,SAACrL,EAAmB2L,GAC3C,IAAIrL,EAAWC,IAAEC,UAAUR,GAG3B,OAFAM,EAASsL,kCAAkCD,GAEpC5L,EAAYO,GA2EAuL,CAAmB7L,EAAOyB,GAC1B8J,GACPhF,EAAEuF,iBA1ES,SAAC9L,EAAmB2L,GAC3C,IAAIrL,EAAWC,IAAEC,UAAUR,GAE3B,OADAM,EAASyL,kCAAkCJ,GACpC5L,EAAYO,GAwEA0L,CAAmBhM,EAAOyB,IA7HhC,SAACzB,EAAmBE,EAAuByL,GACxD,IAAIrL,EAAWC,IAAEC,UAAUR,GAQ3B,GANAM,EAAS2L,iBACT3L,EAAS4L,wBACLP,EACAzL,EAAQe,YACRf,EAAQY,eAAe+G,aAEvB3H,EAAQY,eAAeI,yBAA0B,CACjDZ,EAASM,kBAAoB,KAE7B,IAAMO,EAAiBb,EAASc,oBAChC,GAA4B,IAAxBD,EAAeE,KAAY,CAC3B,IAAMC,EAAgBH,EAAeI,SAASC,OAAOC,MACrDnB,EAASM,kBAAoBU,GAGrC,OAAOvB,EAAYO,GA6GA6L,CAASnM,EAAOE,EAASuB,GAGxC,OAAIzB,EAAMoM,sBA7GO,SAACpM,EAAmB2L,GACzC,IAAIrL,EAAWC,IAAEC,UAAUR,GAS3B,OAPAM,EAAS2L,iBACT,sBAAI3L,EAASwB,aAAb,YAA6BxB,EAAS0B,cACjCqK,QAAO,SAAApJ,GAAI,OAAIA,EAAKlB,YACpBuK,SAAQ,SAAArJ,GACc,OAAfA,EAAKxB,MAAgBwB,EAAKxB,MAAQkK,EAC7B1I,EAAKxB,MAAQ,KAAIwB,EAAKxB,MAAqB,GAAbwB,EAAKxB,MAAakK,MAE1D5L,EAAYO,GAoGJiM,CAAiBvM,GAAQyD,OAAOC,aAAa6C,EAAEiF,UAEnDnM,EAGX,OAAQkH,EAAEiF,SACN,KAAKC,IACD,OAxGO,SAACzL,GAChB,IAAIM,EAAWC,IAAEC,UAAUR,GAK3B,OAHAM,EAAS2L,iBACT3L,EAASkM,qBAEFzM,EAAYO,GAkGJmM,CAAWzM,GACtB,KAAKyL,IAED,OADAlF,EAAEuF,iBAvCS,SAAC9L,GACpB,IAAIM,EAAWC,IAAEC,UAAUR,GAQ3B,OANAM,EAAS2L,iBACT3L,EAASkM,qBAETlM,EAASoM,mCACTpM,EAASqM,mCAEF5M,EAAYO,GA+BJsM,CAAe5M,GAC1B,KAAKyL,IACD,OAAOxJ,EAAKjC,EAAOE,EAAS,EAAI,GACpC,KAAKuL,IACD,OAAOxJ,EAAKjC,EAAOE,GAAU,EAAG,GACpC,KAAKuL,IACD,OAAOxJ,EAAKjC,EAAOE,EAAS,GAAI,GACpC,KAAKuL,IACD,OAAOxJ,EAAKjC,EAAOE,EAAS,EAAG,GACnC,KAAKuL,IACD,OA5OK,SAACzL,GACd,IAAIM,EAAWC,IAAEC,UAAUR,GAI3B,OAHAM,EAASI,qBACTJ,EAASK,sBACTL,EAASM,kBAAoB,KACtBb,EAAYO,GAuOJuM,CAAS7M,GACpB,KAAKyL,IACL,KAAKA,IACD,OAAO3L,EAAKN,GAChB,KAAKiM,IACL,KAAKA,IACD,OAAOlM,EAAKC,GAGpB,OAAOH,GSnNPgL,UToCqB,SAACrK,EAAmBE,EAAuBC,EAAgBC,GAChF,OAAOH,EAAOD,EAAOE,EAASC,EAAQC,GAAgB,ISpCtDkK,UTuCqB,SAACtK,EAAmBE,EAAuBC,GAChE,OAAKH,EAAMS,gBAGJR,EAAOD,EAAOE,EAASC,GAAQ,GAF3Bd,GSxCX8K,QT6CmB,SAACnK,GACpB,OAAOD,EAAY+M,OAAOC,OAAO/M,EAAO,CAAES,iBAAiB,MS7C3DR,SACAyB,iBAGA8I,WHlFsB,SAACxK,EAAmBE,GAC1C,IAAII,EAAWC,IAAEC,UAAUR,GAE3B,OADAM,EAASyC,sBAAsB7C,EAAQe,aAChClB,EAAYO,IGgFnBiK,OH/DkB,SAACvK,EAAmBE,GACtC,IAAII,EAAWC,IAAEC,UAAUR,GAC3BM,EAASI,qBACTJ,EAASK,sBACTL,EAAS2L,iBACT,IAAIe,EAAiB1M,EAAS2M,kBAAkB/M,EAAQe,aACxDX,EAAS4M,UAAUF,GAInB,IAFA,IAAIG,EAAWH,EAAe3L,KAAO,EAE5BiB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,GAAKhC,EAASwB,YAAYQ,GAAG8K,UAGtB,CACH,IAAMC,EAAO/M,EAASwB,YAAYQ,GAAGb,MAC/B6L,EAAMhN,EAASiN,kBAAkBjL,GAC1B,OAAT+K,GAAyB,OAARC,GAAgBD,IAASC,IAC1CH,GAAW,EACX7M,EAASwB,YAAYQ,GAAGmD,OAAQ,QAPpC0H,GAAW,EACX7M,EAASwB,YAAYQ,GAAGmD,OAAQ,EAUpC,GAAKnF,EAAS0B,YAAYM,GAAG8K,UAGtB,CACH,IAAMC,EAAO/M,EAAS0B,YAAYM,GAAGb,MAC/B6L,EAAMhN,EAASkN,kBAAkBlL,GAC1B,OAAT+K,GAAyB,OAARC,GAAgBD,IAASC,IAC1CH,GAAW,EACX7M,EAAS0B,YAAYM,GAAGmD,OAAQ,QAPpC0H,GAAW,EACX7M,EAAS0B,YAAYM,GAAGmD,OAAQ,EAYxC,OADAgI,MAAMN,EAAW,iBAAmB,qBAC7BpN,EAAYO,IG2BnB8I,MHxBiB,SAACpJ,EAAmBE,GACjCA,EAAQe,YAAYW,UACpB6L,MAAM,iCAFkE,MAI7C3K,EAAW9C,EAAOE,GAJ2B,mBAIvEI,EAJuE,KAI7DsD,EAJ6D,KAU5E,OALIA,GAAgB,EAChB6J,MAAM,kBAAoB7J,EAAe,eAEzC6J,MAAM,SAAW7J,EAAe,cAEnB,OAAbtD,EACOP,EAAYO,GAEhBjB,IGgBIyI,CAAU0B,GCvGZkE,G,MAAmB,SAACC,EAAaC,GAC1C,OAAO,IAAIC,IAAI,YAAIF,GAAGtB,QAAO,SAAAzF,GAAC,OAAIgH,EAAEN,IAAI1G,SCC/BkH,EAAb,WAYI,WAAYrO,GAAa,yBAXzBgC,WAWwB,OAVxBkD,kBAUwB,OATxBvB,kBASwB,OARxBrB,cAQwB,OAPxBwD,gBAOwB,OANxBE,WAMwB,OALxBsI,SAKwB,OAJxBC,SAIwB,OAHxBvO,QAGwB,OAFxB+F,aAEwB,EACpBnB,KAAK5C,MAAQ,KACb4C,KAAKM,aAAe,IAAIkJ,IACxBxJ,KAAKjB,aAAe,IAAIyK,IACxBxJ,KAAKtC,UAAW,EAChBsC,KAAKkB,YAAa,EAClBlB,KAAKoB,OAAQ,EACbpB,KAAKmB,SAAU,EAEfnB,KAAK0J,OAAStO,EAAK,GACnB4E,KAAK2J,IAAMvO,EAAK,EAChB4E,KAAK5E,GAAKA,EAvBlB,0DA2BQ,OAAO4E,KAAK0J,IAAM,IAAM,IA3BhC,uCA8BQ,OAAO1J,KAAK0J,IAAM,IAAM,IA9BhC,qCAiCQ,OAAO1J,KAAK2J,IAAM,IAAM,IAjChC,sCAoCQ,OAAO3J,KAAK2J,IAAM,IAAM,IApChC,mCAwCQ,OAAoB,IAAb3J,KAAK0J,MAxCpB,sCA2CQ,OAAoB,IAAb1J,KAAK0J,MA3CpB,oCA8CQ,OAAoB,IAAb1J,KAAK2J,MA9CpB,qCAiDQ,OAAoB,IAAb3J,KAAK2J,QAjDpB,KCFaC,EAAb,WAMI,aAAe,yBALfxM,WAKc,OAJdM,cAIc,OAHd0D,WAGc,OAFdD,aAEc,EACVnB,KAAK5C,MAAQ,KACb4C,KAAKtC,UAAW,EAChBsC,KAAKoB,OAAQ,EACbpB,KAAKmB,SAAU,EAVvB,sDAcQ,OAAsB,OAAfnB,KAAK5C,OACU,IAAf4C,KAAK5C,OACJ,GAAK4C,KAAK5C,OAAS4C,KAAK5C,OAAS,OAhBjD,KCKMyM,E,WAUF,aAAe,yBATf3L,WASc,OARd3B,uBAQc,OAPdH,qBAOc,OAHdqB,iBAGc,OAFdE,iBAEc,EACVqC,KAAK9B,MAAQ,GACb,IAAK,IAAID,EAAI,EAAGA,EAAI,GAAIA,IACpB+B,KAAK9B,MAAM0C,KAAK,IAAI6I,EAAUxL,IAElC+B,KAAKzD,kBAAoB,KACzByD,KAAK5D,iBAAkB,EAEvB4D,KAAKvC,YAAc,GACnBuC,KAAKrC,YAAc,GACnB,IAAK,IAAIM,EAAI,EAAGA,EAAI,EAAGA,IACnB+B,KAAKvC,YAAYmD,KAAK,IAAIgJ,GAC1B5J,KAAKrC,YAAYiD,KAAK,IAAIgJ,G,wDAK9B,IAAIE,EAIC,GASL,OAPA9J,KAAK9B,MAAM+J,SAAQ,SAACrJ,GAChBkL,EAAOlJ,KAAK,CACRxD,MAAOwB,EAAKxB,MACZkD,aAAcF,MAAMC,KAAKzB,EAAK0B,cAC9BvB,aAAcqB,MAAMC,KAAKzB,EAAKG,mBAG/BuG,KAAKyB,UAAU+C,K,2BAGrBtO,GACDwE,KAAK4H,iBACL5H,KAAK1D,sBACL0D,KAAK3D,qBAGL,IADA,IAAI0N,EAAMzE,KAAKC,MAAM/J,GACZyC,EAAI,EAAGA,EAAI,GAAIA,IACpB+B,KAAK9B,MAAMD,GAAGb,MAAQ2M,EAAI9L,GAAGb,MAC7B4C,KAAK9B,MAAMD,GAAGqC,aAAe,IAAIkJ,IAAIO,EAAI9L,GAAGqC,cAC5CN,KAAK9B,MAAMD,GAAGc,aAAe,IAAIyK,IAAIO,EAAI9L,GAAGc,gB,+BAK3C2K,EAAaC,GAClB,OAAO,GAAKD,GAAOA,EAAM,GAAK,GAAKC,GAAOA,EAAM,I,+BAG3CD,EAAaC,GAClB,OAAa,EAAND,EAAUC,I,+BAGZ7N,GACL,MAAO,IAAIA,EAAS,GAAIA,EAAS,K,0CAGjB4N,EAAaC,GAG7B,OAAW,KAFED,EAAM,MACNC,EAAM,K,gCAIb7N,GAAyB,IAAD,EACXkE,KAAK7B,SAASrC,GADH,mBACvB4N,EADuB,KAClBC,EADkB,KAE9B,OAAO3J,KAAKgK,oBAAoBN,EAAKC,K,sCAOzB7N,EAAgBc,GAM5B,IANoE,IAAD,EAChDoD,KAAK7B,SAASrC,GADkC,mBAC5D4N,EAD4D,KACvDC,EADuD,KAG/DG,EAAsB,IAAIN,IAGrBS,EAAO,EAAGA,EAAO,EAAGA,IACzBH,EAAOI,IAAIlK,KAAK5B,SAASsL,EAAKO,IAGlC,IAAK,IAAIE,EAAO,EAAGA,EAAO,EAAGA,IACzBL,EAAOI,IAAIlK,KAAK5B,SAAS+L,EAAMR,IAInC,IADA,IAAMS,EAASpK,KAAKqK,UAAUvO,GACrBmC,EAAI,EAAGA,EAAI,GAAIA,IAChB+B,KAAKqK,UAAUpM,KAAOmM,GACtBN,EAAOI,IAAIjM,GAKnB,GAAIrB,EAAYuH,WACZ,IAAK,IAAImG,GAAM,EAAGA,GAAM,EAAGA,IACvB,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IACvB,GAAID,EAAGA,EAAKC,EAAGA,IAAO,EAAG,CACrB,IAAMJ,EAAOT,EAAMY,EACbL,EAAON,EAAMY,EACfvK,KAAKwK,SAASL,EAAMF,IACpBH,EAAOI,IAAIlK,KAAK5B,SAAS+L,EAAMF,IAQnD,GAAIrN,EAAYyH,SACZ,IAAK,IAAIiG,GAAM,EAAGA,GAAM,EAAGA,IACvB,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAC7B,IAAMJ,EAAOT,EAAMY,EACbL,EAAON,EAAMY,EACfvK,KAAKwK,SAASL,EAAMF,IACpBH,EAAOI,IAAIlK,KAAK5B,SAAS+L,EAAMF,IAQ/C,OADAH,EAAOW,OAAO3O,GACPgO,I,wCAGOlN,GAEd,IAFsD,IAAD,OACjDkN,EAAsB,IAAIN,IADuB,WAE5CvL,GACL,IAAMyM,EAAU,EAAKxM,MAAMD,GAAGb,MAC1BsN,GACA,EAAK9K,gBAAgB3B,EAAGrB,GAAaqL,SAAQ,SAAApI,GACrC6K,IAAY,EAAKxM,MAAM2B,GAAYzC,QACnC0M,EAAOI,IAAIjM,GACX6L,EAAOI,IAAIrK,QANlB5B,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAWT,OAAO6L,I,wCAGOhO,EAAgBc,GAA2C,IH3JlD0M,EAAaC,EG2JoC,OAClEoB,EAAavK,MAAMC,KAAKL,KAAKJ,gBAAgB9D,EAAQc,IACtD+B,KAAI,SAAAkB,GAAU,OAAI,EAAK3B,MAAM2B,GAAYzC,SACzC4K,QAAO,SAAAzF,GAAC,OAAIA,KAEjB,OHhKuB+G,EGgKD,IAAIE,IAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MHhKnCD,EGgK0C,IAAIC,IAAImB,GH/JnF,IAAInB,IAAI,YAAIF,GAAGtB,QAAO,SAAAzF,GAAC,OAAKgH,EAAEN,IAAI1G,S,4CGkKnB3F,GAAiC,IAAD,OAClDoD,KAAK9B,MAAM+J,SAAQ,SAAArJ,GACVA,EAAKxB,QACNwB,EAAKG,aAAe,EAAK6L,kBAAkBhM,EAAKxD,GAAIwB,S,oCAM5D,YAAkDoF,IAA3ChC,KAAK9B,MAAM2M,MAAK,SAAAjM,GAAI,OAAIA,EAAKlB,c,4CAIpC,YAAwDsE,IAAjDhC,KAAKvC,YAAYoN,MAAK,SAAAjM,GAAI,OAAIA,EAAKlB,kBACcsE,IAAjDhC,KAAKrC,YAAYkN,MAAK,SAAAjM,GAAI,OAAIA,EAAKlB,c,qCAG/BR,GACX,GAAIA,EAAO4N,QAAQ,KAAO,GAAK5N,EAAO4N,QAAQ,KAAO,EACjD,OAAO,KAEX,IAJoD,EAI9CC,EAAOC,KAAKC,IAAI/N,EAAO4N,QAAQ,KAAM5N,EAAO4N,QAAQ,MACpDI,EAAQF,KAAKG,IAAIjO,EAAO4N,QAAQ,KAAM5N,EAAO4N,QAAQ,MAEvDM,EAAM,EAP0C,cAQlClO,EAAOmO,MAAMN,EAAO,EAAGG,IARW,IAQpD,2BAAiD,CAAC,IAAzC9N,EAAwC,QAC7C,GAAc,OAAVA,EACA,OAAO,KAEXgO,IAAQhO,GAZwC,8BAcpD,OAAOgO,I,wCAGOhJ,GACd,IAAMsH,EAAM1J,KAAK9B,MAAMmN,MAAc,EAARjJ,EAAmB,EAARA,EAAY,GAAGzD,KAAI,SAAAC,GAAI,OAAIA,EAAKxB,SACxE,OAAO4C,KAAKsL,eAAe5B,K,wCAGb6B,GACd,IAAM5B,EAAM3J,KAAK9B,MAAM8J,QAAO,SAAApJ,GAAI,OAAIA,EAAKxD,GAAK,IAAMmQ,KAAO5M,KAAI,SAAAC,GAAI,OAAIA,EAAKxB,SAC9E,OAAO4C,KAAKsL,eAAe3B,K,kCAGnB7N,GACRkE,KAAK9B,MAAMpC,GAAQ4B,UAAW,I,0CAI9B,OAAO,IAAI8L,IACPxJ,KAAK9B,MACA8J,QAAO,SAACpJ,GAAD,OAAUA,EAAKlB,YACtBsK,QAAO,SAACpJ,GAAD,OAAUA,EAAKxB,SACtBuB,KAAI,SAACC,GAAD,OAAUA,EAAKxB,Y,oCAIlBR,GAGV,IAH2C,IAAD,OACtCsE,EAA8B,KAEzB9F,EAAK,EAAGA,EAAK,GAAIA,IAClB4E,KAAK9B,MAAM9C,GAAIsC,WAEXwD,EADe,OAAfA,EACalB,KAAKJ,gBAAgBxE,EAAIwB,GAEzByM,EAAiBrJ,KAAKJ,gBAAgBxE,EAAIwB,GAAcsE,IAK7EA,GACAA,EAAW+G,SAAQ,SAACnM,GAChB,EAAKoC,MAAMpC,GAAQoF,YAAa,O,gCAKlCsK,GAA6B,IAAD,OAClCA,EAAQvD,SAAQ,SAAC7M,GACb,EAAK8C,MAAM9C,GAAIgG,OAAQ,O,2CAIVtF,EAAgBwL,EAAqB1K,EAA0B6O,GAA6B,IAAD,OACxGzL,KAAK9B,MAAMpC,GAAQqF,UAGvBnB,KAAK9B,MAAMpC,GAAQsB,MAAQkK,EACvBmE,GACAzL,KAAKJ,gBAAgBI,KAAK9B,MAAMpC,GAAQV,GAAIwB,GAAaqL,SAAQ,SAAC7M,GAC9D,EAAK8C,MAAM9C,GAAIkF,aAAamK,OAAOnD,GACnC,EAAKpJ,MAAM9C,GAAI2D,aAAa0L,OAAOnD,S,8CAKvBA,EAAqB1K,GAA+D,IAAD,OAApC6O,EAAoC,wDACvGzL,KAAK9B,MAAM+J,SAAQ,SAACrJ,GACZA,EAAKlB,UACL,EAAKyB,qBAAqBP,EAAKxD,GAAIkM,EAAU1K,EAAa6O,Q,2CAMlEzL,KAAK9B,MACA8J,QAAO,SAAApJ,GAAI,OAAIA,EAAKlB,WAAakB,EAAKuC,WACtC8G,SAAQ,SAAArJ,GAAUA,EAAKxB,MAAQ,QAEpC,sBAAI4C,KAAKvC,aAAT,YAAyBuC,KAAKrC,cACzBqK,QAAO,SAAApJ,GAAI,OAAIA,EAAKlB,YACpBuK,SAAQ,SAAArJ,GAAUA,EAAKxB,MAAQ,U,wDAGNA,GAC9B4C,KAAK9B,MAAM+J,SAAQ,SAACrJ,GACZA,EAAKlB,WACDkB,EAAK0B,aAAa2I,IAAI7L,GACtBwB,EAAK0B,aAAamK,OAAOrN,GAEzBwB,EAAK0B,aAAa4J,IAAI9M,S,yDAOlC4C,KAAK9B,MAAM+J,SAAQ,SAACrJ,GACZA,EAAKlB,UACLkB,EAAK0B,aAAaoL,a,wDAKItO,GAC9B4C,KAAK9B,MAAM+J,SAAQ,SAACrJ,GACZA,EAAKlB,WACDkB,EAAKG,aAAakK,IAAI7L,GACtBwB,EAAKG,aAAa0L,OAAOrN,GAEzBwB,EAAKG,aAAamL,IAAI9M,S,yDAOlC4C,KAAK9B,MAAM+J,SAAQ,SAACrJ,GACZA,EAAKlB,UACLkB,EAAKG,aAAa2M,a,2CAM1B1L,KAAK9B,MAAM+J,SAAQ,SAACrJ,GAChBA,EAAKlB,UAAW,KAEpBsC,KAAKvC,YAAYwK,SAAQ,SAACrJ,GACtBA,EAAKlB,UAAW,KAEpBsC,KAAKrC,YAAYsK,SAAQ,SAACrJ,GACtBA,EAAKlB,UAAW,O,4CAKpBsC,KAAK9B,MAAM+J,SAAQ,SAACrJ,GAChBA,EAAKsC,YAAa,O,uCAKtBlB,KAAK9B,MAAM+J,SAAQ,SAAArJ,GAAUA,EAAKwC,OAAQ,KAC1CpB,KAAKvC,YAAYwK,SAAQ,SAAArJ,GAAUA,EAAKwC,OAAQ,KAChDpB,KAAKrC,YAAYsK,SAAQ,SAAArJ,GAAUA,EAAKwC,OAAQ,S,KC1U3CuK,EAIT,aAAe,yBAHflP,oBAGc,OAFdG,iBAEc,EACVoD,KAAKvD,eAAiB,CAClBC,qBAAqB,EACrBG,0BAA0B,EAC1B2G,aAAa,GAEjBxD,KAAKpD,YAAc,CACfuH,YAAY,EACZE,UAAU,EACV9G,UAAU,I,kBCvBTqO,GAIT,aAAe,yBAHfvQ,YAGc,OAFdD,QAEc,EACV4E,KAAK3E,OAAS,GACd2E,KAAK5E,GAAK,EAEV,IAAMO,EAAQ,IAAIkO,EAClB7J,KAAK3E,OAAOuF,KAAKjF,EAAMkQ,cCIhBC,eAAgB,CAC3BnQ,MCNwB,WAAoD,IAAnDA,EAAkD,uDAA1C,IAAIkO,EAAckC,EAAwB,uCAC3E,GnBD+B,wBmBC3BA,EAAO9Q,KACP,OAAO8Q,EAAOxQ,QAAQI,MAE1B,GnBsCuB,gBmBtCnBoQ,EAAO9Q,KAAsB,CAC7B,IAAMU,EAAQ,IAAIkO,EAElB,OADAlO,EAAMqQ,KAAKD,EAAOxQ,QAAQC,YACnBG,EAEX,GnBgCuB,gBmBhCnBoQ,EAAO9Q,KAAsB,CAC7B,IAAMU,EAAQ,IAAIkO,EAElB,OADAlO,EAAMqQ,KAAKD,EAAOxQ,QAAQC,YACnBG,EAEX,GnBZkC,2BmBY9BoQ,EAAO9Q,KAAiC,CAExC,IADA,IAAMU,EAAQ,IAAIkO,EACT5L,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAMb,EAAQ2O,EAAOxQ,QAAQ2B,OAAOe,GACtB,MAAVb,IACAzB,EAAMuC,MAAMD,GAAGb,MAAQ2O,EAAOxQ,QAAQ2B,OAAOe,GAC7CtC,EAAMuC,MAAMD,GAAGkD,SAAU,GAGjC,GAAuC,OAAnC4K,EAAOxQ,QAAQiL,gBACf,IAAK,IAAIvI,EAAI,EAAGA,EAAI,EAAGA,IACnBtC,EAAM8B,YAAYQ,GAAGb,MAAQ2O,EAAOxQ,QAAQiL,gBAAgBvI,GAC5DtC,EAAM8B,YAAYQ,GAAGkD,SAAU,EAGvC,GAAuC,OAAnC4K,EAAOxQ,QAAQkL,gBACf,IAAK,IAAIxI,EAAI,EAAGA,EAAI,EAAGA,IACnBtC,EAAMgC,YAAYM,GAAGb,MAAQ2O,EAAOxQ,QAAQkL,gBAAgBxI,GAC5DtC,EAAMgC,YAAYM,GAAGkD,SAAU,EAGvC,OAAOxF,EAGX,OAAOA,GD/BPE,QET0B,WAAsE,IAArEA,EAAoE,uDAA5C,IAAI8P,EAAgBI,EAAwB,uCAC/F,MpB4BiC,0BoB5B7BA,EAAO9Q,KACA,2BAAIY,GAAX,IAAoBY,eAAgBsP,EAAOxQ,UpB4BZ,4BoB1B/BwQ,EAAO9Q,KACA,2BAAIY,GAAX,IAAoBe,YAAamP,EAAOxQ,UpBDV,2BoBG9BwQ,EAAO9Q,KACA,2BAAIY,GAAX,IAAoBe,YAAamP,EAAOxQ,QAAQqB,cAE7Cf,GFAPV,QGd0B,WAAwD,IAAvDA,EAAsD,uDAA5C,IAAIyQ,GAAgBG,EAAwB,uCACjF,GrBK+B,wBqBL3BA,EAAO9Q,KAA8B,CACrC,IAAMO,EAAauQ,EAAOxQ,QAAQI,MAAMkQ,YAaxC,OATIrQ,IAAeL,EAAQE,OAAOF,EAAQC,MAGtCD,EAAQE,OAASF,EAAQE,OAAOgQ,MAAM,EAAGlQ,EAAQC,GAAK,GAGtDD,EAAQE,OAAOuF,KAAKpF,GACpBL,EAAQC,IAAM,GAEXD,EAEX,MrB+BuB,gBqB/BnB4Q,EAAO9Q,MACPgR,KAAO9Q,EAAQC,GAAK,GACb,2BAAID,GAAX,IAAoBC,GAAID,EAAQC,GAAK,KrB4BlB,gBqB1BnB2Q,EAAO9Q,MACPgR,KAAO9Q,EAAQC,GAAK,EAAID,EAAQE,OAAOC,QAChC,2BAAIH,GAAX,IAAoBC,GAAID,EAAQC,GAAK,KAElCD,GHVP+Q,YAZuB,WAA0B,IAAzBA,EAAwB,wDAChD,OAAOA,GAYP3P,kBAT6B,WAA+B,IAA9BA,EAA6B,uDAAT,KAClD,OAAOA,GASP2I,QInB0B,WAA0C,IAAzCA,EAAwC,uDAA9B,KAAM6G,EAAwB,uCACnE,MtBQ+B,wBsBR3BA,EAAO9Q,KACA8Q,EAAOxQ,QAAQgJ,IAEnBW,KCKLiH,GAAQC,YACVC,GACC7G,OAAe8G,8BAAiC9G,OAAe8G,gCAGpEC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,IACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOM,KAAK,aAAaC,UAAWvH,MAG5CwH,SAASC,eAAe,W","file":"static/js/main.91652743.chunk.js","sourcesContent":["import { BoardModel } from '../models/board';\nimport { DisplayOptions, GameOptions } from '../models/control';\n\nexport const ACTION_NO_OP = 'ACTION_NO_OP';\nexport interface NoOpAction {\n    type: typeof ACTION_NO_OP,\n};\nexport const NO_OP: NoOpAction = { type: ACTION_NO_OP };\n\n// Board actions.\nexport const ACTION_UPDATE_BOARD = 'ACTION_UPDATE_BOARD';\nexport const ACTION_GENERATE_URL = 'ACTION_GENERATE_URL';\nexport const ACTION_INIT_GAME_STATE = 'ACTION_INIT_GAME_STATE';\n\nexport interface UpdateBoardAction {\n    type: typeof ACTION_UPDATE_BOARD,\n    payload: {\n        board: BoardModel,\n    },\n};\nexport interface GenerateUrlAction {\n    type: typeof ACTION_GENERATE_URL,\n    payload: {\n        url: string,\n    },\n};\nexport interface InitGameStateAction {\n    type: typeof ACTION_INIT_GAME_STATE,\n    payload: {\n        values: string,\n        rowSandwichSums: Array<number|null>,\n        colSandwichSums: Array<number|null>,\n        gameOptions: GameOptions,\n    }\n};\n\n// Control actions.\nexport const ACTION_UPDATE_DISPLAY = 'ACTION_UPDATE_DISPLAY';\nexport const ACTION_UPDATE_GAME_PLAY = 'ACTION_UPDATE_GAME_PLAY';\n\ninterface UpdateDisplayAction {\n    type: typeof ACTION_UPDATE_DISPLAY,\n    payload: DisplayOptions,\n};\n\ninterface UpdateGameOptionsAction {\n    type: typeof ACTION_UPDATE_GAME_PLAY,\n    payload: GameOptions,\n}\n\n// History actions.\nexport const ACTION_REDO = 'ACTION_REDO';\nexport const ACTION_UNDO = 'ACTION_UNDO';\n\nexport interface RedoAction {\n    type: typeof ACTION_REDO,\n    payload: {\n        serialized: string,\n    },\n};\nexport interface UndoAction {\n    type: typeof ACTION_UNDO,\n    payload: {\n        serialized: string,\n    },\n};\n\n// Combine all action types.\nexport type ActionTypes = NoOpAction\n    | UpdateBoardAction | GenerateUrlAction | InitGameStateAction\n    | UpdateDisplayAction | UpdateGameOptionsAction\n    | RedoAction | UndoAction;\n","import { ACTION_REDO, ACTION_UNDO, NO_OP, ActionTypes } from './types';\nimport { HistoryModel } from '../models/history';\n\n\nexport const redo = (history: HistoryModel): ActionTypes => {\n    if (history.id >= history.boards.length - 1) {\n        // Nothing to redo.\n        return NO_OP;\n    }\n    return {\n        type: ACTION_REDO,\n        payload: {\n            serialized: history.boards[history.id + 1],\n        },\n    };\n};\n\nexport const undo = (history: HistoryModel): ActionTypes => {\n    if (history.id === 0) {\n        // Nothing to do.\n        return NO_OP;\n    }\n    return {\n        type: ACTION_UNDO,\n        payload: {\n            serialized: history.boards[history.id - 1],\n        },\n    };\n};\n","import * as KeyCode from 'keycode-js';\nimport _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\nimport { ControlModel } from '../models/control';\nimport { HistoryModel } from '../models/history';\nimport { redo, undo } from './history';\nimport {\n    ACTION_GENERATE_URL,\n    ACTION_INIT_GAME_STATE,\n    ACTION_UPDATE_BOARD,\n    ActionTypes,\n    NO_OP\n    } from './types';\n\n\nexport const initGameState = (decodedState: any): ActionTypes => {\n    return {\n        type: ACTION_INIT_GAME_STATE,\n        payload: {\n            values: decodedState.values,\n            rowSandwichSums: decodedState.rowSandwichSums,\n            colSandwichSums: decodedState.colSandwichSums,\n            gameOptions: decodedState.gameOptions,\n        },\n    }\n};\n\nexport const generateUrl = (board: BoardModel, control: ControlModel): ActionTypes => {\n    const gameState = {\n        values: board.cells.map(cell => {\n            if (cell.value) return cell.value;\n            else return '0';\n        }).join(''),\n        rowSandwichSums: (control.gameOptions.sandwich) ? board.rowSandwich.map(cell => cell.value) : null,\n        colSandwichSums: (control.gameOptions.sandwich) ? board.colSandwich.map(cell => cell.value) : null,\n        gameOptions: control.gameOptions,\n    };\n    return {\n        type: ACTION_GENERATE_URL,\n        payload: {\n            url: window.location.origin + window.location.pathname + '#/' + window.btoa(JSON.stringify(gameState)),\n        },\n    };\n};\n\nexport const updateBoard = (board: BoardModel): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_BOARD,\n        payload: {\n            board: board,\n        }\n    };\n};\n\nconst pressEsc = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllSelections();\n    newBoard.clearAllRestricteds();\n    newBoard.highlightMatching = null;\n    return updateBoard(newBoard);\n}\n\nexport const select = (\n        board: BoardModel,\n        control: ControlModel,\n        cellId: number,\n        clearSelection: boolean = true,\n        setMultiSelect: boolean | null = null\n        ): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    if (setMultiSelect !== null) {\n        newBoard.multiSelectMode = setMultiSelect;\n    }\n\n    if (clearSelection) {\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n        newBoard.highlightMatching = null;\n    } else {\n        newBoard.clearAllRestricteds();\n    }\n\n    newBoard.setSelected(cellId);\n\n    if (control.displayOptions.highlightRestricted) {\n        newBoard.setRestricted(control.gameOptions);\n    }\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n\n    return updateBoard(newBoard);\n}\n\nexport const selectSandwich = (\n        board: BoardModel,\n        control: ControlModel,\n        isRow: boolean,\n        id: number): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    if (!control.gameOptions.sandwich) {\n        throw new Error('Attempt to select sandwich in normal mode');\n    }\n\n    newBoard.clearAllSelections();\n    newBoard.clearAllRestricteds();\n    newBoard.highlightMatching = null;\n\n    if (isRow) {\n        newBoard.rowSandwich[id].selected = true;\n    } else {\n        newBoard.colSandwich[id].selected = true;\n    }\n\n    return updateBoard(newBoard);\n}\n\nexport const mouseDown = (board: BoardModel, control: ControlModel, cellId: number, clearSelection: boolean): ActionTypes => {\n    return select(board, control, cellId, clearSelection, true);\n}\n\nexport const mouseOver = (board: BoardModel, control: ControlModel, cellId: number): ActionTypes => {\n    if (!board.multiSelectMode) {\n        return NO_OP;\n    }\n    return select(board, control, cellId, false);\n}\n\nexport const mouseUp = (board: BoardModel): ActionTypes => {\n    return updateBoard(Object.assign(board, { multiSelectMode: false}));\n}\n\nconst setValue = (board: BoardModel, control: ControlModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.setValueOfSelectedCells(\n        newValue,\n        control.gameOptions,\n        control.displayOptions.autoCleanUp);\n\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n    return updateBoard(newBoard);\n};\n\nconst setSandwichValue = (board: BoardModel, newValue: number): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    [...newBoard.rowSandwich, ...newBoard.colSandwich]\n        .filter(cell => cell.selected)\n        .forEach(cell => {\n            if (cell.value === null) cell.value = newValue;\n            else if (cell.value < 10) cell.value = cell.value * 10 + newValue;\n        });\n    return updateBoard(newBoard);\n};\n\nconst unsetValue = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.unsetSelectedCells();\n\n    return updateBoard(newBoard);\n};\n\nconst toggleCornerValues = (board: BoardModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n    return updateBoard(newBoard);\n}\n\nconst toggleCenterValues = (board: BoardModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.toggleCenterValuesOfSelectedCells(newValue);\n    return updateBoard(newBoard);\n}\n\n// Move selected cell in direction (d_row, d_col).\n// If there are more than one selected cells, only move the first one.\nconst move = (board: BoardModel, control: ControlModel, d_row: number, d_col: number): ActionTypes => {\n    let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n    for (let i = 0; i < 81; i++) {\n        if (board.cells[i].selected) {\n            [r, c] = board.toRowCol(i);\n            break;\n        }\n    }\n    for (let i = 0; i < 9; i++) {\n        if (board.colSandwich[i].selected) {\n            r = -1;\n            c = i;\n            break;\n        }\n        if (board.rowSandwich[i].selected) {\n            r = i;\n            c = -1;\n        }\n    }\n\n    if (control.gameOptions.sandwich) {\n        r = (r + d_row + 10) % 10;\n        c = (c + d_col + 10) % 10;\n\n        if (r === 9 && c === 9) {\n            // This is the empty cell outside board.\n            return selectSandwich(board, control, false, 0);\n        } else if (r === 9) {\n            // Column sandwich\n            return selectSandwich(board, control, false, c);\n        } else if (c === 9) {\n            // Row sandwich\n            return selectSandwich(board, control, true, r);\n        } else {\n            return select(board, control, board.toCellId(r, c));\n        }\n    } else {\n        r = (r + d_row + 9) % 9;\n        c = (c + d_col + 9) % 9;\n        return select(board, control, board.toCellId(r, c));\n    }\n}\n\nconst pressBackspace = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.unsetSelectedCells();\n\n    newBoard.clearCornerValuesOfSelectedCells();\n    newBoard.clearCenterValuesOfSelectedCells();\n\n    return updateBoard(newBoard);\n}\n\nexport const keyDown = (board: BoardModel, control: ControlModel, history: HistoryModel, e: any): ActionTypes => {\n    let isShift = !!e.shiftKey;\n    let isMeta = !!e.metaKey;\n\n    // Pressed 0-9\n    if (e.keyCode >= KeyCode.KEY_0 && e.keyCode <= KeyCode.KEY_9) {\n        if (e.keyCode !== KeyCode.KEY_0 && board.hasSelected()) {\n            const value = String.fromCharCode(e.keyCode) as CellValue;\n            if (isShift) {\n                return toggleCornerValues(board, value)\n            } else if (isMeta) {\n                e.preventDefault();\n                return toggleCenterValues(board, value);\n            } else {\n                return setValue(board, control, value);\n            }\n        }\n        if (board.hasSandwichSelected()) {\n            return setSandwichValue(board, +String.fromCharCode(e.keyCode));\n        }\n        return NO_OP;\n    }\n\n    switch (e.keyCode) {\n        case KeyCode.KEY_SPACE:\n            return unsetValue(board);\n        case KeyCode.KEY_BACK_SPACE:\n            e.preventDefault();\n            return pressBackspace(board);\n        case KeyCode.KEY_DOWN:\n            return move(board, control, +1, 0);\n        case KeyCode.KEY_UP:\n            return move(board, control, -1, 0);\n        case KeyCode.KEY_LEFT:\n            return move(board, control, 0, -1);\n        case KeyCode.KEY_RIGHT:\n            return move(board, control, 0, +1);\n        case KeyCode.KEY_ESCAPE:\n            return pressEsc(board);\n        case KeyCode.KEY_Z:\n        case KeyCode.KEY_U:\n            return undo(history);\n        case KeyCode.KEY_Y:\n        case KeyCode.KEY_R:\n            return redo(history);\n        default:\n    }\n    return NO_OP;\n}\n","import _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\nimport { ControlModel } from '../models/control';\n\nconst bitCount = (n: number): number => {\n    n = n - ((n >> 1) & 0x55555555)\n    n = (n & 0x33333333) + ((n >> 2) & 0x33333333)\n    return ((n + (n >> 4) & 0xF0F0F0F) * 0x1010101) >> 24\n}\n\nconst bitContains = (n: number, bit: number): boolean => {\n    return ((n >> bit) & 1) > 0;\n}\n\nconst bitRemoveIfExists = (n: number, bit: number): number => {\n    if (!bitContains(n, bit)) {\n        return n;\n    }\n    return n - (1<<bit);\n}\n\nconst attempt = (board: BoardModel, control: ControlModel, values: Array<number>, candidates: Array<number>): [BoardModel | null, number] => {\n    // Find cell with minimum number of candidates.\n    let bestId = -1;\n    for (let i = 0; i < 81; i++) {\n        if (values[i] === 0) {\n            if (bestId < 0 || bitCount(values[i]) < bitCount(values[bestId])) {\n                bestId = i;\n            }\n        }\n    }\n    if (bestId < 0) {\n        // No more unfilled cell --> we have found a solution.\n        let solution = _.cloneDeep(board);\n        for (let i = 0; i < 81; i++) {\n            solution.setValueOfSingleCell(i, String.fromCharCode(48 + values[i]) as CellValue, control.gameOptions, false);\n        }\n        return [solution, 1];\n    }\n\n    if (bitCount(candidates[bestId]) === 0) {\n        return [null, 0];\n    }\n\n    let firstSolution = null;\n    let cntSolutions = 0;\n    for (let value = 1; value <= 9; value++) {\n        if (bitContains(candidates[bestId], value)) {\n            const saveValues = _.clone(values);\n            const saveCandidates = _.clone(candidates);\n\n            values[bestId] = value;\n            const neighborIds = board.getVisibleCells(bestId, control.gameOptions);\n            for (let neighborId of neighborIds) {\n                candidates[neighborId] = bitRemoveIfExists(candidates[neighborId], value);\n            };\n\n            let [solution, cnt] = attempt(board, control, values, candidates);\n            if (cnt > 0) {\n                if (firstSolution === null) {\n                    firstSolution = solution;\n                }\n                cntSolutions += cnt;\n                if (cntSolutions >= 2) {\n                    break;\n                }\n            }\n\n            values = saveValues;\n            candidates = saveCandidates;\n        }\n    }\n    return [firstSolution, cntSolutions];\n};\n\nexport const solveBoard = (board: BoardModel, control: ControlModel): [BoardModel | null, number] => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.fillAllPossibleValues(control.gameOptions);\n\n    let values = newBoard.cells.map(cell => {\n        if (!cell.value) return 0;\n        else return +cell.value;\n    });\n    let candidates = newBoard.cells.map(cell => {\n        let mask = 0;\n        for (let value of cell.centerValues) {\n            if (value !== null) {\n                mask += 1 << (+value);\n            }\n        }\n        return mask;\n    });\n    return attempt(newBoard, control, values, candidates);\n};\n","import React from 'react';\nimport { CellModel, CellValue } from '../../models/cell';\n\n\ntype CellProps = {\n    cell: CellModel,\n    onClick: (e: any) => void,\n    onMouseDown: (e: any) => void,\n    onMouseOver: (e: any) => void,\n    key: string,\n    highlightMatching: CellValue,\n};\n\nclass Cell extends React.Component<CellProps> {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    shouldHighlightMatching(value: CellValue) {\n        return this.props.highlightMatching && value === this.props.highlightMatching;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"corner-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"center-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        } else if (this.shouldHighlightMatching(this.props.cell.value)) {\n            classes.push('matching');\n        } else if (this.props.cell.restricted) {\n            classes.push('restricted');\n        } else if (this.props.cell.isFixed) {\n            classes.push('fixed');\n        } else if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                onMouseDown={this.props.onMouseDown}\n                onMouseOver={this.props.onMouseOver}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nexport default Cell;\n","import React from 'react';\nimport { SandwichCellModel } from '../../models/sandwichCell';\n\n\ntype SandwichCellProps = {\n    value: SandwichCellModel,\n    onClick: (e: any) => void,\n};\n\nclass SandwichCell extends React.Component<SandwichCellProps> {\n    render() {\n        let defaultValue = (this.props.value.value === null) ? undefined : this.props.value.value;\n\n        let classes = ['sandwich-cell'];\n        if (this.props.value.selected) {\n            classes.push('selected');\n        } else if (this.props.value.isFixed) {\n            classes.push('fixed');\n        }\n        if (this.props.value.error) {\n            classes.push('error');\n        }\n        return (\n            <div\n                onClick={this.props.onClick}\n                className={classes.join(' ')}>\n                <div className=\"cell-main-value\">\n                    {defaultValue}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SandwichCell;","import React from 'react';\nimport { BoardModel } from '../../models/board';\nimport { GameOptions } from '../../models/control';\nimport Cell from './Cell';\nimport SandwichCell from './SandwichCell';\n\n\nclass Board extends React.Component<BoardProps> {\n    renderCell(i: number) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                onMouseDown={(e) => this.props.onMouseDown(e, i)}\n                onMouseOver={() => this.props.onMouseOver(i)}\n                key={String(i)}\n                highlightMatching={this.props.board.highlightMatching}\n            />\n        );\n    }\n\n    renderSandwichCell(isRow: boolean, id: number, key: string) {\n        const value = (isRow) ? this.props.board.rowSandwich[id] : this.props.board.colSandwich[id];\n        return (\n            <SandwichCell\n                value={value}\n                key={key}\n                onClick={(e) => this.props.onSelectSandwich(e, isRow, id)}\n            />\n        );\n    }\n    \n    renderEmptySandwichCell() {\n        return (\n            <div className=\"sandwich-cell\"></div>\n        );\n    }\n\n    renderRow(rowId: number) {\n        const startingCell = rowId * 9;\n        const cells = [...Array(9).keys()].map(x => this.renderCell(startingCell + x));\n\n        let sandwichCell = null;\n        if (this.props.gameOptions.sandwich) {\n            sandwichCell = this.renderSandwichCell(\n                true, rowId, `sandwich-row-${rowId}`);\n        }\n\n        return (\n            <div className=\"row\" key={startingCell}>\n                {sandwichCell}\n                {cells}\n            </div>\n        );\n    }\n\n    renderSandwichRow() {\n        const sandwichCells = [...Array(9).keys()].map(\n            x => this.renderSandwichCell(false, x, `sandwich-col-${x}`));\n\n        return (\n            <div className=\"row\">\n                {this.renderEmptySandwichCell()}\n                {sandwichCells}\n            </div>\n        );\n    }\n\n    render() {\n        let sandwichRow = null;\n        if (this.props.gameOptions.sandwich) {\n            sandwichRow = this.renderSandwichRow();\n        }\n\n        const rows = [...Array(9).keys()].map(x => this.renderRow(x));\n        return (\n            <div>\n                {sandwichRow}\n                {rows}\n            </div>\n        );\n    }\n}\n\ntype BoardProps = {\n    board: BoardModel,\n    gameOptions: GameOptions,\n    onClick: (e: any, i: number) => void,\n    onSelectSandwich: (e: any, isRow: boolean, i: number) => void,\n    onMouseDown: (e: any, i: number) => void,\n    onMouseOver: (i: number) => void,\n};\n\n\nexport default Board;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { updateDisplay } from '../../actions/control';\nimport { GameState } from '../Game';\n\nclass DisplayOptions extends React.Component<DisplayOptionsProps> {\n    render() {\n        return (\n            <div id=\"display-options\">\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.highlightRestricted}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightRestricted: !this.props.highlightRestricted\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-matching-numbers'\n                    label='Highlight matching numbers'\n                    checked={this.props.highlightMatchingNumbers}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightMatchingNumbers: !this.props.highlightMatchingNumbers\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-auto-cleanup'\n                    label='Auto Cleanup corner &amp; center values'\n                    checked={this.props.autoCleanUp}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        autoCleanUp: !this.props.autoCleanUp\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.displayOptions};\n};\n\nconst connector = connect(mapStateToProps, { updateDisplay });\n\ntype DisplayOptionsProps = ConnectedProps<typeof connector>;\n\nexport default connector(DisplayOptions);\n","import _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { ControlModel, DisplayOptions, GameOptions } from '../models/control';\nimport { solveBoard } from '../utils/solver';\nimport { updateBoard } from './board';\nimport {\n    ACTION_UPDATE_DISPLAY,\n    ACTION_UPDATE_GAME_PLAY as ACTION_UPDATE_GAME_OPTIONS,\n    ActionTypes,\n    NO_OP\n    } from './types';\n\n\n\nexport const fillCenter = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.fillAllPossibleValues(control.gameOptions);\n    return updateBoard(newBoard);\n}\n\nexport const updateDisplay = (displayOptions: DisplayOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_DISPLAY,\n        payload: displayOptions,\n    };\n};\n\nexport const updateGameOptions = (gameOptions: GameOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_GAME_OPTIONS,\n        payload: gameOptions,\n    }\n};\n\nexport const verify = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllSelections();\n    newBoard.clearAllRestricteds();\n    newBoard.clearAllErrors();\n    let invalidCellIds = newBoard.getInvalidCellIds(control.gameOptions);\n    newBoard.setErrors(invalidCellIds);\n\n    let hasError = invalidCellIds.size > 0;\n\n    for (let i = 0; i < 9; i++) {\n        if (!newBoard.rowSandwich[i].isValid()) {\n            hasError = true;\n            newBoard.rowSandwich[i].error = true;\n        } else {\n            const want = newBoard.rowSandwich[i].value;\n            const has = newBoard.getRowSandwichSum(i);\n            if (want !== null && has !== null && want !== has) {\n                hasError = true;\n                newBoard.rowSandwich[i].error = true;\n            }\n        }\n\n        if (!newBoard.colSandwich[i].isValid()) {\n            hasError = true;\n            newBoard.colSandwich[i].error = true;\n        } else {\n            const want = newBoard.colSandwich[i].value;\n            const has = newBoard.getColSandwichSum(i);\n            if (want !== null && has !== null && want !== has) {\n                hasError = true;\n                newBoard.colSandwich[i].error = true;\n            }\n        }\n    }\n\n    alert(hasError ? 'Error found :(' : 'Looks good to me!');\n    return updateBoard(newBoard);\n}\n\nexport const solve = (board: BoardModel, control: ControlModel): ActionTypes => {\n    if (control.gameOptions.sandwich) {\n        alert('Cannot solve Sandwich Sudoku.');\n    }\n    let [newBoard, cntSolutions] = solveBoard(board, control);\n    if (cntSolutions >= 2) {\n        alert('Found at least ' + cntSolutions + ' solutions.');\n    } else {\n        alert('Found ' + cntSolutions + ' solution.');\n    }\n    if (newBoard !== null) {\n        return updateBoard(newBoard);\n    }\n    return NO_OP;\n}\n","import React from 'react';\nimport { QuestionSquare } from 'react-bootstrap-icons';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { updateGameOptions } from '../../actions/control';\nimport { GameState } from '../Game';\n\n\nclass GameOptions extends React.Component<GameOptionsProps> {\n    renderLabel(label: any, id: string, message: string) {\n        return (\n            <OverlayTrigger\n                placement=\"right\"\n                overlay={<Tooltip id={id}>{message}</Tooltip>}\n            >\n                <span>\n                    {label}&nbsp;\n                    <QuestionSquare />\n                </span>\n            </OverlayTrigger>\n        );\n    }\n\n    render() {\n        return (\n            <div id=\"game-play\">\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label={this.renderLabel('Anti Knight', 'tooltip-anti-knight', \"Two cells which are knight's move away from each other cannot contain the same digit.\")}\n                    checked={this.props.antiKnight}\n                    onChange={() => this.props.updateGameOptions({\n                        ...this.props,\n                        antiKnight: !this.props.antiKnight\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label={this.renderLabel('Anti King', 'tooltip-anti-king', \"Two cells which are king's move away from each other cannot contain the same digit.\")}\n                    checked={this.props.antiKing}\n                    onChange={() => this.props.updateGameOptions({\n                        ...this.props,\n                        antiKing: !this.props.antiKing\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-sandwich'\n                    label={this.renderLabel('Sandwich', 'tooltip-sandwich', 'The numbers in each row / column specify the sum between the number 1 and 9 in that row / column.')}\n                    checked={this.props.sandwich}\n                    onChange={() => this.props.updateGameOptions({\n                        ...this.props,\n                        sandwich: !this.props.sandwich\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.gameOptions};\n};\n\nconst connector = connect(mapStateToProps, { updateGameOptions });\n\ntype GameOptionsProps = ConnectedProps<typeof connector>;\n\nexport default connector(GameOptions);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { GameState } from '../Game';\nimport DisplayOptions from './DisplayOptions';\nimport GameOptions from './GameOptions';\n\n\nclass Control extends React.Component<ControlProps> {\n    renderUrl() {\n        if (!this.props.url) {\n            return;\n        }\n        return <a href={this.props.url}>Link</a>;\n    }\n\n    renderTooltip(id: string, message: string) {\n        return (\n            <Tooltip id={id}>\n                {message}\n            </Tooltip>\n        );\n    }\n\n    render() {\n        return (\n            <Form>\n                <div className=\"\">\n                    <Button onClick={this.props.onClickVerify}>\n                        Verify\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickUndo}\n                        className=\"btn-secondary\"\n                    >\n                        Undo\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickRedo}\n                        className=\"btn-secondary\"\n                    >\n                        Redo\n                    </Button>\n                </div>\n                <hr/>\n                <DisplayOptions />\n                <hr/>\n                <GameOptions />\n                <hr/>\n                <h4>Help</h4>\n                <OverlayTrigger\n                    placement=\"top\"\n                    overlay={this.renderTooltip('tooltip-fill-center', 'Show all possible values for each cell.')}\n                >\n                    <Button\n                        onClick={this.props.onClickFillCenters}\n                        className=\"btn-secondary\"\n                    >\n                        Fill all center values\n                    </Button>\n                </OverlayTrigger>\n                &nbsp;\n                <Button\n                    onClick={this.props.solve}\n                    className=\"btn-secondary\"\n                >\n                    Solve\n                </Button>\n                <hr/>\n                <Button\n                    onClick={this.props.generateUrl}\n                    className=\"btn-secondary\"\n                >\n                    Get URL\n                </Button>\n                &nbsp;\n                {this.renderUrl()}\n            </Form>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return { url: state.gameUrl };\n};\nconst connector = connect(mapStateToProps);\ntype ControlProps = ConnectedProps<typeof connector> & {\n    onClickVerify: () => void,\n    onClickUndo: () => void,\n    onClickRedo: () => void,\n    solve: () => void,\n    generateUrl: () => void,\n\n    onClickFillCenters: () => void,\n};\n\nexport default connector(Control);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport {\n    generateUrl,\n    initGameState,\n    keyDown,\n    mouseDown,\n    mouseOver,\n    mouseUp,\n    select,\n    selectSandwich\n    } from '../actions/board';\nimport { fillCenter, solve, verify } from '../actions/control';\nimport { redo, undo } from '../actions/history';\nimport { BoardModel } from '../models/board';\nimport { ControlModel } from '../models/control';\nimport { HistoryModel } from '../models/history';\nimport Board from './board/Board';\nimport Control from './control/Control';\n\n\nexport type GameState = {\n    board: BoardModel,\n    control: ControlModel,\n    history: HistoryModel,\n    gameUrl: string,\n};\n\nclass Game extends React.Component<GameProps, GameState> {\n    componentDidMount() {\n        if (this.props.encoded) {\n            this.props.initGameState(JSON.parse(window.atob(this.props.encoded)));\n        }\n    }\n\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.props.keyDown(this.props.board, this.props.control, this.props.history, e)}\n                tabIndex={0}\n                className=\"container\"\n                onMouseUp={() => this.props.mouseUp(this.props.board)}\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.props.board}\n                            gameOptions={this.props.control.gameOptions}\n                            onClick={(e, id) => this.props.select(this.props.board, this.props.control, id, !e.metaKey)}\n                            onSelectSandwich={(e, isRow, id) => this.props.selectSandwich(this.props.board, this.props.control, isRow, id)}\n                            onMouseDown={(e, id) => this.props.mouseDown(this.props.board, this.props.control, id, !e.metaKey)}\n                            onMouseOver={(id) => this.props.mouseOver(this.props.board, this.props.control, id)}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            onClickVerify={() => this.props.verify(this.props.board, this.props.control)}\n                            onClickUndo={() => this.props.undo(this.props.history)}\n                            onClickRedo={() => this.props.redo(this.props.history)}\n                            onClickFillCenters={() => this.props.fillCenter(this.props.board, this.props.control)}\n                            solve={() => this.props.solve(this.props.board, this.props.control)}\n                            generateUrl={() => this.props.generateUrl(this.props.board, this.props.control)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\ntype OwnProps = RouteComponentProps<{encoded: string}>;\nconst mapStateToProps = (state: GameState, ownProps: OwnProps) => {\n    return {\n        ...state,\n        encoded: ownProps.match.params.encoded,\n    };\n};\n\nconst connector = connect(mapStateToProps, {\n    // history actions.\n    redo,\n    undo,\n\n    // board actions.\n    initGameState,\n    generateUrl,\n    keyDown,\n    mouseDown,\n    mouseOver,\n    mouseUp,\n    select,\n    selectSandwich,\n\n    // control actions.\n    fillCenter,\n    verify,\n    solve,\n});\n\ntype GameProps = ConnectedProps<typeof connector>;\n\nexport default connector(Game);\n","export const set_intersection = (a: Set<any>, b: Set<any>): Set<any> => {\n    return new Set([...a].filter(x => b.has(x)));\n}\n\nexport const set_difference = (a: Set<any>, b: Set<any>): Set<any> => {\n    return new Set([...a].filter(x => !b.has(x)));\n}\n","export type CellValue = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | null;\n\nexport class CellModel {\n    value: CellValue;\n    cornerValues: Set<CellValue>;\n    centerValues: Set<CellValue>;\n    selected: boolean;\n    restricted: boolean;\n    error: boolean;\n    row: number;\n    col: number;\n    id: number;\n    isFixed: boolean | null;\n\n    constructor(id: number) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n        this.isFixed = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop(): boolean {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom(): boolean {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft(): boolean {\n        return this.col % 3 === 0;\n    }\n    isRegionRight(): boolean {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop(): boolean {\n        return this.row === 0;\n    }\n    isBoardBottom(): boolean {\n        return this.row === 8;\n    }\n    isBoardLeft(): boolean {\n        return this.col === 0;\n    }\n    isBoardRight(): boolean {\n        return this.col === 8;\n    }\n}\n","export class SandwichCellModel {\n    value: number | null;\n    selected: boolean;\n    error: boolean;\n    isFixed: boolean;\n\n    constructor() {\n        this.value = null;\n        this.selected = false;\n        this.error = false;\n        this.isFixed = false;\n    }\n\n    isValid(): boolean {\n        return this.value === null\n            || this.value === 0\n            || (2 <= this.value && this.value <= 35);\n    }\n};","import { set_difference, set_intersection } from '../utils/set';\nimport { CellModel, CellValue } from './cell';\nimport { GameOptions } from './control';\nimport { SandwichCellModel } from './sandwichCell';\n\nclass BoardModel {\n    cells: Array<CellModel>;\n    highlightMatching: CellValue;\n    multiSelectMode: boolean;\n\n    // For sandwich sudoku\n    // For each row and column, we may be given the sum of cells between the cells containing 1 and 9.\n    rowSandwich: Array<SandwichCellModel>;\n    colSandwich: Array<SandwichCellModel>;\n\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n        this.highlightMatching = null;\n        this.multiSelectMode = false;\n\n        this.rowSandwich = [];\n        this.colSandwich = [];\n        for (let i = 0; i < 9; i++) {\n            this.rowSandwich.push(new SandwichCellModel());\n            this.colSandwich.push(new SandwichCellModel());\n        }\n    }\n\n    serialize(): string {\n        let result: Array<{\n            value: CellValue;\n            cornerValues: Array<CellValue>;\n            centerValues: Array<CellValue>;\n        }> = [];\n\n        this.cells.forEach((cell) => {\n            result.push({\n                value: cell.value,\n                cornerValues: Array.from(cell.cornerValues),\n                centerValues: Array.from(cell.centerValues),\n            });\n        });\n        return JSON.stringify(result);\n    }\n\n    load(serialized: string): void {\n        this.clearAllErrors();\n        this.clearAllRestricteds();\n        this.clearAllSelections();\n\n        let obj = JSON.parse(serialized);\n        for (let i = 0; i < 81; i++) {\n            this.cells[i].value = obj[i].value;\n            this.cells[i].cornerValues = new Set(obj[i].cornerValues);\n            this.cells[i].centerValues = new Set(obj[i].centerValues);\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row: number, col: number): boolean {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row: number, col: number): number {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId: number): [number, number] {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row: number, col: number): number {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId: number): number {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId: number, gameOptions: GameOptions): Set<number> {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result: Set<number> = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gameOptions.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gameOptions.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gameOptions: GameOptions): Set<number> {\n        let result: Set<number> = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gameOptions).forEach(neighborId => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    getPossibleValues(cellId: number, gameOptions: GameOptions): Set<CellValue> {\n        const seenValues = Array.from(this.getVisibleCells(cellId, gameOptions))\n            .map(neighborId => this.cells[neighborId].value)\n            .filter(x => x);\n\n        return set_difference(new Set(['1', '2', '3', '4', '5', '6', '7', '8', '9']), new Set(seenValues));\n    }\n\n    fillAllPossibleValues(gameOptions: GameOptions): void {\n        this.cells.forEach(cell => {\n            if (!cell.value) {\n                cell.centerValues = this.getPossibleValues(cell.id, gameOptions);\n            }\n        });\n    }\n\n    hasSelected(): boolean {\n        return this.cells.find(cell => cell.selected) !== undefined;\n    }\n\n    hasSandwichSelected(): boolean {\n        return this.rowSandwich.find(cell => cell.selected) !== undefined\n            || this.colSandwich.find(cell => cell.selected) !== undefined;\n    }\n\n    getSandwichSum(values: Array<CellValue>): number | null {\n        if (values.indexOf('1') < 0 || values.indexOf('9') < 0) {\n            return null;\n        }\n        const left = Math.min(values.indexOf('1'), values.indexOf('9'));\n        const right = Math.max(values.indexOf('1'), values.indexOf('9'));\n\n        let sum = 0;\n        for (let value of values.slice(left + 1, right)) {\n            if (value === null) {\n                return null;\n            }\n            sum += +value;\n        }\n        return sum;\n    }\n\n    getRowSandwichSum(rowId: number): number | null {\n        const row = this.cells.slice(rowId * 9, rowId * 9 + 9).map(cell => cell.value);\n        return this.getSandwichSum(row);\n    }\n\n    getColSandwichSum(colId: number): number | null {\n        const col = this.cells.filter(cell => cell.id % 9 === colId).map(cell => cell.value);\n        return this.getSandwichSum(col);\n    }\n\n    setSelected(cellId: number): void {\n        this.cells[cellId].selected = true;\n    }\n\n    getSelectedValues(): Set<CellValue> {\n        return new Set(\n            this.cells\n                .filter((cell) => cell.selected)\n                .filter((cell) => cell.value)\n                .map((cell) => cell.value)\n        );\n    }\n\n    setRestricted(gameOptions: GameOptions): void {\n        let restricted: Set<any> | null = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gameOptions);\n                } else {\n                    restricted = set_intersection(this.getVisibleCells(id, gameOptions), restricted);\n                }\n            }\n        }\n\n        if (restricted) {\n            restricted.forEach((cellId) => {\n                this.cells[cellId].restricted = true;\n            });\n        }\n    }\n\n    setErrors(cellIds: Set<number>): void {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSingleCell(cellId: number, newValue: CellValue, gameOptions: GameOptions, autoCleanup: boolean): void {\n        if (this.cells[cellId].isFixed) {\n            return;\n        }\n        this.cells[cellId].value = newValue;\n        if (autoCleanup) {\n            this.getVisibleCells(this.cells[cellId].id, gameOptions).forEach((id) => {\n                this.cells[id].cornerValues.delete(newValue);\n                this.cells[id].centerValues.delete(newValue);\n            });\n        }\n    }\n\n    setValueOfSelectedCells(newValue: CellValue, gameOptions: GameOptions, autoCleanup: boolean = false): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                this.setValueOfSingleCell(cell.id, newValue, gameOptions, autoCleanup);\n            }\n        });\n    }\n\n    unsetSelectedCells(): void {\n        this.cells\n            .filter(cell => cell.selected && !cell.isFixed)\n            .forEach(cell => { cell.value = null });\n        \n        [...this.rowSandwich, ...this.colSandwich]\n            .filter(cell => cell.selected)\n            .forEach(cell => { cell.value = null });\n    }\n\n    toggleCornerValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections(): void {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n        this.rowSandwich.forEach((cell) => {\n            cell.selected = false;\n        });\n        this.colSandwich.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds(): void {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors(): void {\n        this.cells.forEach(cell => { cell.error = false });\n        this.rowSandwich.forEach(cell => { cell.error = false });\n        this.colSandwich.forEach(cell => { cell.error = false });\n    }\n}\n\nexport { BoardModel };\n","export type GameOptions = {\n    antiKnight: boolean;\n    antiKing: boolean;\n    sandwich: boolean;\n};\n\nexport type DisplayOptions = {\n    highlightRestricted: boolean;\n    highlightMatchingNumbers: boolean;\n    autoCleanUp: boolean;\n};\n\nexport class ControlModel {\n    displayOptions: DisplayOptions;\n    gameOptions: GameOptions;\n\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n            highlightMatchingNumbers: false,\n            autoCleanUp: false,\n        };\n        this.gameOptions = {\n            antiKnight: false,\n            antiKing: false,\n            sandwich: false,\n        };\n    }\n}\n","import { BoardModel } from \"./board\";\n\nexport class HistoryModel {\n    boards: Array<string>;\n    id: number;\n\n    constructor() {\n        this.boards = [];\n        this.id = 0;\n\n        const board = new BoardModel();\n        this.boards.push(board.serialize());\n    }\n}\n","import { combineReducers } from 'redux';\nimport { boardReducer } from './board';\nimport { controlReducer } from './control';\nimport { gameUrlReducer } from './gameUrl';\nimport { historyReducer } from './history';\n\n\nconst isMouseDownReducer = (isMouseDown = false) => {\n    return isMouseDown;\n}\n\nconst highlightMatchingReducer = (highlightMatching = null) => {\n    return highlightMatching;\n}\n\nexport default combineReducers({\n    board: boardReducer,\n    control: controlReducer,\n    history: historyReducer,\n    isMouseDown: isMouseDownReducer,\n    highlightMatching: highlightMatchingReducer,\n    gameUrl: gameUrlReducer,\n});\n","import {\n    ACTION_INIT_GAME_STATE,\n    ACTION_REDO,\n    ACTION_UNDO,\n    ACTION_UPDATE_BOARD,\n    ActionTypes\n    } from '../actions/types';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\n\nexport const boardReducer = (board = new BoardModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        return action.payload.board;\n    }\n    if (action.type === ACTION_UNDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n    if (action.type === ACTION_REDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n    if (action.type === ACTION_INIT_GAME_STATE) {\n        const board = new BoardModel();\n        for (let i = 0; i < 81; i++) {\n            const value = action.payload.values[i];\n            if (value !== '0') {\n                board.cells[i].value = action.payload.values[i] as CellValue;\n                board.cells[i].isFixed = true;\n            }\n        }\n        if (action.payload.rowSandwichSums !== null) {\n            for (let i = 0; i < 9; i++) {\n                board.rowSandwich[i].value = action.payload.rowSandwichSums[i];\n                board.rowSandwich[i].isFixed = true;\n            }\n        }\n        if (action.payload.colSandwichSums !== null) {\n            for (let i = 0; i < 9; i++) {\n                board.colSandwich[i].value = action.payload.colSandwichSums[i];\n                board.colSandwich[i].isFixed = true;\n            }\n        }\n        return board;\n    }\n\n    return board;\n}\n","import {\n    ACTION_INIT_GAME_STATE,\n    ACTION_UPDATE_DISPLAY,\n    ACTION_UPDATE_GAME_PLAY,\n    ActionTypes\n    } from '../actions/types';\nimport { ControlModel } from '../models/control';\n\nexport const controlReducer = (control: ControlModel = new ControlModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_DISPLAY) {\n        return {...control, displayOptions: action.payload};\n    }\n    if (action.type === ACTION_UPDATE_GAME_PLAY) {\n        return {...control, gameOptions: action.payload};\n    }\n    if (action.type === ACTION_INIT_GAME_STATE) {\n        return {...control, gameOptions: action.payload.gameOptions};\n    }\n    return control;\n};\n","import assert from 'assert';\nimport { ActionTypes, ACTION_UPDATE_BOARD, ACTION_UNDO, ACTION_REDO } from '../actions/types';\nimport { HistoryModel } from '../models/history';\n\nexport const historyReducer = (history = new HistoryModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        const serialized = action.payload.board.serialize();\n\n        // Only update history if the serialized new board is different.\n        // Thus, we ignore all selections and restrictions.\n        if (serialized !== history.boards[history.id]) {\n            // Remove the rest of history.\n            // This clean data in case we do lots of undo, and then make a new move.\n            history.boards = history.boards.slice(0, history.id + 1);\n\n            // Update history.\n            history.boards.push(serialized);\n            history.id += 1;\n        }\n        return history;\n    }\n    if (action.type === ACTION_UNDO) {\n        assert(history.id > 0);\n        return {...history, id: history.id - 1 };\n    }\n    if (action.type === ACTION_REDO) {\n        assert(history.id + 1 < history.boards.length);\n        return {...history, id: history.id + 1 };\n    }\n    return history;\n}\n","import { ACTION_GENERATE_URL, ActionTypes } from '../actions/types';\n\nexport const gameUrlReducer = (gameUrl = null, action: ActionTypes) => {\n    if (action.type === ACTION_GENERATE_URL) {\n        return action.payload.url;\n    }\n    return gameUrl;\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { createStore } from 'redux';\nimport Game from './components/Game';\nimport './index.css';\nimport reducers from './reducers';\n\n\nconst store = createStore(\n    reducers,\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <Route path=\"/:encoded?\" component={Game} />\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}