{"version":3,"sources":["components/board/Cell.tsx","components/board/Board.tsx","components/control/DisplayOptions.tsx","actions/control.ts","actions/types.ts","components/control/GameOptions.tsx","components/control/Control.tsx","actions/history.ts","components/Game.tsx","actions/board.ts","models/control.ts","models/cell.ts","models/board.ts","models/history.ts","reducers/index.ts","reducers/board.ts","reducers/control.ts","reducers/history.ts","index.tsx"],"names":["Cell","this","props","cell","value","className","highlightMatching","sortedValues","Array","from","cornerValues","sort","map","classes","shouldHighlightMatching","key","id","centerValues","isRegionTop","push","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","selected","restricted","error","join","onClick","onMouseDown","onMouseOver","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","Board","i","board","cells","e","String","startingCell","renderCell","rows","renderRow","DisplayOptions","Form","Check","type","label","checked","highlightRestricted","onChange","updateDisplay","highlightMatchingNumbers","autoCleanUp","connector","connect","state","control","displayOptions","payload","GamePlay","antiKnight","updateGamePlay","antiKing","gamePlay","Control","Button","onClickVerify","onClickUndo","onClickRedo","onClickFillCenters","noOpAction","Game","cellId","multiSelectMode","console","log","select","newValue","clearAllError","newBoard","_","cloneDeep","setValueOfSelectedCells","selectedValues","getSelectedValues","size","selectedValue","values","next","updateBoard","unsetSelectedCells","toggleCornerValuesOfSelectedCells","clearCornerValuesOfSelectedCells","toggleCenterValuesOfSelectedCells","clearCenterValuesOfSelectedCells","clearAllErrors","invalidCellIds","getInvalidCellIds","setErrors","alert","d_row","d_col","r","c","toRowCol","toCellId","keyCode","isShift","shiftKey","isMeta","metaKey","KeyCode","fromCharCode","preventDefault","moveSelection","pressEsc","undo","history","redo","fillAllPossibleValues","onKeyDown","handleKeyDown","tabIndex","onMouseUp","Object","assign","handleMouseOver","verifyBoard","handleClickFillCenter","boards","length","serialized","clearAllSelections","clearAllRestricteds","clearSelection","setMultiSelect","setSelected","setRestricted","ControlModel","CellModel","row","col","Set","set_intersection","a","b","filter","x","has","BoardModel","result","forEach","JSON","stringify","obj","parse","getRegionByPosition","col2","add","row2","region","getRegion","di","dj","isInside","delete","myValue","getVisibleCells","neighborId","seenValues","getPossibleValues","cellIds","autoCleanup","clear","HistoryModel","serialize","combineReducers","action","load","slice","assert","isMouseDown","ReactDOM","render","store","createStore","reducers","document","getElementById"],"mappings":"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","file":"static/js/main.6c3e3c19.chunk.js","sourcesContent":["import React from 'react';\n\nimport { CellModel, CellValue } from '../../models/cell';\n\ntype CellProps = {\n    cell: CellModel,\n    onClick: (e: any) => void,\n    onMouseDown: (e: any) => void,\n    onMouseOver: (e: any) => void,\n    key: string,\n    highlightMatching: CellValue,\n};\n\nclass Cell extends React.Component<CellProps> {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    shouldHighlightMatching(value: CellValue) {\n        return this.props.highlightMatching && value === this.props.highlightMatching;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"corner-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"center-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        } else if (this.shouldHighlightMatching(this.props.cell.value)) {\n            classes.push('matching');\n        } else if (this.props.cell.restricted) {\n            classes.push('restricted');\n        }\n        if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                onMouseDown={this.props.onMouseDown}\n                onMouseOver={this.props.onMouseOver}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nexport default Cell;\n","import React from 'react';\n\nimport Cell from './Cell';\nimport { BoardModel } from '../../models/board';\n\nclass Board extends React.Component<BoardProps> {\n    renderCell(i: number) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                onMouseDown={(e) => this.props.onMouseDown(e, i)}\n                onMouseOver={() => this.props.onMouseOver(i)}\n                key={String(i)}\n                highlightMatching={this.props.board.highlightMatching}\n            />\n        );\n    }\n\n    renderRow(startingCell: number) {\n        let cells = [];\n        for (let i = startingCell; i < startingCell + 9; i++) {\n            cells.push(this.renderCell(i));\n        }\n        return (\n            <div className=\"row\" key={startingCell}>\n                {cells}\n            </div>\n        );\n    }\n\n    render() {\n        let rows = [];\n        for (let i = 0; i < 81; i += 9) {\n            rows.push(this.renderRow(i));\n        }\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\ntype BoardProps = {\n    board: BoardModel,\n    onClick: (e: any, i: number) => void,\n    onMouseDown: (e: any, i: number) => void,\n    onMouseOver: (i: number) => void,\n};\n\n\nexport default Board;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { updateDisplay } from '../../actions/control';\nimport { GameState } from '../Game';\n\nclass DisplayOptions extends React.Component<DisplayOptionsProps> {\n    render() {\n        return (\n            <div id=\"display-options\">\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.highlightRestricted}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightRestricted: !this.props.highlightRestricted\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-matching-numbers'\n                    label='Highlight matching numbers'\n                    checked={this.props.highlightMatchingNumbers}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightMatchingNumbers: !this.props.highlightMatchingNumbers\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-auto-cleanup'\n                    label='Auto Cleanup corner &amp; center values'\n                    checked={this.props.autoCleanUp}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        autoCleanUp: !this.props.autoCleanUp\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.displayOptions};\n};\n\nconst connector = connect(mapStateToProps, { updateDisplay });\n\ntype DisplayOptionsProps = ConnectedProps<typeof connector>;\n\nexport default connector(DisplayOptions);\n","import { ACTION_UPDATE_DISPLAY, ACTION_UPDATE_GAME_PLAY as ACTION_UPDATE_GAME_OPTIONS, ActionTypes } from './types';\nimport { DisplayOptions, GameOptions } from '../models/control';\n\n\nexport const updateDisplay = (displayOptions: DisplayOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_DISPLAY,\n        payload: displayOptions,\n    };\n};\n\nexport const updateGameOptions = (gamePlay: GameOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_GAME_OPTIONS,\n        payload: gamePlay,\n    }\n};\n","import { BoardModel } from '../models/board';\nimport { DisplayOptions, GameOptions } from '../models/control';\n\nexport const ACTION_NO_OP = 'ACTION_NO_OP';\nexport interface NoOpAction {\n    type: typeof ACTION_NO_OP,\n};\n\n// Board actions.\nexport const ACTION_UPDATE_BOARD = 'ACTION_UPDATE_BOARD';\n\nexport interface UpdateBoardAction {\n    type: typeof ACTION_UPDATE_BOARD,\n    payload: {\n        board: BoardModel,\n    },\n};\n\n// Control actions.\nexport const ACTION_UPDATE_DISPLAY = 'ACTION_UPDATE_DISPLAY';\nexport const ACTION_UPDATE_GAME_PLAY = 'ACTION_UPDATE_GAME_PLAY';\n\ninterface UpdateDisplayAction {\n    type: typeof ACTION_UPDATE_DISPLAY,\n    payload: DisplayOptions,\n};\n\ninterface UpdateGamePlayAction {\n    type: typeof ACTION_UPDATE_GAME_PLAY,\n    payload: GameOptions,\n}\n\n// History actions.\nexport const ACTION_REDO = 'ACTION_REDO';\nexport const ACTION_UNDO = 'ACTION_UNDO';\n\nexport interface RedoAction {\n    type: typeof ACTION_REDO,\n    payload: {\n        serialized: string,\n    },\n};\nexport interface UndoAction {\n    type: typeof ACTION_UNDO,\n    payload: {\n        serialized: string,\n    },\n};\n\n// Combine all action types.\nexport type ActionTypes = NoOpAction\n    | UpdateBoardAction\n    | UpdateDisplayAction | UpdateGamePlayAction\n    | RedoAction | UndoAction;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { updateGameOptions } from '../../actions/control';\nimport { GameState } from '../Game';\n\nclass GamePlay extends React.Component<GamePlayProps> {\n    render() {\n        return (\n            <div id=\"game-play\">\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label='Anti Knight'\n                    checked={this.props.antiKnight}\n                    onChange={() => this.props.updateGamePlay({\n                        ...this.props,\n                        antiKnight: !this.props.antiKnight\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label='Anti King'\n                    checked={this.props.antiKing}\n                    onChange={() => this.props.updateGamePlay({\n                        ...this.props,\n                        antiKing: !this.props.antiKing\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.gamePlay};\n};\n\nconst connector = connect(mapStateToProps, { updateGamePlay: updateGameOptions });\n\ntype GamePlayProps = ConnectedProps<typeof connector>;\n\nexport default connector(GamePlay);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nimport DisplayOptions from './DisplayOptions';\nimport GamePlay from './GameOptions';\n\nclass Control extends React.Component<ControlProps> {\n    render() {\n        return (\n            <Form>\n                <div className=\"\">\n                    <Button onClick={this.props.onClickVerify}>\n                        Verify\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickUndo}\n                        className=\"btn-secondary\"\n                    >\n                        Undo\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickRedo}\n                        className=\"btn-secondary\"\n                    >\n                        Redo\n                    </Button>\n                </div>\n                <hr/>\n                <DisplayOptions />\n                <hr/>\n                <GamePlay />\n                <hr/>\n                <h4>Help</h4>\n                <Button\n                    onClick={this.props.onClickFillCenters}\n                    className=\"btn-secondary\"\n                >\n                    Fill all center values\n                </Button>\n            </Form>\n        );\n    }\n}\n\ntype ControlProps = {\n    onClickVerify: () => void,\n    onClickUndo: () => void,\n    onClickRedo: () => void,\n\n    onClickFillCenters: () => void,\n};\n\nexport default Control;\n","import { ACTION_NO_OP, ACTION_REDO, ACTION_UNDO, ActionTypes, NoOpAction } from './types';\nimport { HistoryModel } from '../models/history';\n\nconst noOpAction: NoOpAction = { type: ACTION_NO_OP };\n\nexport const redo = (history: HistoryModel): ActionTypes => {\n    if (history.id >= history.boards.length - 1) {\n        // Nothing to redo.\n        return noOpAction;\n    }\n    return {\n        type: ACTION_REDO,\n        payload: {\n            serialized: history.boards[history.id + 1],\n        },\n    };\n};\n\nexport const undo = (history: HistoryModel): ActionTypes => {\n    if (history.id === 0) {\n        // Nothing to do.\n        return noOpAction;\n    }\n    return {\n        type: ACTION_UNDO,\n        payload: {\n            serialized: history.boards[history.id - 1],\n        },\n    };\n};\n","import * as KeyCode from 'keycode-js';\nimport _ from 'lodash';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport Board from './board/Board';\nimport Control from './control/Control';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\nimport { ControlModel } from '../models/control';\nimport * as BoardActions from '../actions/board';\nimport * as HistoryActions from '../actions/history';\nimport { HistoryModel } from '../models/history';\n\nexport type GameState = {\n    board: BoardModel,\n    control: ControlModel,\n    history: HistoryModel,\n};\n\nclass Game extends React.Component<GameProps, GameState> {\n    // Handle mouseover a cell.\n    handleMouseOver(cellId: number) {\n        if (!this.props.board.multiSelectMode) {\n            return;\n        }\n        console.log('handleMouseOver ' + cellId);\n        this.props.select(this.props.board, this.props.control, cellId, false);\n    }\n\n    setValueOfSelectedCells(newValue: CellValue) {\n        console.log('setValueOfSelectedCells ' + newValue);\n        this.clearAllError();\n\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.setValueOfSelectedCells(\n            newValue,\n            this.props.control.gamePlay,\n            this.props.control.displayOptions.autoCleanUp);\n        \n        if (this.props.control.displayOptions.highlightMatchingNumbers) {\n            newBoard.highlightMatching = null;\n\n            const selectedValues = newBoard.getSelectedValues();\n            if (selectedValues.size === 1) {\n                const selectedValue = selectedValues.values().next().value;\n                newBoard.highlightMatching = selectedValue;\n            }\n        }\n        this.props.updateBoard(newBoard);\n    }\n\n    unsetSelectedCells() {\n        console.log('unsetSelectedCells');\n        this.clearAllError();\n\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.unsetSelectedCells();\n\n        this.props.updateBoard(newBoard);\n    }\n\n    toggleCornerValuesOfSelectedCells(newValue: CellValue) {\n        console.log('toggleCornerValuesOfSelectedCells ' + newValue);\n\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n        this.props.updateBoard(newBoard);\n    }\n\n    clearCornerValuesOfSelectedCells() {\n        console.log('clearCornerValuesOfSelectedCells');\n        \n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.clearCornerValuesOfSelectedCells();\n        this.props.updateBoard(newBoard);\n    }\n\n    toggleCenterValuesOfSelectedCells(newValue: CellValue) {\n        console.log('toggleCenterValuesOfSelectedCells ' + newValue);\n\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.toggleCenterValuesOfSelectedCells(newValue);\n\n        this.props.updateBoard(newBoard);\n    }\n\n    clearCenterValuesOfSelectedCells() {\n        console.log('clearCenterValuesOfSelectedCells');\n\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.clearCenterValuesOfSelectedCells();\n        this.props.updateBoard(newBoard);\n    }\n\n    clearAllError() {\n        console.log('clearAllError');\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.clearAllErrors();\n        this.props.updateBoard(newBoard);\n    }\n\n    verifyBoard() {\n        console.log('verifyBoard');\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.clearAllErrors();\n        let invalidCellIds = newBoard.getInvalidCellIds(this.props.control.gamePlay);\n        newBoard.setErrors(invalidCellIds);\n        this.props.updateBoard(newBoard);\n\n        alert(invalidCellIds.size > 0 ? 'Error found :(' : 'LGTM!');\n    }\n\n    // Move selected cell in direction (d_row, d_col).\n    // If there are more than one selected cells, only move the first one.\n    moveSelection(d_row: number, d_col: number) {\n        let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n        for (let i = 0; i < 81; i++) {\n            if (this.props.board.cells[i].selected) {\n                [r, c] = this.props.board.toRowCol(i);\n                break;\n            }\n        }\n        r = (r + d_row + 9) % 9;\n        c = (c + d_col + 9) % 9;\n        this.props.select(this.props.board, this.props.control, this.props.board.toCellId(r, c));\n    }\n\n    // Handle keypress event on a cell.\n    handleKeyDown(e: any) {\n        console.log('handleKeyDown, keyCode = ' + e.keyCode);\n\n        let isShift = !!e.shiftKey;\n        let isMeta = !!e.metaKey;\n\n        // Pressed 1-9\n        if (e.keyCode >= KeyCode.KEY_1 && e.keyCode <= KeyCode.KEY_9) {\n            const value = String.fromCharCode(e.keyCode) as CellValue;\n            if (isShift) {\n                this.toggleCornerValuesOfSelectedCells(value)\n            } else if (isMeta) {\n                this.toggleCenterValuesOfSelectedCells(value);\n                e.preventDefault();\n            } else {\n                this.setValueOfSelectedCells(value);\n            }\n        }\n\n        switch (e.keyCode) {\n            case KeyCode.KEY_SPACE:\n                this.unsetSelectedCells();\n                break;\n            case KeyCode.KEY_BACK_SPACE:\n                this.unsetSelectedCells();\n                this.clearCornerValuesOfSelectedCells();\n                this.clearCenterValuesOfSelectedCells();\n                e.preventDefault();\n                break;\n            case KeyCode.KEY_DOWN:\n                this.moveSelection(+1, 0);\n                break;\n            case KeyCode.KEY_UP:\n                this.moveSelection(-1, 0);\n                break;\n            case KeyCode.KEY_LEFT:\n                this.moveSelection(0, -1);\n                break;\n            case KeyCode.KEY_RIGHT:\n                this.moveSelection(0, +1);\n                break;\n            case KeyCode.KEY_ESCAPE:\n                this.props.pressEsc(this.props.board);\n                break;\n            case KeyCode.KEY_Z:\n            case KeyCode.KEY_U:\n                this.props.undo(this.props.history);\n                break;\n            case KeyCode.KEY_Y:\n            case KeyCode.KEY_R:\n                this.props.redo(this.props.history);\n                break;\n            default:\n        }\n    }\n\n    handleClickFillCenter() {\n        console.log('handleClickFillCenter');\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.fillAllPossibleValues(this.props.control.gamePlay);\n        this.props.updateBoard(newBoard);\n    }\n\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.handleKeyDown(e)}\n                tabIndex={0}\n                className=\"container\"\n                onMouseUp={() => this.props.updateBoard(Object.assign(this.props.board, { multiSelectMode: false}))}\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.props.board}\n                            onClick={(e, id) => this.props.select(this.props.board, this.props.control, id, !e.metaKey)}\n                            onMouseDown={(e, id) => this.props.select(this.props.board, this.props.control, id, !e.metaKey, true)}\n                            onMouseOver={(i) => this.handleMouseOver(i)}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            onClickVerify={() => this.verifyBoard()}\n                            onClickUndo={() => this.props.undo(this.props.history)}\n                            onClickRedo={() => this.props.redo(this.props.history)}\n                            onClickFillCenters={() => this.handleClickFillCenter()}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state};\n};\n\nconst connector = connect(mapStateToProps, {\n    // history actions.\n    redo: HistoryActions.redo,\n    undo: HistoryActions.undo,\n\n    // board actions.\n    pressEsc: BoardActions.pressEsc,\n    select: BoardActions.select,\n    updateBoard: BoardActions.updateBoard,\n});\n\ntype GameProps = ConnectedProps<typeof connector>;\n\nexport default connector(Game);\n","import _ from 'lodash';\n\nimport { ACTION_UPDATE_BOARD, ActionTypes } from './types';\nimport { BoardModel } from '../models/board';\nimport { ControlModel } from '../models/control';\n\nexport const updateBoard = (board: BoardModel): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_BOARD,\n        payload: {\n            board: board,\n        }\n    };\n};\n\nexport const pressEsc = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllSelections();\n    newBoard.clearAllRestricteds();\n    newBoard.highlightMatching = null;\n    return {\n        type: ACTION_UPDATE_BOARD,\n        payload: {\n            board: newBoard,\n        },\n    };\n}\n\nexport const select = (\n        board: BoardModel,\n        control: ControlModel,\n        cellId: number,\n        clearSelection: boolean = true,\n        setMultiSelect: boolean | null = null\n        ): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    if (setMultiSelect !== null) {\n        newBoard.multiSelectMode = setMultiSelect;\n    }\n\n    if (clearSelection) {\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n        newBoard.highlightMatching = null;\n    } else {\n        newBoard.clearAllRestricteds();\n    }\n\n    newBoard.setSelected(cellId);\n\n    if (control.displayOptions.highlightRestricted) {\n        newBoard.setRestricted(control.gamePlay);\n    }\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n\n    return {\n        type: ACTION_UPDATE_BOARD,\n        payload: {\n            board: newBoard,\n        },\n    };\n}\n","export type GameOptions = {\n    antiKnight: boolean;\n    antiKing: boolean;\n};\n\nexport type DisplayOptions = {\n    highlightRestricted: boolean;\n    highlightMatchingNumbers: boolean;\n    autoCleanUp: boolean;\n};\n\nexport class ControlModel {\n    displayOptions: DisplayOptions;\n    gamePlay: GameOptions;\n\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n            highlightMatchingNumbers: false,\n            autoCleanUp: false,\n        };\n        this.gamePlay = {\n            antiKnight: false,\n            antiKing: false,\n        };\n    }\n}\n","export type CellValue = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | null;\n\nexport class CellModel {\n    value: CellValue;\n    cornerValues: Set<CellValue>;\n    centerValues: Set<CellValue>;\n    selected: boolean;\n    restricted: boolean;\n    error: boolean;\n    row: number;\n    col: number;\n    id: number;\n\n    constructor(id: number) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop(): boolean {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom(): boolean {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft(): boolean {\n        return this.col % 3 === 0;\n    }\n    isRegionRight(): boolean {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop(): boolean {\n        return this.row === 0;\n    }\n    isBoardBottom(): boolean {\n        return this.row === 8;\n    }\n    isBoardLeft(): boolean {\n        return this.col === 0;\n    }\n    isBoardRight(): boolean {\n        return this.col === 8;\n    }\n}\n","import { CellModel, CellValue } from './cell';\nimport { GameOptions } from './control';\n\nfunction set_intersection(a: Set<any>, b: Set<any>) {\n    return new Set([...a].filter(x => b.has(x)));\n}\n\nfunction set_difference(a: Set<any>, b: Set<any>) {\n    return new Set([...a].filter(x => !b.has(x)));\n}\n\nclass BoardModel {\n    cells: Array<CellModel>;\n    highlightMatching: CellValue;\n    multiSelectMode: boolean;\n\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n        this.highlightMatching = null;\n        this.multiSelectMode = false;\n    }\n\n    serialize(): string {\n        let result: Array<{\n            value: CellValue;\n            cornerValues: Array<CellValue>;\n            centerValues: Array<CellValue>;\n        }> = [];\n\n        this.cells.forEach((cell) => {\n            result.push({\n                value: cell.value,\n                cornerValues: Array.from(cell.cornerValues),\n                centerValues: Array.from(cell.centerValues),\n            });\n        });\n        return JSON.stringify(result);\n    }\n\n    load(serialized: string): void {\n        this.clearAllErrors();\n        this.clearAllRestricteds();\n        this.clearAllSelections();\n\n        let obj = JSON.parse(serialized);\n        for (let i = 0; i < 81; i++) {\n            this.cells[i].value = obj[i].value;\n            this.cells[i].cornerValues = new Set(obj[i].cornerValues);\n            this.cells[i].centerValues = new Set(obj[i].centerValues);\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row: number, col: number): boolean {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row: number, col: number): number {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId: number): [number, number] {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row: number, col: number): number {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId: number): number {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId: number, gamePlay: GameOptions): Set<number> {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result: Set<number> = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gamePlay.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gamePlay.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gamePlay: GameOptions): Set<number> {\n        let result: Set<number> = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gamePlay).forEach(neighborId => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    getPossibleValues(cellId: number, gamePlay: GameOptions): Set<CellValue> {\n        const seenValues = Array.from(this.getVisibleCells(cellId, gamePlay))\n            .map(neighborId => this.cells[neighborId].value)\n            .filter(x => x);\n\n        return set_difference(new Set(['1', '2', '3', '4', '5', '6', '7', '8', '9']), new Set(seenValues));\n    }\n\n    fillAllPossibleValues(gamePlay: GameOptions): void {\n        this.cells.forEach(cell => {\n            if (!cell.value) {\n                cell.centerValues = this.getPossibleValues(cell.id, gamePlay);\n            }\n        });\n    }\n\n    setSelected(cellId: number): void {\n        this.cells[cellId].selected = true;\n    }\n\n    getSelectedValues(): Set<CellValue> {\n        return new Set(\n            this.cells\n                .filter((cell) => cell.selected)\n                .filter((cell) => cell.value)\n                .map((cell) => cell.value)\n        );\n    }\n\n    setRestricted(gamePlay: GameOptions): void {\n        let restricted: Set<any> | null = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gamePlay);\n                } else {\n                    restricted = set_intersection(this.getVisibleCells(id, gamePlay), restricted);\n                }\n            }\n        }\n\n        if (restricted) {\n            restricted.forEach((cellId) => {\n                this.cells[cellId].restricted = true;\n            });\n        }\n    }\n\n    setErrors(cellIds: Set<number>): void {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSelectedCells(newValue: CellValue, gamePlay: GameOptions, autoCleanup: boolean = false): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = newValue;\n                if (autoCleanup) {\n                    this.getVisibleCells(cell.id, gamePlay).forEach((id) => {\n                        this.cells[id].cornerValues.delete(newValue);\n                        this.cells[id].centerValues.delete(newValue);\n                    });\n                }\n            }\n        });\n    }\n\n    unsetSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = null;\n            }\n        });\n    }\n\n    toggleCornerValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections(): void {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds(): void {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors(): void {\n        this.cells.forEach((cell) => {\n            cell.error = false;\n        });\n    }\n}\n\nexport { BoardModel };\n","import { BoardModel } from \"./board\";\n\nexport class HistoryModel {\n    boards: Array<string>;\n    id: number;\n\n    constructor() {\n        this.boards = [];\n        this.id = 0;\n\n        const board = new BoardModel();\n        this.boards.push(board.serialize());\n    }\n}\n","import { combineReducers } from 'redux';\n\nimport { controlReducer } from './control';\nimport { boardReducer } from './board';\nimport { historyReducer } from './history';\n\nconst isMouseDownReducer = (isMouseDown = false) => {\n    return isMouseDown;\n}\n\nconst highlightMatchingReducer = (highlightMatching = null) => {\n    return highlightMatching;\n}\n\nexport default combineReducers({\n    board: boardReducer,\n    control: controlReducer,\n    history: historyReducer,\n    isMouseDown: isMouseDownReducer,\n    highlightMatching: highlightMatchingReducer,\n});\n","import { ActionTypes, ACTION_UPDATE_BOARD, ACTION_UNDO, ACTION_REDO } from '../actions/types';\nimport { BoardModel } from '../models/board';\n\nexport const boardReducer = (board = new BoardModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        return action.payload.board;\n    }\n    if (action.type === ACTION_UNDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n    if (action.type === ACTION_REDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n\n    return board;\n}\n","import { ActionTypes, ACTION_UPDATE_DISPLAY, ACTION_UPDATE_GAME_PLAY } from '../actions/types';\nimport { ControlModel } from '../models/control';\n\nexport const controlReducer = (control: ControlModel = new ControlModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_DISPLAY) {\n        return {...control, displayOptions: action.payload};\n    }\n    if (action.type === ACTION_UPDATE_GAME_PLAY) {\n        return {...control, gamePlay: action.payload};\n    }\n    return control;\n};\n","import assert from 'assert';\nimport { ActionTypes, ACTION_UPDATE_BOARD, ACTION_UNDO, ACTION_REDO } from '../actions/types';\nimport { HistoryModel } from '../models/history';\n\nexport const historyReducer = (history = new HistoryModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        const serialized = action.payload.board.serialize();\n\n        // Only update history if the serialized new board is different.\n        // Thus, we ignore all selections and restrictions.\n        if (serialized !== history.boards[history.id]) {\n            // Remove the rest of history.\n            // This clean data in case we do lots of undo, and then make a new move.\n            history.boards = history.boards.slice(0, history.id + 1);\n\n            // Update history.\n            history.boards.push(serialized);\n            history.id += 1;\n        }\n        return history;\n    }\n    if (action.type === ACTION_UNDO) {\n        assert(history.id > 0);\n        return {...history, id: history.id - 1 };\n    }\n    if (action.type === ACTION_REDO) {\n        assert(history.id + 1 < history.boards.length);\n        return {...history, id: history.id + 1 };\n    }\n    return history;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport Game from './components/Game';\nimport reducers from './reducers';\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={createStore(reducers)}>\n        <Game />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}