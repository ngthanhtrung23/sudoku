{"version":3,"sources":["utils/set.ts","models/cell.ts","models/sandwichCell.ts","models/board.ts","actions/types.ts","actions/history.ts","actions/board.ts","utils/bits.ts","utils/sandwich.ts","utils/solver.ts","components/board/Cell.tsx","components/board/SandwichCell.tsx","components/board/Board.tsx","components/control/DisplayOptions.tsx","actions/control.ts","components/control/GameOptions.tsx","components/control/Control.tsx","components/Game.tsx","models/control.ts","models/history.ts","reducers/index.ts","reducers/board.ts","reducers/control.ts","reducers/history.ts","reducers/gameUrl.ts","index.tsx"],"names":["set_intersection","a","b","Set","filter","x","has","CellModel","id","value","cornerValues","centerValues","selected","restricted","error","row","col","isFixed","this","SandwichCellModel","BoardModel","cells","highlightMatching","multiSelectMode","rowSandwich","colSandwich","i","push","result","forEach","cell","fixed","Array","from","obj","rowSandwiches","map","colSandwiches","JSON","stringify","serialized","clearAllErrors","clearAllRestricteds","clearAllSelections","deserialized","parse","cellId","toRowCol","getRegionByPosition","gameOptions","col2","add","toCellId","row2","region","getRegion","antiKnight","di","dj","isInside","antiKing","delete","myValue","getVisibleCells","neighborId","seenValues","getPossibleValues","undefined","find","values","indexOf","left","Math","min","right","max","sum","slice","rowId","colId","getSandwichSum","getRowValues","getColValues","cellIds","newValue","autoCleanup","setValueOfSingleCell","clear","NO_OP","type","redo","history","boards","length","payload","undo","updateBoard","board","select","control","clearSelection","setMultiSelect","newBoard","_","cloneDeep","setSelected","displayOptions","highlightRestricted","setRestricted","highlightMatchingNumbers","selectedValues","getSelectedValues","size","selectedValue","next","selectSandwich","isRow","sandwich","Error","move","d_row","d_col","r","c","bitCount","n","bitContains","bit","bitRemoveIfExists","sumToSeqs","0","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","35","sandwichLengths","toRowId","toColId","getValidSandwichValues","len","mustHave","mustNot","inside","insides","outsides","seq","seq_set","can","applySandwichClues","candidates","sandwichSum","indexOf19","possibleLens","abs","res","attempt","bestId","solution","String","fromCharCode","firstSolution","cntSolutions","saveValues","clone","saveCandidates","neighborIds","cnt","solveBoard","fillAllPossibleValues","mask","isValid","attemptSandwich","bestCount","oneOrNine","cnt1","cnt9","candidate","Cell","props","className","sortedValues","sort","classes","shouldHighlightMatching","key","isRegionTop","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","join","onClick","onMouseDown","onMouseOver","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","SandwichCell","sandwichHint","seqs","tooltip","Tooltip","OverlayTrigger","placement","overlay","defaultValue","renderSandwichHint","connector","connect","state","Board","e","onSelectSandwich","startingCell","keys","renderCell","sandwichCell","renderSandwichCell","sandwichCells","renderEmptySandwichCell","sandwichRow","renderSandwichRow","rows","renderRow","DisplayOptions","Form","Check","label","checked","onChange","updateDisplay","autoCleanUp","renderSandwichDisplayOptions","GameOptions","message","renderLabel","updateGameOptions","Control","url","href","Button","onClickVerify","onClickUndo","onClickRedo","renderTooltip","onClickFillCenters","solve","generateUrl","renderUrl","gameUrl","Game","encoded","initGameState","window","atob","onKeyDown","keyDown","tabIndex","onMouseUp","mouseUp","metaKey","mouseDown","mouseOver","verify","fillCenter","ownProps","match","params","decodedState","rowSandwichSums","colSandwichSums","gameState","location","origin","pathname","btoa","isShift","shiftKey","isMeta","keyCode","KeyCode","hasSelected","toggleCornerValuesOfSelectedCells","toggleCornerValues","preventDefault","toggleCenterValuesOfSelectedCells","toggleCenterValues","setValueOfSelectedCells","setValue","hasSandwichSelected","setSandwichValue","unsetSelectedCells","unsetValue","clearCornerValuesOfSelectedCells","clearCenterValuesOfSelectedCells","pressBackspace","pressEsc","Object","assign","invalidCellIds","getInvalidCellIds","setErrors","hasError","want","getRowSandwichSum","getColSandwichSum","alert","ControlModel","HistoryModel","serialize","combineReducers","action","load","assert","isMouseDown","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","path","component","document","getElementById"],"mappings":"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A,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEXC,GAAI,CACA,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEXC,GAAI,CACA,CAAC,EAAG,GACJ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,EAAG,IAEdC,GAAI,CACA,CAAC,EAAG,GACJ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,EAAG,IAEdC,GAAI,CACA,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEdC,GAAI,CACA,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEdC,GAAI,CACA,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEdC,GAAI,CACA,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEdC,GAAI,CACA,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,EAAG,IAEjBC,GAAI,CACA,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,EAAG,IAEjBC,GAAI,CACA,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEjBC,GAAI,CACA,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEjBC,GAAI,CACA,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEjBC,GAAI,CACA,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEjBC,GAAI,CACA,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,IAEjBC,GAAI,CACA,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAEpBC,GAAI,CACA,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAEpBC,GAAI,CACA,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAEpBC,GAAI,CACA,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAEpBC,GAAI,CACA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAEpBC,GAAI,CACA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAEpBC,GAAI,CACA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAEpBC,GAAI,CACA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAGdC,EAAuB,CAChClC,EAAG,CAAC,GACJC,EAAG,CAAC,GACJC,EAAG,CAAC,GACJC,EAAG,CAAC,GACJC,EAAG,CAAC,EAAG,GACPC,EAAG,CAAC,EAAG,GACPC,EAAG,CAAC,EAAG,GACPC,EAAG,CAAC,EAAG,GACPC,EAAG,CAAC,EAAG,GACPC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,EAAG,GACXC,GAAI,CAAC,EAAG,EAAG,GACXC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,EAAG,GACXC,GAAI,CAAC,EAAG,EAAG,GACXC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,EAAG,GACRC,GAAI,CAAC,GACLC,GAAI,CAAC,GACLC,GAAI,CAAC,GACLC,GAAI,CAAC,IC/NHE,EAAU,SAACvH,GACb,SAAUA,EAAS,IAEjBwH,EAAU,SAACxH,GACb,OAAOA,EAAS,GAEdM,EAAW,SAAC0B,EAAeC,GAC7B,OAAe,EAARD,EAAYC,GAsBjBwF,EAAyB,SAAC3F,EAAaP,GACzC,GAAY,IAARO,EACA,MAAO,CAAC,IAAIzE,IAAO,IAAIA,IAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAGxD,IAAIoE,EAAOF,EAAOC,QAAQ,GACtBI,EAAQL,EAAOC,QAAQ,GAC3B,GAAIC,EAAOG,EAAO,CAAC,IAAD,EACE,CAACA,EAAOH,GAAvBA,EADa,KACPG,EADO,KAGlB,IAV+F,EAUzF8F,EAAM9F,EAAQH,EAAO,EAGvBkG,EAAwB,IAAItK,IAC5BuK,EAAuB,IAAIvK,IAC3BwK,GAAS,EAfkF,cAgB7EtG,GAhB6E,IAgB/F,2BAA0B,CAAC,IAAlB5D,EAAiB,QACR,IAAVA,IAEU,IAAVA,GAAyB,IAAVA,EACfkK,GAAUA,EAENA,EAAQF,EAAStH,IAAI1C,GACpBiK,EAAQvH,IAAI1C,KAvBsE,8BA4B/F,IA5B+F,EA4B3FmK,EAAuB,IAAIzK,IAC3B0K,EAAwB,IAAI1K,IA7B+D,cA8B/E8H,EAAUrD,IA9BqE,IA8B/F,2BAAgC,CAAC,IAAxBkG,EAAuB,QACtBC,EAAU,IAAI5K,IAAI2K,GACpBE,GAAM,EACNF,EAAIjF,SAAW2E,IACfQ,GAAM,GAJkB,oBAMVP,GANU,IAM5B,2BAA4B,CAAC,IAApBhK,EAAmB,QACxB,IAAKsK,EAAQzK,IAAIG,GAAQ,CACrBuK,GAAM,EACN,QAToB,kDAYVN,GAZU,IAY5B,2BAA2B,CAAC,IAAnBjK,EAAkB,QACvB,GAAIsK,EAAQzK,IAAIG,GAAQ,CACpBuK,GAAM,EACN,QAfoB,8BAkB5B,GAAIA,EACA,IAAK,IAAIvK,EAAQ,EAAGA,GAAS,EAAGA,IACxBsK,EAAQzK,IAAIG,GACZmK,EAAQzH,IAAI1C,GAEZoK,EAAS1H,IAAI1C,IArDkE,8BA0D/F,MAAO,CAACmK,EAASC,IAKfI,EAAqB,SAAChF,EAAmBnB,EAAeC,EAAeV,EAAuB6G,GAEhG,GAAuC,OAAnCjF,EAAMzE,YAAYsD,GAAOrE,MAAgB,CACzC,IAAMM,EArFO,SAAC+D,EAAeT,GACjC,OAAOA,EAAOQ,MAAc,EAARC,EAAmB,EAARA,EAAY,GAoF3BG,CAAaH,EAAOT,GAC1B8G,EAAsBlF,EAAMzE,YAAYsD,GAAOrE,MAErD,GAAIM,EAAIuD,QAAQ,IAAM,GAAKvD,EAAIuD,QAAQ,IAAM,GAGzC,IAH6C,IAAD,EAChBiG,EAAuBY,EAAapK,GADpB,mBACrC6J,EADqC,KAC5BC,EAD4B,KAExCF,GAAS,EACJjJ,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAe,IAAXX,EAAIW,IAAuB,IAAXX,EAAIW,GACpBiJ,GAAUA,OACP,GAAe,IAAX5J,EAAIW,GACX,IAAK,IAAIjB,EAAQ,EAAGA,GAAS,EAAGA,IAAS,CACrC,IAAMqC,EAASM,EAAS0B,EAAOpD,IAC1BiJ,IAAWC,EAAQtK,IAAIG,KACfkK,IAAWE,EAASvK,IAAIG,MACjCyK,EAAWpI,GAAUkF,EAAkBkD,EAAWpI,GAASrC,UAKxE,GAAIM,EAAIuD,QAAQ,IAAM,GAAKvD,EAAIuD,QAAQ,IAAM,EAAG,CACnD,IAAI8G,EAAYrK,EAAIuD,QAAQ,GACxB8G,EAAY,IAAGA,EAAYrK,EAAIuD,QAAQ,IAG3C,IADA,IAAM+G,EAAe,IAAIlL,IAAIiK,EAAgBe,IACpCzJ,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAe,IAAXX,EAAIW,KACC2J,EAAa/K,IAAIkE,KAAK8G,IAAI5J,EAAI0J,GAAa,GAAI,CAChD,IAAMtI,EAASM,EAAS0B,EAAOpD,GAC/BwJ,EAAWpI,GAAUkF,EAAkBkD,EAAWpI,GAAS,GAC3DoI,EAAWpI,GAAUkF,EAAkBkD,EAAWpI,GAAS,KAQ/E,GAAuC,OAAnCmD,EAAMxE,YAAYsD,GAAOtE,MAAgB,CACzC,IAAMO,EAvHO,SAAC+D,EAAeV,GAEjC,IADA,IAAIkH,EAAM,GACD7J,EAAIqD,EAAOrD,EAAI,GAAIA,GAAK,EAC7B6J,EAAI5J,KAAK0C,EAAO3C,IAEpB,OAAO6J,EAkHSrG,CAAaH,EAAOV,GAC1B8G,EAAsBlF,EAAMxE,YAAYsD,GAAOtE,MAErD,GAAIO,EAAIsD,QAAQ,IAAM,GAAKtD,EAAIsD,QAAQ,IAAM,GAGzC,IAH6C,IAAD,EAChBiG,EAAuBY,EAAanK,GADpB,mBACrC4J,EADqC,KAC5BC,EAD4B,KAExCF,GAAS,EACJjJ,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAe,IAAXV,EAAIU,IAAuB,IAAXV,EAAIU,GACpBiJ,GAAUA,OACP,GAAe,IAAX3J,EAAIU,GACX,IAAK,IAAIjB,EAAQ,EAAGA,GAAS,EAAGA,IAAS,CACrC,IAAMqC,EAASM,EAAS1B,EAAGqD,IACtB4F,IAAWC,EAAQtK,IAAIG,KACfkK,IAAWE,EAASvK,IAAIG,MACjCyK,EAAWpI,GAAUkF,EAAkBkD,EAAWpI,GAASrC,UAKxE,GAAIO,EAAIsD,QAAQ,IAAM,GAAKtD,EAAIsD,QAAQ,IAAM,EAAG,CACnD,IAAI8G,EAAYpK,EAAIsD,QAAQ,GACxB8G,EAAY,IAAGA,EAAYpK,EAAIsD,QAAQ,IAG3C,IADA,IAAM+G,EAAe,IAAIlL,IAAIiK,EAAgBe,IACpCzJ,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAe,IAAXV,EAAIU,KACC2J,EAAa/K,IAAIkE,KAAK8G,IAAI5J,EAAI0J,GAAa,GAAI,CAChD,IAAMtI,EAASM,EAAS1B,EAAGqD,GAC3BmG,EAAWpI,GAAUkF,EAAkBkD,EAAWpI,GAAS,GAC3DoI,EAAWpI,GAAUkF,EAAkBkD,EAAWpI,GAAS,OAgB7E0I,EAAU,SAAVA,EAAWvF,EAAmBE,EAAuB9B,EAAuB6G,GAG9E,IADA,IAAIO,GAAU,EACL/J,EAAI,EAAGA,EAAI,GAAIA,IACF,IAAd2C,EAAO3C,KACH+J,EAAS,GAAK7D,EAASvD,EAAO3C,IAAMkG,EAASvD,EAAOoH,OACpDA,EAAS/J,GAIrB,GAAI+J,EAAS,EAAG,CAGZ,IADA,IAAIC,EAAWnF,IAAEC,UAAUP,GAClBvE,EAAI,EAAGA,EAAI,GAAIA,IACpBgK,EAASpG,qBAAqB5D,EAAGiK,OAAOC,aAAa,GAAKvH,EAAO3C,IAAkByE,EAAQlD,aAAa,GAE5G,MAAO,CAACyI,EAAU,GAGtB,GAAqC,IAAjC9D,EAASsD,EAAWO,IACpB,MAAO,CAAC,KAAM,GAKlB,IAFA,IAAII,EAAgB,KAChBC,EAAe,EACVrL,EAAQ,EAAGA,GAAS,EAAGA,IAC5B,GAAIqH,EAAYoD,EAAWO,GAAShL,GAAQ,CACxC,IAAMsL,EAAaxF,IAAEyF,MAAM3H,GACrB4H,EAAiB1F,IAAEyF,MAAMd,GAE/B7G,EAAOoH,GAAUhL,EACjB,IALwC,EAKlCyL,EAAcjG,EAAMlC,gBAAgB0H,EAAQtF,EAAQlD,aALlB,cAMjBiJ,GANiB,IAMxC,2BAAoC,CAAC,IAA5BlI,EAA2B,QAChCkH,EAAWlH,GAAcgE,EAAkBkD,EAAWlH,GAAavD,IAP/B,8BASpC0F,EAAQlD,YAAYoE,UACpB4D,EAAmBhF,EAAOoE,EAAQoB,GAASnB,EAAQmB,GAASpH,EAAQ6G,GAVhC,MAalBM,EAAQvF,EAAOE,EAAS9B,EAAQ6G,GAbd,mBAanCQ,EAbmC,KAazBS,EAbyB,KAcxC,GAAIA,EAAM,IACgB,OAAlBN,IACAA,EAAgBH,IAEpBI,GAAgBK,IACI,GAChB,MAIR9H,EAAS0H,EACTb,EAAae,EAGrB,MAAO,CAACJ,EAAeC,IA+GdM,EAAa,SAACnG,EAAmBE,GAC1C,IAAIG,EAAWC,IAAEC,UAAUP,GAC3BK,EAAS+F,sBAAsBlG,EAAQlD,aAEvC,IAAIoB,EAASiC,EAASjF,MAAMe,KAAI,SAAAN,GAC5B,OAAKA,EAAKrB,OACGqB,EAAKrB,MADM,KAGxByK,EAAa5E,EAASjF,MAAMe,KAAI,SAAAN,GAChC,IADwC,EACpCwK,EAAO,EAD6B,cAEtBxK,EAAKnB,cAFiB,IAExC,2BAAqC,CAAC,IAA7BF,EAA4B,QACnB,OAAVA,IACA6L,GAAQ,IAAO7L,IAJiB,8BAOxC,OAAO6L,KAIX,GAAInG,EAAQlD,YAAYoE,SAAU,CAC9B,IAAK,IAAI3F,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAK4E,EAAS9E,YAAYE,GAAG6K,UACzB,MAAO,CAAC,KAAM,GAElB,IAAKjG,EAAS7E,YAAYC,GAAG6K,UACzB,MAAO,CAAC,KAAM,GAGtB,IAAK,IAAI7K,EAAI,EAAGA,EAAI,GAAIA,IAChB2C,EAAO3C,GAAK,GACZuJ,EAAmB3E,EAAU+D,EAAQ3I,GAAI4I,EAAQ5I,GAAI2C,EAAQ6G,GAGrE,IAAK,IAAIxJ,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACrB2C,EAAO3C,GAAK,IACZ4E,EAASjF,MAAMK,GAAGjB,MAAQkL,OAAOtH,EAAO3C,KAE5C4E,EAASjF,MAAMK,GAAGf,aAAa4E,QAC/B,IAAK,IAAI9E,EAAQ,EAAGA,GAAS,EAAGA,IACxBqH,EAAYoD,EAAWxJ,GAAIjB,IAC3B6F,EAASjF,MAAMK,GAAGf,aAAawC,IAAIwI,OAAOlL,IAItD,OA/IgB,SAAlB+L,EAAmBvG,EAAmBE,EAAuB9B,EAAuB6G,GAMtF,IAJA,IAAIuB,EAAY,IACZrF,GAAQ,EACRqE,GAAU,EACViB,EAAY,EACPhL,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAExB,GAAmC,OAA/BuE,EAAMzE,YAAYE,GAAGjB,MAAgB,CAGrC,IAFA,IAAIkM,EAAO,EACPC,EAAO,EACF5L,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,IAAM8B,EAASM,EAAS1B,EAAGV,GAC3B,GAAuB,IAAnBqD,EAAOvB,GAAe,CACtB,IAAM+J,EAAY3B,EAAWpI,GACzBgF,EAAY+E,EAAW,KAAIF,GAAQ,GACnC7E,EAAY+E,EAAW,KAAID,GAAQ,IAG3CD,EAAO,GAAKA,EAAOF,IACnBA,EAAYE,EACZvF,GAAQ,EACRqE,EAAS/J,EACTgL,EAAY,GAEZE,EAAO,GAAKA,EAAOH,IACnBA,EAAYG,EACZxF,GAAQ,EACRqE,EAAS/J,EACTgL,EAAY,GAIpB,GAAmC,OAA/BzG,EAAMxE,YAAYC,GAAGjB,MAAgB,CAGrC,IAFA,IAAIkM,EAAO,EACPC,EAAO,EACF7L,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,IAAM+B,EAASM,EAASrC,EAAKW,GAC7B,GAAuB,IAAnB2C,EAAOvB,GAAe,CACtB,IAAM+J,EAAY3B,EAAWpI,GACzBgF,EAAY+E,EAAW,KAAIF,GAAQ,GACnC7E,EAAY+E,EAAW,KAAID,GAAQ,IAG3CD,EAAO,GAAKA,EAAOF,IACnBA,EAAYE,EACZvF,GAAQ,EACRqE,EAAS/J,EACTgL,EAAY,GAEZE,EAAO,GAAKA,EAAOH,IACnBA,EAAYG,EACZxF,GAAQ,EACRqE,EAAS/J,EACTgL,EAAY,IAKxB,GAAIjB,EAAS,EAET,OAAOD,EAAQvF,EAAOE,EAAS9B,EAAQ6G,GAK3C,IAFA,IAAIW,EAAgB,KAChBC,EAAe,EACVpK,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMoB,EAASsE,EAAQhE,EAASqI,EAAQ/J,GAAK0B,EAAS1B,EAAG+J,GAEzD,GAAuB,IAAnBpH,EAAOvB,IAAiBgF,EAAYoD,EAAWpI,GAAS4J,GAAY,CACpE,IAAMX,EAAaxF,IAAEyF,MAAM3H,GACrB4H,EAAiB1F,IAAEyF,MAAMd,GAE/B7G,EAAOvB,GAAU4J,EACjB,IALoE,EAK9DR,EAAcjG,EAAMlC,gBAAgBjB,EAAQqD,EAAQlD,aALU,cAM7CiJ,GAN6C,IAMpE,2BAAoC,CAAC,IAA5BlI,EAA2B,QAChCkH,EAAWlH,GAAcgE,EAAkBkD,EAAWlH,GAAa0I,IAPH,8BAShEvG,EAAQlD,YAAYoE,UACpB4D,EAAmBhF,EAAOoE,EAAQvH,GAASwH,EAAQxH,GAASuB,EAAQ6G,GAVJ,MAY9CsB,EAAgBvG,EAAOE,EAAS9B,EAAQ6G,GAZM,mBAY/DQ,EAZ+D,KAYrDS,EAZqD,KAapE,GAAIA,EAAM,IACgB,OAAlBN,IACAA,EAAgBH,IAEpBI,GAAgBK,IACI,GAChB,MAIR9H,EAAS0H,EACTb,EAAae,GAGrB,MAAO,CAACJ,EAAeC,GA+CZU,CAAgBlG,EAAUH,EAAS9B,EAAQ6G,GAGtD,OAAOM,EAAQlF,EAAUH,EAAS9B,EAAQ6G,ICxQ/B4B,E,oLAtHP,GAAI5L,KAAK6L,MAAMjL,KAAKrB,MAChB,OACI,0BAAMuM,UAAU,mBACX9L,KAAK6L,MAAMjL,KAAKrB,S,8CAOTA,GACpB,OAAOS,KAAK6L,MAAMzL,mBAAqBb,IAAUS,KAAK6L,MAAMzL,oB,+CAGtC,IAAD,OACrB,IAAIJ,KAAK6L,MAAMjL,KAAKrB,MAApB,CAIA,IAAMwM,EAAejL,MAAMC,KAAKf,KAAK6L,MAAMjL,KAAKpB,cAC3CwM,OACA9K,KAAI,SAAC3B,GACF,IAAM0M,EAAU,EAAKC,wBAAwB3M,GAAS,WAAa,GACnE,OACI,0BACIuM,UAAWG,EACXE,IAAK,UAAY,EAAKN,MAAMjL,KAAKtB,GAAK,IAAMC,GAE3CA,MAIjB,OACI,0BAAMuM,UAAU,qBACXC,M,+CAKa,IAAD,OACrB,IAAI/L,KAAK6L,MAAMjL,KAAKrB,MAApB,CAIA,IAAMwM,EAAejL,MAAMC,KAAKf,KAAK6L,MAAMjL,KAAKnB,cAC3CuM,OACA9K,KAAI,SAAC3B,GACF,IAAM0M,EAAU,EAAKC,wBAAwB3M,GAAS,WAAa,GACnE,OACI,0BACIuM,UAAWG,EACXE,IAAK,UAAY,EAAKN,MAAMjL,KAAKtB,GAAK,IAAMC,GAE3CA,MAIjB,OACI,0BAAMuM,UAAU,qBACXC,M,+BAMT,IAAIE,EAAU,CAAC,QAqCf,OAlCIjM,KAAK6L,MAAMjL,KAAKwL,eAChBH,EAAQxL,KAAK,cAEbT,KAAK6L,MAAMjL,KAAKyL,gBAChBJ,EAAQxL,KAAK,eAIbT,KAAK6L,MAAMjL,KAAK0L,eAChBL,EAAQxL,KAAK,cAEbT,KAAK6L,MAAMjL,KAAK2L,gBAChBN,EAAQxL,KAAK,eAEbT,KAAK6L,MAAMjL,KAAK4L,cAChBP,EAAQxL,KAAK,aAEbT,KAAK6L,MAAMjL,KAAK6L,iBAChBR,EAAQxL,KAAK,gBAIbT,KAAK6L,MAAMjL,KAAKlB,SAChBuM,EAAQxL,KAAK,YACNT,KAAKkM,wBAAwBlM,KAAK6L,MAAMjL,KAAKrB,OACpD0M,EAAQxL,KAAK,YACNT,KAAK6L,MAAMjL,KAAKjB,WACvBsM,EAAQxL,KAAK,cACNT,KAAK6L,MAAMjL,KAAKb,QACvBkM,EAAQxL,KAAK,SACNT,KAAK6L,MAAMjL,KAAKhB,OACvBqM,EAAQxL,KAAK,SAIb,yBACIqL,UAAWG,EAAQS,KAAK,KACxBC,QAAS3M,KAAK6L,MAAMc,QACpBC,YAAa5M,KAAK6L,MAAMe,YACxBC,YAAa7M,KAAK6L,MAAMgB,YACxBV,IAAKnM,KAAK6L,MAAMjL,KAAKtB,IAEpBU,KAAK8M,sBACL9M,KAAK+M,yBACL/M,KAAKgN,8B,GAlHHC,IAAMC,W,wBCHnBC,E,mLAEE,GAAKnN,KAAK6L,MAAMuB,cAA2C,OAA3BpN,KAAK6L,MAAMtM,MAAMA,OAA6C,IAA3BS,KAAK6L,MAAMtM,MAAMA,MAApF,CAIA,IAAM8N,EAAOtG,EAAU/G,KAAK6L,MAAMtM,MAAMA,OAAO2B,KAAI,SAAC0I,GAChD,OACI,6BACKA,EAAI8C,KAAK,SAIhBY,EACF,kBAACC,EAAA,EAAD,CAASjO,GAAE,2BAAsBU,KAAK6L,MAAMtM,MAAMD,KAC9C,6BAAM+N,IAGd,OACI,yBAAKvB,UAAU,qBACX,kBAAC0B,EAAA,EAAD,CACIC,UAAU,OACVC,QAASJ,GACT,kBAAC,IAAD,W,+BAOZ,IAAIK,EAA2C,OAA3B3N,KAAK6L,MAAMtM,MAAMA,WAAkB0D,EAAYjD,KAAK6L,MAAMtM,MAAMA,MAEhF0M,EAAU,CAAC,iBAUf,OATIjM,KAAK6L,MAAMtM,MAAMG,SACjBuM,EAAQxL,KAAK,YACNT,KAAK6L,MAAMtM,MAAMQ,SACxBkM,EAAQxL,KAAK,SAEbT,KAAK6L,MAAMtM,MAAMK,OACjBqM,EAAQxL,KAAK,SAIb,yBACIkM,QAAS3M,KAAK6L,MAAMc,QACpBb,UAAWG,EAAQS,KAAK,MAExB,yBAAKZ,UAAU,mBACV6B,GAEJ3N,KAAK4N,0B,GAlDKX,IAAMC,WAoElBW,EANGC,aANM,SAACC,GACrB,MAAO,CACHX,aAAcW,EAAM9I,QAAQO,eAAe4H,gBAUpCS,CAAUV,GCgBVa,E,yKAtFAxN,GAAY,IAAD,OAClB,OACI,kBAAC,EAAD,CACII,KAAMZ,KAAK6L,MAAM9G,MAAM5E,MAAMK,GAC7BmM,QAAS,SAACsB,GAAD,OAAO,EAAKpC,MAAMc,QAAQsB,EAAGzN,IACtCoM,YAAa,SAACqB,GAAD,OAAO,EAAKpC,MAAMe,YAAYqB,EAAGzN,IAC9CqM,YAAa,kBAAM,EAAKhB,MAAMgB,YAAYrM,IAC1C2L,IAAK1B,OAAOjK,GACZJ,kBAAmBJ,KAAK6L,MAAM9G,MAAM3E,sB,yCAK7B8F,EAAgB5G,EAAY6M,GAAc,IAAD,OAClD5M,EAAS2G,EAASlG,KAAK6L,MAAM9G,MAAMzE,YAAYhB,GAAMU,KAAK6L,MAAM9G,MAAMxE,YAAYjB,GACxF,OACI,kBAAC,EAAD,CACIC,MAAOA,EACP4M,IAAKA,EACLQ,QAAS,SAACsB,GAAD,OAAO,EAAKpC,MAAMqC,iBAAiBD,EAAG/H,EAAO5G,Q,gDAM9D,OACI,yBAAKwM,UAAU,oB,gCAIblI,GAAgB,IAAD,OACfuK,EAAuB,EAARvK,EACfzD,EAAQ,YAAIW,MAAM,GAAGsN,QAAQlN,KAAI,SAAA/B,GAAC,OAAI,EAAKkP,WAAWF,EAAehP,MAEvEmP,EAAe,KAMnB,OALItO,KAAK6L,MAAM9J,YAAYoE,WACvBmI,EAAetO,KAAKuO,oBAChB,EAAM3K,EADK,uBACkBA,KAIjC,yBAAKkI,UAAU,MAAMK,IAAKgC,GACrBG,EACAnO,K,0CAKQ,IAAD,OACVqO,EAAgB,YAAI1N,MAAM,GAAGsN,QAAQlN,KACvC,SAAA/B,GAAC,OAAI,EAAKoP,oBAAmB,EAAOpP,EAA/B,uBAAkDA,OAE3D,OACI,yBAAK2M,UAAU,OACV9L,KAAKyO,0BACLD,K,+BAKH,IAAD,OACDE,EAAc,KACd1O,KAAK6L,MAAM9J,YAAYoE,WACvBuI,EAAc1O,KAAK2O,qBAGvB,IAAMC,EAAO,YAAI9N,MAAM,GAAGsN,QAAQlN,KAAI,SAAA/B,GAAC,OAAI,EAAK0P,UAAU1P,MAC1D,OACI,6BACKuP,EACAE,O,GAvEG3B,IAAMC,W,gBCApB4B,G,6LAC8B,IAAD,OAC3B,OAAI9O,KAAK6L,MAAM1F,SAEP,kBAAC4I,EAAA,EAAKC,MAAN,CACIzK,KAAK,WACLjF,GAAG,yBACH2P,MAAM,0BACNC,QAASlP,KAAK6L,MAAMuB,aACpB+B,SAAU,kBAAM,EAAKtD,MAAMuD,cAAX,2BACT,EAAKvD,OADI,IAEZuB,cAAe,EAAKvB,MAAMuB,mBAKnC,O,+BAGD,IAAD,OACL,OACI,yBAAK9N,GAAG,mBACJ,+CACA,kBAACyP,EAAA,EAAKC,MAAN,CACIzK,KAAK,WACLjF,GAAG,gCACH2P,MAAM,6BACNC,QAASlP,KAAK6L,MAAMpG,oBACpB0J,SAAU,kBAAM,EAAKtD,MAAMuD,cAAX,2BACT,EAAKvD,OADI,IAEZpG,qBAAsB,EAAKoG,MAAMpG,0BAGzC,kBAACsJ,EAAA,EAAKC,MAAN,CACIzK,KAAK,WACLjF,GAAG,sCACH2P,MAAM,6BACNC,QAASlP,KAAK6L,MAAMlG,yBACpBwJ,SAAU,kBAAM,EAAKtD,MAAMuD,cAAX,2BACT,EAAKvD,OADI,IAEZlG,0BAA2B,EAAKkG,MAAMlG,+BAG9C,kBAACoJ,EAAA,EAAKC,MAAN,CACIzK,KAAK,WACLjF,GAAG,wBACH2P,MAAM,sCACNC,QAASlP,KAAK6L,MAAMwD,YACpBF,SAAU,kBAAM,EAAKtD,MAAMuD,cAAX,2BACT,EAAKvD,OADI,IAEZwD,aAAc,EAAKxD,MAAMwD,kBAGhCrP,KAAKsP,oC,GArDOrC,IAAMC,WAmEpBW,GAJGC,aAJM,SAACC,GACrB,OAAO,2BAAIA,EAAM9I,QAAQO,gBAAmBuI,EAAM9I,QAAQlD,eAGnB,CAAEqN,cClDhB,SAAC5J,GAC1B,MAAO,CACHjB,KVa6B,wBUZ7BK,QAASY,KDmDFqI,CAAUiB,IEhEnBS,G,0KACUN,EAAY3P,EAAYkQ,GAChC,OACI,kBAAChC,EAAA,EAAD,CACIC,UAAU,QACVC,QAAS,kBAACH,EAAA,EAAD,CAASjO,GAAIA,GAAKkQ,IAE3B,8BACKP,EADL,OAEI,kBAAC,IAAD,U,+BAMN,IAAD,OACL,OACI,yBAAK3P,GAAG,aACJ,yCACA,kBAACyP,EAAA,EAAKC,MAAN,CACIzK,KAAK,WACLjF,GAAG,uBACH2P,MAAOjP,KAAKyP,YAAY,cAAe,sBAAuB,yFAC9DP,QAASlP,KAAK6L,MAAMvJ,WACpB6M,SAAU,kBAAM,EAAKtD,MAAM6D,kBAAX,2BACT,EAAK7D,OADI,IAEZvJ,YAAa,EAAKuJ,MAAMvJ,iBAGhC,kBAACyM,EAAA,EAAKC,MAAN,CACIzK,KAAK,WACLjF,GAAG,qBACH2P,MAAOjP,KAAKyP,YAAY,YAAa,oBAAqB,uFAC1DP,QAASlP,KAAK6L,MAAMnJ,SACpByM,SAAU,kBAAM,EAAKtD,MAAM6D,kBAAX,2BACT,EAAK7D,OADI,IAEZnJ,UAAW,EAAKmJ,MAAMnJ,eAG9B,kBAACqM,EAAA,EAAKC,MAAN,CACIzK,KAAK,WACLjF,GAAG,oBACH2P,MAAOjP,KAAKyP,YAAY,WAAY,mBAAoB,qGACxDP,QAASlP,KAAK6L,MAAM1F,SACpBgJ,SAAU,kBAAM,EAAKtD,MAAM6D,kBAAX,2BACT,EAAK7D,OADI,IAEZ1F,UAAW,EAAK0F,MAAM1F,oB,GA9CpB8G,IAAMC,WA8DjBW,GAJGC,aAJM,SAACC,GACrB,OAAO,eAAIA,EAAM9I,QAAQlD,eAGc,CAAE2N,kBDzCZ,SAAC3N,GAC9B,MAAO,CACHwC,KVO+B,0BUN/BK,QAAS7C,KC0CF8L,CAAU0B,IC7DnBI,G,0KAEE,GAAK3P,KAAK6L,MAAM+D,IAGhB,OAAO,uBAAGC,KAAM7P,KAAK6L,MAAM+D,KAApB,U,oCAGGtQ,EAAYkQ,GACtB,OACI,kBAACjC,EAAA,EAAD,CAASjO,GAAIA,GACRkQ,K,+BAMT,OACI,kBAACT,EAAA,EAAD,KACI,yBAAKjD,UAAU,IACX,kBAACgE,EAAA,EAAD,CAAQnD,QAAS3M,KAAK6L,MAAMkE,eAA5B,UADJ,OAKI,kBAACD,EAAA,EAAD,CACInD,QAAS3M,KAAK6L,MAAMmE,YACpBlE,UAAU,iBAFd,QALJ,OAYI,kBAACgE,EAAA,EAAD,CACInD,QAAS3M,KAAK6L,MAAMoE,YACpBnE,UAAU,iBAFd,SAOJ,6BACA,kBAAC,GAAD,MACA,6BACA,kBAAC,GAAD,MACA,6BACA,oCACA,kBAAC0B,EAAA,EAAD,CACIC,UAAU,MACVC,QAAS1N,KAAKkQ,cAAc,sBAAuB,4CAEnD,kBAACJ,EAAA,EAAD,CACInD,QAAS3M,KAAK6L,MAAMsE,mBACpBrE,UAAU,iBAFd,2BA9BR,OAsCI,kBAACgE,EAAA,EAAD,CACInD,QAAS3M,KAAK6L,MAAMuE,MACpBtE,UAAU,iBAFd,SAMA,6BACA,kBAACgE,EAAA,EAAD,CACInD,QAAS3M,KAAK6L,MAAMwE,YACpBvE,UAAU,iBAFd,WA7CJ,OAoDK9L,KAAKsQ,iB,GAtEArD,IAAMC,WA0FbW,GAXGC,aAHM,SAACC,GACrB,MAAO,CAAE6B,IAAK7B,EAAMwC,WAaT1C,CAAU8B,ICxEnBa,G,kLAEMxQ,KAAK6L,MAAM4E,SACXzQ,KAAK6L,MAAM6E,cAActP,KAAKO,MAAMgP,OAAOC,KAAK5Q,KAAK6L,MAAM4E,a,+BAIzD,IAAD,OACL,OACI,yBACII,UAAW,SAAC5C,GAAD,OAAO,EAAKpC,MAAMiF,QAAQ,EAAKjF,MAAM9G,MAAO,EAAK8G,MAAM5G,QAAS,EAAK4G,MAAMpH,QAASwJ,IAC/F8C,SAAU,EACVjF,UAAU,YACVkF,UAAW,kBAAM,EAAKnF,MAAMoF,QAAQ,EAAKpF,MAAM9G,SAE/C,4BAAI,uBAAG8K,KAAK,WAAR,gBACJ,yBAAK/D,UAAU,OACX,yBAAKA,UAAU,UACX,kBAAC,EAAD,CACI/G,MAAO/E,KAAK6L,MAAM9G,MAClBhD,YAAa/B,KAAK6L,MAAM5G,QAAQlD,YAChC4K,QAAS,SAACsB,EAAG3O,GAAJ,OAAW,EAAKuM,MAAM7G,OAAO,EAAK6G,MAAM9G,MAAO,EAAK8G,MAAM5G,QAAS3F,GAAK2O,EAAEiD,UACnFhD,iBAAkB,SAACD,EAAG/H,EAAO5G,GAAX,OAAkB,EAAKuM,MAAM5F,eAAe,EAAK4F,MAAM9G,MAAO,EAAK8G,MAAM5G,QAASiB,EAAO5G,IAC3GsN,YAAa,SAACqB,EAAG3O,GAAJ,OAAW,EAAKuM,MAAMsF,UAAU,EAAKtF,MAAM9G,MAAO,EAAK8G,MAAM5G,QAAS3F,GAAK2O,EAAEiD,UAC1FrE,YAAa,SAACvN,GAAD,OAAQ,EAAKuM,MAAMuF,UAAU,EAAKvF,MAAM9G,MAAO,EAAK8G,MAAM5G,QAAS3F,OAGxF,yBAAKwM,UAAU,UACX,kBAAC,GAAD,CACIiE,cAAe,kBAAM,EAAKlE,MAAMwF,OAAO,EAAKxF,MAAM9G,MAAO,EAAK8G,MAAM5G,UACpE+K,YAAa,kBAAM,EAAKnE,MAAMhH,KAAK,EAAKgH,MAAMpH,UAC9CwL,YAAa,kBAAM,EAAKpE,MAAMrH,KAAK,EAAKqH,MAAMpH,UAC9C0L,mBAAoB,kBAAM,EAAKtE,MAAMyF,WAAW,EAAKzF,MAAM9G,MAAO,EAAK8G,MAAM5G,UAC7EmL,MAAO,kBAAM,EAAKvE,MAAMuE,MAAM,EAAKvE,MAAM9G,MAAO,EAAK8G,MAAM5G,UAC3DoL,YAAa,kBAAM,EAAKxE,MAAMwE,YAAY,EAAKxE,MAAM9G,MAAO,EAAK8G,MAAM5G,mB,GAlChFgI,IAAMC,WA0EVW,GAvBGC,aAPM,SAACC,EAAkBwD,GACvC,OAAO,2BACAxD,GADP,IAEI0C,QAASc,EAASC,MAAMC,OAAOhB,YAII,CAEvCjM,OACAK,OAGA6L,cXtEyB,SAACgB,GAE1B,IADA,IAAM3M,EAAQ,IAAI7E,EACTM,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAEX,MADAkR,EAAavO,OAAO3C,KAE9BuE,EAAM5E,MAAMK,GAAGjB,MAAQmS,EAAavO,OAAO3C,GAC3CuE,EAAM5E,MAAMK,GAAGT,SAAU,GAGjC,GAAqC,OAAjC2R,EAAaC,gBACb,IAAK,IAAInR,EAAI,EAAGA,EAAI,EAAGA,IACnBuE,EAAMzE,YAAYE,GAAGjB,MAAQmS,EAAaC,gBAAgBnR,GAC1DuE,EAAMzE,YAAYE,GAAGT,SAAU,EAGvC,GAAqC,OAAjC2R,EAAaE,gBACb,IAAK,IAAIpR,EAAI,EAAGA,EAAI,EAAGA,IACnBuE,EAAMxE,YAAYC,GAAGjB,MAAQmS,EAAaE,gBAAgBpR,GAC1DuE,EAAMxE,YAAYC,GAAGT,SAAU,EAGvC,MAAO,CACHwE,KF1B8B,yBE2B9BK,QAAS,CACLG,MAAOA,EACPhD,YAAa2P,EAAa3P,eW8ClCsO,YXzCuB,SAACtL,EAAmBE,GAC3C,IAAM4M,EAAY,CACd1O,OAAQ4B,EAAM5E,MAAMe,KAAI,SAAAN,GACpB,OAAIA,EAAKrB,MAAcqB,EAAKrB,MAChB,OACbmN,KAAK,IACRiF,gBAAkB1M,EAAQlD,YAAYoE,SAAYpB,EAAMzE,YAAYY,KAAI,SAAAN,GAAI,OAAIA,EAAKrB,SAAS,KAC9FqS,gBAAkB3M,EAAQlD,YAAYoE,SAAYpB,EAAMxE,YAAYW,KAAI,SAAAN,GAAI,OAAIA,EAAKrB,SAAS,KAC9FwC,YAAakD,EAAQlD,aAEzB,MAAO,CACHwC,KF9C2B,sBE+C3BK,QAAS,CACLgL,IAAKe,OAAOmB,SAASC,OAASpB,OAAOmB,SAASE,SAAW,KAAOrB,OAAOsB,KAAK7Q,KAAKC,UAAUwQ,OW6BnGf,QXuLmB,SAAC/L,EAAmBE,EAAuBR,EAAuBwJ,GACrF,IAAIiE,IAAYjE,EAAEkE,SACdC,IAAWnE,EAAEiD,QAGjB,GAAIjD,EAAEoE,SAAWC,KAAiBrE,EAAEoE,SAAWC,IAAe,CAC1D,GAAIrE,EAAEoE,UAAYC,KAAiBvN,EAAMwN,cAAe,CACpD,IAAMhT,EAAQkL,OAAOC,aAAauD,EAAEoE,SACpC,OAAIH,EA9EW,SAACnN,EAAmBb,GAC3C,IAAIkB,EAAWC,IAAEC,UAAUP,GAG3B,OAFAK,EAASoN,kCAAkCtO,GAEpCY,EAAYM,GA2EAqN,CAAmB1N,EAAOxF,GAC1B6S,GACPnE,EAAEyE,iBA1ES,SAAC3N,EAAmBb,GAC3C,IAAIkB,EAAWC,IAAEC,UAAUP,GAE3B,OADAK,EAASuN,kCAAkCzO,GACpCY,EAAYM,GAwEAwN,CAAmB7N,EAAOxF,IA7HhC,SAACwF,EAAmBE,EAAuBf,GACxD,IAAIkB,EAAWC,IAAEC,UAAUP,GAQ3B,GANAK,EAAS7D,iBACT6D,EAASyN,wBACL3O,EACAe,EAAQlD,YACRkD,EAAQO,eAAe6J,aAEvBpK,EAAQO,eAAeG,yBAA0B,CACjDP,EAAShF,kBAAoB,KAE7B,IAAMwF,EAAiBR,EAASS,oBAChC,GAA4B,IAAxBD,EAAeE,KAAY,CAC3B,IAAMC,EAAgBH,EAAezC,SAAS6C,OAAOzG,MACrD6F,EAAShF,kBAAoB2F,GAGrC,OAAOjB,EAAYM,GA6GA0N,CAAS/N,EAAOE,EAAS1F,GAGxC,OAAIwF,EAAMgO,sBA7GO,SAAChO,EAAmBb,GACzC,IAAIkB,EAAWC,IAAEC,UAAUP,GAS3B,OAPAK,EAAS7D,iBACT,sBAAI6D,EAAS9E,aAAb,YAA6B8E,EAAS7E,cACjCrB,QAAO,SAAA0B,GAAI,OAAIA,EAAKlB,YACpBiB,SAAQ,SAAAC,GACc,OAAfA,EAAKrB,MAAgBqB,EAAKrB,MAAQ2E,EAC7BtD,EAAKrB,MAAQ,KAAIqB,EAAKrB,MAAqB,GAAbqB,EAAKrB,MAAa2E,MAE1DY,EAAYM,GAoGJ4N,CAAiBjO,GAAQ0F,OAAOC,aAAauD,EAAEoE,UAEnD/N,EAGX,OAAQ2J,EAAEoE,SACN,KAAKC,IACD,OAxGO,SAACvN,GAChB,IAAIK,EAAWC,IAAEC,UAAUP,GAK3B,OAHAK,EAAS7D,iBACT6D,EAAS6N,qBAEFnO,EAAYM,GAkGJ8N,CAAWnO,GACtB,KAAKuN,IAED,OADArE,EAAEyE,iBAvCS,SAAC3N,GACpB,IAAIK,EAAWC,IAAEC,UAAUP,GAQ3B,OANAK,EAAS7D,iBACT6D,EAAS6N,qBAET7N,EAAS+N,mCACT/N,EAASgO,mCAEFtO,EAAYM,GA+BJiO,CAAetO,GAC1B,KAAKuN,IACD,OAAOjM,EAAKtB,EAAOE,EAAS,EAAI,GACpC,KAAKqN,IACD,OAAOjM,EAAKtB,EAAOE,GAAU,EAAG,GACpC,KAAKqN,IACD,OAAOjM,EAAKtB,EAAOE,EAAS,GAAI,GACpC,KAAKqN,IACD,OAAOjM,EAAKtB,EAAOE,EAAS,EAAG,GACnC,KAAKqN,IACD,OA5OK,SAACvN,GACd,IAAIK,EAAWC,IAAEC,UAAUP,GAI3B,OAHAK,EAAS3D,qBACT2D,EAAS5D,sBACT4D,EAAShF,kBAAoB,KACtB0E,EAAYM,GAuOJkO,CAASvO,GACpB,KAAKuN,IACL,KAAKA,IACD,OAAOzN,EAAKJ,GAChB,KAAK6N,IACL,KAAKA,IACD,OAAO9N,EAAKC,GAGpB,OAAOH,GWrOP6M,UXsDqB,SAACpM,EAAmBE,EAAuBrD,EAAgBsD,GAChF,OAAOF,EAAOD,EAAOE,EAASrD,EAAQsD,GAAgB,IWtDtDkM,UXyDqB,SAACrM,EAAmBE,EAAuBrD,GAChE,OAAKmD,EAAM1E,gBAGJ2E,EAAOD,EAAOE,EAASrD,GAAQ,GAF3B0C,GW1DX2M,QX+DmB,SAAClM,GACpB,OAAOD,EAAYyO,OAAOC,OAAOzO,EAAO,CAAE1E,iBAAiB,MW/D3D2E,SACAiB,iBAGAqL,WHlFsB,SAACvM,EAAmBE,GAC1C,IAAIG,EAAWC,IAAEC,UAAUP,GAE3B,OADAK,EAAS+F,sBAAsBlG,EAAQlD,aAChC+C,EAAYM,IGgFnBiM,OH/DkB,SAACtM,EAAmBE,GACtC,IAAIG,EAAWC,IAAEC,UAAUP,GAC3BK,EAAS3D,qBACT2D,EAAS5D,sBACT4D,EAAS7D,iBACT,IAAIkS,EAAiBrO,EAASsO,kBAAkBzO,EAAQlD,aACxDqD,EAASuO,UAAUF,GAInB,IAFA,IAAIG,EAAWH,EAAe3N,KAAO,EAE5BtF,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,GAAK4E,EAAS9E,YAAYE,GAAG6K,UAGtB,CACH,IAAMwI,EAAOzO,EAAS9E,YAAYE,GAAGjB,MAC/BH,EAAMgG,EAAS0O,kBAAkBtT,GAC1B,OAATqT,GAAyB,OAARzU,GAAgByU,IAASzU,IAC1CwU,GAAW,EACXxO,EAAS9E,YAAYE,GAAGZ,OAAQ,QAPpCgU,GAAW,EACXxO,EAAS9E,YAAYE,GAAGZ,OAAQ,EAUpC,GAAKwF,EAAS7E,YAAYC,GAAG6K,UAGtB,CACH,IAAMwI,EAAOzO,EAAS7E,YAAYC,GAAGjB,MAC/BH,EAAMgG,EAAS2O,kBAAkBvT,GAC1B,OAATqT,GAAyB,OAARzU,GAAgByU,IAASzU,IAC1CwU,GAAW,EACXxO,EAAS7E,YAAYC,GAAGZ,OAAQ,QAPpCgU,GAAW,EACXxO,EAAS7E,YAAYC,GAAGZ,OAAQ,EAYxC,OADAoU,MAAMJ,EAAW,iBAAmB,qBAC7B9O,EAAYM,IG2BnBgL,MHxBiB,SAACrL,EAAmBE,GAAwC,IAAD,EAC7CiG,EAAWnG,EAAOE,GAD2B,mBACvEG,EADuE,KAC7DwF,EAD6D,KAO5E,OALIA,GAAgB,EAChBoJ,MAAM,kBAAoBpJ,EAAe,eAEzCoJ,MAAM,SAAWpJ,EAAe,cAEnB,OAAbxF,EACON,EAAYM,GAEhBd,IGmBIuJ,CAAU2C,IC1FZyD,I,MAIT,aAAe,yBAHfzO,oBAGc,OAFdzD,iBAEc,EACV/B,KAAKwF,eAAiB,CAClBC,qBAAqB,EACrBE,0BAA0B,EAC1B0J,aAAa,EACbjC,cAAc,GAElBpN,KAAK+B,YAAc,CACfO,YAAY,EACZI,UAAU,EACVyD,UAAU,K,oBCzBT+N,GAIT,aAAe,yBAHfxP,YAGc,OAFdpF,QAEc,EACVU,KAAK0E,OAAS,GACd1E,KAAKV,GAAK,EAEV,IAAMyF,EAAQ,IAAI7E,EAClBF,KAAK0E,OAAOjE,KAAKsE,EAAMoP,cCIhBC,eAAgB,CAC3BrP,MCPwB,WAAoD,IAAnDA,EAAkD,uDAA1C,IAAI7E,EAAcmU,EAAwB,uCAC3E,GjBA+B,wBiBA3BA,EAAO9P,KACP,OAAO8P,EAAOzP,QAAQG,MAE1B,GjBqCuB,gBiBrCnBsP,EAAO9P,KAAsB,CAC7B,IAAMQ,EAAQ,IAAI7E,EAElB,OADA6E,EAAMuP,KAAKD,EAAOzP,QAAQtD,YACnByD,EAEX,GjB+BuB,gBiB/BnBsP,EAAO9P,KAAsB,CAC7B,IAAMQ,EAAQ,IAAI7E,EAElB,OADA6E,EAAMuP,KAAKD,EAAOzP,QAAQtD,YACnByD,EAEX,MjBXkC,2BiBW9BsP,EAAO9P,KACA8P,EAAOzP,QAAQG,MAGnBA,GDVPE,QET0B,WAAsE,IAArEA,EAAoE,uDAA5C,IAAIgP,GAAgBI,EAAwB,uCAC/F,MlB0BiC,0BkB1B7BA,EAAO9P,KACA,2BAAIU,GAAX,IAAoBO,eAAgB6O,EAAOzP,UlB0BZ,4BkBxB/ByP,EAAO9P,KACA,2BAAIU,GAAX,IAAoBlD,YAAasS,EAAOzP,UlBDV,2BkBG9ByP,EAAO9P,KACA,2BAAIU,GAAX,IAAoBlD,YAAasS,EAAOzP,QAAQ7C,cAE7CkD,GFAPR,QGR0B,WAAwD,IAAvDA,EAAsD,uDAA5C,IAAIyP,GAAgBG,EAAwB,uCACjF,GnBCkC,2BmBD9BA,EAAO9P,KACP,MAAO,CACHG,OAAQ,CAAC2P,EAAOzP,QAAQG,MAAMoP,aAC9B7U,GAAI,GAGZ,GnBP+B,wBmBO3B+U,EAAO9P,KAA8B,CACrC,IAAMjD,EAAa+S,EAAOzP,QAAQG,MAAMoP,YAaxC,OATI7S,IAAemD,EAAQC,OAAOD,EAAQnF,MAGtCmF,EAAQC,OAASD,EAAQC,OAAOf,MAAM,EAAGc,EAAQnF,GAAK,GAGtDmF,EAAQC,OAAOjE,KAAKa,GACpBmD,EAAQnF,IAAM,GAEXmF,EAEX,MnBiBuB,gBmBjBnB4P,EAAO9P,MACPgQ,KAAO9P,EAAQnF,GAAK,GACb,2BAAImF,GAAX,IAAoBnF,GAAImF,EAAQnF,GAAK,KnBclB,gBmBZnB+U,EAAO9P,MACPgQ,KAAO9P,EAAQnF,GAAK,EAAImF,EAAQC,OAAOC,QAChC,2BAAIF,GAAX,IAAoBnF,GAAImF,EAAQnF,GAAK,KAElCmF,GHtBP+P,YAZuB,WAA0B,IAAzBA,EAAwB,wDAChD,OAAOA,GAYPpU,kBAT6B,WAA+B,IAA9BA,EAA6B,uDAAT,KAClD,OAAOA,GASPmQ,QInB0B,WAA0C,IAAzCA,EAAwC,uDAA9B,KAAM8D,EAAwB,uCACnE,MpBQ+B,wBoBR3BA,EAAO9P,KACA8P,EAAOzP,QAAQgL,IAEnBW,KCKLkE,GAAQC,YACVC,GACChE,OAAeiE,8BAAiCjE,OAAeiE,gCAGpEC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,IACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOM,KAAK,aAAaC,UAAWxE,OAG5CyE,SAASC,eAAe,W","file":"static/js/main.6232c4f0.chunk.js","sourcesContent":["export const set_intersection = (a: Set<any>, b: Set<any>): Set<any> => {\n    return new Set([...a].filter(x => b.has(x)));\n}\n\nexport const set_difference = (a: Set<any>, b: Set<any>): Set<any> => {\n    return new Set([...a].filter(x => !b.has(x)));\n}\n","export type CellValue = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | null;\n\nexport class CellModel {\n    value: CellValue;\n    cornerValues: Set<CellValue>;\n    centerValues: Set<CellValue>;\n    selected: boolean;\n    restricted: boolean;\n    error: boolean;\n    row: number;\n    col: number;\n    id: number;\n    isFixed: boolean | null;\n\n    constructor(id: number) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n        this.isFixed = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop(): boolean {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom(): boolean {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft(): boolean {\n        return this.col % 3 === 0;\n    }\n    isRegionRight(): boolean {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop(): boolean {\n        return this.row === 0;\n    }\n    isBoardBottom(): boolean {\n        return this.row === 8;\n    }\n    isBoardLeft(): boolean {\n        return this.col === 0;\n    }\n    isBoardRight(): boolean {\n        return this.col === 8;\n    }\n}\n","export class SandwichCellModel {\n    value: number | null;\n    selected: boolean;\n    error: boolean;\n    isFixed: boolean;\n    id: string;\n\n    constructor(id: string) {\n        this.id = id;\n        this.value = null;\n        this.selected = false;\n        this.error = false;\n        this.isFixed = false;\n    }\n\n    isValid(): boolean {\n        return this.value === null\n            || this.value === 0\n            || this.value === 35\n            || (2 <= this.value && this.value <= 33);\n    }\n};","import { set_difference, set_intersection } from '../utils/set';\nimport { CellModel, CellValue } from './cell';\nimport { GameOptions } from './control';\nimport { SandwichCellModel } from './sandwichCell';\n\nclass BoardModel {\n    cells: Array<CellModel>;\n    highlightMatching: CellValue;\n    multiSelectMode: boolean;\n\n    // For sandwich sudoku\n    // For each row and column, we may be given the sum of cells between the cells containing 1 and 9.\n    rowSandwich: Array<SandwichCellModel>;\n    colSandwich: Array<SandwichCellModel>;\n\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n        this.highlightMatching = null;\n        this.multiSelectMode = false;\n\n        this.rowSandwich = [];\n        this.colSandwich = [];\n        for (let i = 0; i < 9; i++) {\n            this.rowSandwich.push(new SandwichCellModel(`row-${i}`));\n            this.colSandwich.push(new SandwichCellModel(`col-${i}`));\n        }\n    }\n\n    // Used for maintaining board history.\n    serialize(): string {\n        let result: Array<{\n            value: CellValue;\n            fixed: boolean | null;\n            cornerValues: Array<CellValue>;\n            centerValues: Array<CellValue>;\n        }> = [];\n\n        this.cells.forEach((cell) => {\n            result.push({\n                value: cell.value,\n                fixed: cell.isFixed,\n                cornerValues: Array.from(cell.cornerValues),\n                centerValues: Array.from(cell.centerValues),\n            });\n        });\n        let obj = {\n            cells: result,\n            rowSandwiches: this.rowSandwich.map(cell => { return { value: cell.value, fixed: cell.isFixed }; }),\n            colSandwiches: this.colSandwich.map(cell => { return { value: cell.value, fixed: cell.isFixed }; }),\n        };\n        return JSON.stringify(obj);\n    }\n\n    // Used for maintaining board history.\n    load(serialized: string): void {\n        this.clearAllErrors();\n        this.clearAllRestricteds();\n        this.clearAllSelections();\n\n        const deserialized = JSON.parse(serialized);\n        const cells = deserialized.cells;\n        for (let i = 0; i < 81; i++) {\n            this.cells[i].value = cells[i].value;\n            this.cells[i].isFixed = cells[i].fixed;\n            this.cells[i].cornerValues = new Set(cells[i].cornerValues);\n            this.cells[i].centerValues = new Set(cells[i].centerValues);\n        }\n\n        for (let i = 0; i < 9; i++) {\n            this.rowSandwich[i].value = deserialized.rowSandwiches[i].value;\n            this.rowSandwich[i].isFixed = deserialized.rowSandwiches[i].fixed;\n\n            this.colSandwich[i].value = deserialized.colSandwiches[i].value;\n            this.colSandwich[i].isFixed = deserialized.colSandwiches[i].fixed;\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row: number, col: number): boolean {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row: number, col: number): number {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId: number): [number, number] {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row: number, col: number): number {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId: number): number {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId: number, gameOptions: GameOptions): Set<number> {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result: Set<number> = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gameOptions.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gameOptions.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gameOptions: GameOptions): Set<number> {\n        let result: Set<number> = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gameOptions).forEach(neighborId => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    getPossibleValues(cellId: number, gameOptions: GameOptions): Set<CellValue> {\n        const seenValues = Array.from(this.getVisibleCells(cellId, gameOptions))\n            .map(neighborId => this.cells[neighborId].value)\n            .filter(x => x);\n\n        return set_difference(new Set(['1', '2', '3', '4', '5', '6', '7', '8', '9']), new Set(seenValues));\n    }\n\n    fillAllPossibleValues(gameOptions: GameOptions): void {\n        this.cells.forEach(cell => {\n            if (!cell.value) {\n                cell.centerValues = this.getPossibleValues(cell.id, gameOptions);\n            }\n        });\n    }\n\n    hasSelected(): boolean {\n        return this.cells.find(cell => cell.selected) !== undefined;\n    }\n\n    hasSandwichSelected(): boolean {\n        return this.rowSandwich.find(cell => cell.selected) !== undefined\n            || this.colSandwich.find(cell => cell.selected) !== undefined;\n    }\n\n    getSandwichSum(values: Array<CellValue>): number | null {\n        if (values.indexOf('1') < 0 || values.indexOf('9') < 0) {\n            return null;\n        }\n        const left = Math.min(values.indexOf('1'), values.indexOf('9'));\n        const right = Math.max(values.indexOf('1'), values.indexOf('9'));\n\n        let sum = 0;\n        for (let value of values.slice(left + 1, right)) {\n            if (value === null) {\n                return null;\n            }\n            sum += +value;\n        }\n        return sum;\n    }\n\n    getRowValues(rowId: number): Array<CellValue> {\n        return this.cells.slice(rowId * 9, rowId * 9 + 9).map(cell => cell.value);\n    }\n\n    getColValues(colId: number): Array<CellValue> {\n        return this.cells.filter(cell => cell.id % 9 === colId).map(cell => cell.value);\n    }\n\n    getRowSandwichSum(rowId: number): number | null {\n        return this.getSandwichSum(this.getRowValues(rowId));\n    }\n\n    getColSandwichSum(colId: number): number | null {\n        return this.getSandwichSum(this.getColValues(colId));\n    }\n\n    setSelected(cellId: number): void {\n        this.cells[cellId].selected = true;\n    }\n\n    getSelectedValues(): Set<CellValue> {\n        return new Set(\n            this.cells\n                .filter((cell) => cell.selected)\n                .filter((cell) => cell.value)\n                .map((cell) => cell.value)\n        );\n    }\n\n    setRestricted(gameOptions: GameOptions): void {\n        let restricted: Set<any> | null = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gameOptions);\n                } else {\n                    restricted = set_intersection(this.getVisibleCells(id, gameOptions), restricted);\n                }\n            }\n        }\n\n        if (restricted) {\n            restricted.forEach((cellId) => {\n                this.cells[cellId].restricted = true;\n            });\n        }\n    }\n\n    setErrors(cellIds: Set<number>): void {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSingleCell(cellId: number, newValue: CellValue, gameOptions: GameOptions, autoCleanup: boolean): void {\n        if (this.cells[cellId].isFixed) {\n            return;\n        }\n        this.cells[cellId].value = newValue;\n        if (autoCleanup) {\n            this.getVisibleCells(this.cells[cellId].id, gameOptions).forEach((id) => {\n                this.cells[id].cornerValues.delete(newValue);\n                this.cells[id].centerValues.delete(newValue);\n            });\n        }\n    }\n\n    setValueOfSelectedCells(newValue: CellValue, gameOptions: GameOptions, autoCleanup: boolean = false): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                this.setValueOfSingleCell(cell.id, newValue, gameOptions, autoCleanup);\n            }\n        });\n    }\n\n    unsetSelectedCells(): void {\n        this.cells\n            .filter(cell => cell.selected && !cell.isFixed)\n            .forEach(cell => { cell.value = null });\n        \n        [...this.rowSandwich, ...this.colSandwich]\n            .filter(cell => cell.selected)\n            .forEach(cell => { cell.value = null });\n    }\n\n    toggleCornerValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections(): void {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n        this.rowSandwich.forEach((cell) => {\n            cell.selected = false;\n        });\n        this.colSandwich.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds(): void {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors(): void {\n        this.cells.forEach(cell => { cell.error = false });\n        this.rowSandwich.forEach(cell => { cell.error = false });\n        this.colSandwich.forEach(cell => { cell.error = false });\n    }\n}\n\nexport { BoardModel };\n","import { BoardModel } from '../models/board';\nimport { DisplayOptions, GameOptions } from '../models/control';\n\nexport const ACTION_NO_OP = 'ACTION_NO_OP';\nexport interface NoOpAction {\n    type: typeof ACTION_NO_OP,\n};\nexport const NO_OP: NoOpAction = { type: ACTION_NO_OP };\n\n// Board actions.\nexport const ACTION_UPDATE_BOARD = 'ACTION_UPDATE_BOARD';\nexport const ACTION_GENERATE_URL = 'ACTION_GENERATE_URL';\nexport const ACTION_INIT_GAME_STATE = 'ACTION_INIT_GAME_STATE';\n\nexport interface UpdateBoardAction {\n    type: typeof ACTION_UPDATE_BOARD,\n    payload: {\n        board: BoardModel,\n    },\n};\nexport interface GenerateUrlAction {\n    type: typeof ACTION_GENERATE_URL,\n    payload: {\n        url: string,\n    },\n};\nexport interface InitGameStateAction {\n    type: typeof ACTION_INIT_GAME_STATE,\n    payload: {\n        board: BoardModel,\n        gameOptions: GameOptions,\n    }\n};\n\n// Control actions.\nexport const ACTION_UPDATE_DISPLAY = 'ACTION_UPDATE_DISPLAY';\nexport const ACTION_UPDATE_GAME_PLAY = 'ACTION_UPDATE_GAME_PLAY';\n\ninterface UpdateDisplayAction {\n    type: typeof ACTION_UPDATE_DISPLAY,\n    payload: DisplayOptions,\n};\n\ninterface UpdateGameOptionsAction {\n    type: typeof ACTION_UPDATE_GAME_PLAY,\n    payload: GameOptions,\n}\n\n// History actions.\nexport const ACTION_REDO = 'ACTION_REDO';\nexport const ACTION_UNDO = 'ACTION_UNDO';\n\nexport interface RedoAction {\n    type: typeof ACTION_REDO,\n    payload: {\n        serialized: string,\n    },\n};\nexport interface UndoAction {\n    type: typeof ACTION_UNDO,\n    payload: {\n        serialized: string,\n    },\n};\n\n// Combine all action types.\nexport type ActionTypes = NoOpAction\n    | UpdateBoardAction | GenerateUrlAction | InitGameStateAction\n    | UpdateDisplayAction | UpdateGameOptionsAction\n    | RedoAction | UndoAction;\n","import { ACTION_REDO, ACTION_UNDO, NO_OP, ActionTypes } from './types';\nimport { HistoryModel } from '../models/history';\n\n\nexport const redo = (history: HistoryModel): ActionTypes => {\n    if (history.id >= history.boards.length - 1) {\n        // Nothing to redo.\n        return NO_OP;\n    }\n    return {\n        type: ACTION_REDO,\n        payload: {\n            serialized: history.boards[history.id + 1],\n        },\n    };\n};\n\nexport const undo = (history: HistoryModel): ActionTypes => {\n    if (history.id === 0) {\n        // Nothing to do.\n        return NO_OP;\n    }\n    return {\n        type: ACTION_UNDO,\n        payload: {\n            serialized: history.boards[history.id - 1],\n        },\n    };\n};\n","import * as KeyCode from 'keycode-js';\nimport _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\nimport { ControlModel } from '../models/control';\nimport { HistoryModel } from '../models/history';\nimport { redo, undo } from './history';\nimport {\n    ACTION_GENERATE_URL,\n    ACTION_INIT_GAME_STATE,\n    ACTION_UPDATE_BOARD,\n    ActionTypes,\n    NO_OP\n    } from './types';\n\n\nexport const initGameState = (decodedState: any): ActionTypes => {\n    const board = new BoardModel();\n    for (let i = 0; i < 81; i++) {\n        const value = decodedState.values[i];\n        if (value !== '0') {\n            board.cells[i].value = decodedState.values[i] as CellValue;\n            board.cells[i].isFixed = true;\n        }\n    }\n    if (decodedState.rowSandwichSums !== null) {\n        for (let i = 0; i < 9; i++) {\n            board.rowSandwich[i].value = decodedState.rowSandwichSums[i];\n            board.rowSandwich[i].isFixed = true;\n        }\n    }\n    if (decodedState.colSandwichSums !== null) {\n        for (let i = 0; i < 9; i++) {\n            board.colSandwich[i].value = decodedState.colSandwichSums[i];\n            board.colSandwich[i].isFixed = true;\n        }\n    }\n    return {\n        type: ACTION_INIT_GAME_STATE,\n        payload: {\n            board: board,\n            gameOptions: decodedState.gameOptions,\n        },\n    }\n};\n\nexport const generateUrl = (board: BoardModel, control: ControlModel): ActionTypes => {\n    const gameState = {\n        values: board.cells.map(cell => {\n            if (cell.value) return cell.value;\n            else return '0';\n        }).join(''),\n        rowSandwichSums: (control.gameOptions.sandwich) ? board.rowSandwich.map(cell => cell.value) : null,\n        colSandwichSums: (control.gameOptions.sandwich) ? board.colSandwich.map(cell => cell.value) : null,\n        gameOptions: control.gameOptions,\n    };\n    return {\n        type: ACTION_GENERATE_URL,\n        payload: {\n            url: window.location.origin + window.location.pathname + '#/' + window.btoa(JSON.stringify(gameState)),\n        },\n    };\n};\n\nexport const updateBoard = (board: BoardModel): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_BOARD,\n        payload: {\n            board: board,\n        }\n    };\n};\n\nconst pressEsc = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllSelections();\n    newBoard.clearAllRestricteds();\n    newBoard.highlightMatching = null;\n    return updateBoard(newBoard);\n}\n\nexport const select = (\n        board: BoardModel,\n        control: ControlModel,\n        cellId: number,\n        clearSelection: boolean = true,\n        setMultiSelect: boolean | null = null\n        ): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    if (setMultiSelect !== null) {\n        newBoard.multiSelectMode = setMultiSelect;\n    }\n\n    if (clearSelection) {\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n        newBoard.highlightMatching = null;\n    } else {\n        newBoard.clearAllRestricteds();\n    }\n\n    newBoard.setSelected(cellId);\n\n    if (control.displayOptions.highlightRestricted) {\n        newBoard.setRestricted(control.gameOptions);\n    }\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n\n    return updateBoard(newBoard);\n}\n\nexport const selectSandwich = (\n        board: BoardModel,\n        control: ControlModel,\n        isRow: boolean,\n        id: number): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    if (!control.gameOptions.sandwich) {\n        throw new Error('Attempt to select sandwich in normal mode');\n    }\n\n    newBoard.clearAllSelections();\n    newBoard.clearAllRestricteds();\n    newBoard.highlightMatching = null;\n\n    if (isRow) {\n        newBoard.rowSandwich[id].selected = true;\n    } else {\n        newBoard.colSandwich[id].selected = true;\n    }\n\n    return updateBoard(newBoard);\n}\n\nexport const mouseDown = (board: BoardModel, control: ControlModel, cellId: number, clearSelection: boolean): ActionTypes => {\n    return select(board, control, cellId, clearSelection, true);\n}\n\nexport const mouseOver = (board: BoardModel, control: ControlModel, cellId: number): ActionTypes => {\n    if (!board.multiSelectMode) {\n        return NO_OP;\n    }\n    return select(board, control, cellId, false);\n}\n\nexport const mouseUp = (board: BoardModel): ActionTypes => {\n    return updateBoard(Object.assign(board, { multiSelectMode: false}));\n}\n\nconst setValue = (board: BoardModel, control: ControlModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.setValueOfSelectedCells(\n        newValue,\n        control.gameOptions,\n        control.displayOptions.autoCleanUp);\n\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n    return updateBoard(newBoard);\n};\n\nconst setSandwichValue = (board: BoardModel, newValue: number): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    [...newBoard.rowSandwich, ...newBoard.colSandwich]\n        .filter(cell => cell.selected)\n        .forEach(cell => {\n            if (cell.value === null) cell.value = newValue;\n            else if (cell.value < 10) cell.value = cell.value * 10 + newValue;\n        });\n    return updateBoard(newBoard);\n};\n\nconst unsetValue = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.unsetSelectedCells();\n\n    return updateBoard(newBoard);\n};\n\nconst toggleCornerValues = (board: BoardModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n    return updateBoard(newBoard);\n}\n\nconst toggleCenterValues = (board: BoardModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.toggleCenterValuesOfSelectedCells(newValue);\n    return updateBoard(newBoard);\n}\n\n// Move selected cell in direction (d_row, d_col).\n// If there are more than one selected cells, only move the first one.\nconst move = (board: BoardModel, control: ControlModel, d_row: number, d_col: number): ActionTypes => {\n    let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n    for (let i = 0; i < 81; i++) {\n        if (board.cells[i].selected) {\n            [r, c] = board.toRowCol(i);\n            break;\n        }\n    }\n    for (let i = 0; i < 9; i++) {\n        if (board.colSandwich[i].selected) {\n            r = -1;\n            c = i;\n            break;\n        }\n        if (board.rowSandwich[i].selected) {\n            r = i;\n            c = -1;\n        }\n    }\n\n    if (control.gameOptions.sandwich) {\n        r = (r + d_row + 10) % 10;\n        c = (c + d_col + 10) % 10;\n\n        if (r === 9 && c === 9) {\n            // This is the empty cell outside board.\n            return selectSandwich(board, control, false, 0);\n        } else if (r === 9) {\n            // Column sandwich\n            return selectSandwich(board, control, false, c);\n        } else if (c === 9) {\n            // Row sandwich\n            return selectSandwich(board, control, true, r);\n        } else {\n            return select(board, control, board.toCellId(r, c));\n        }\n    } else {\n        r = (r + d_row + 9) % 9;\n        c = (c + d_col + 9) % 9;\n        return select(board, control, board.toCellId(r, c));\n    }\n}\n\nconst pressBackspace = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.unsetSelectedCells();\n\n    newBoard.clearCornerValuesOfSelectedCells();\n    newBoard.clearCenterValuesOfSelectedCells();\n\n    return updateBoard(newBoard);\n}\n\nexport const keyDown = (board: BoardModel, control: ControlModel, history: HistoryModel, e: any): ActionTypes => {\n    let isShift = !!e.shiftKey;\n    let isMeta = !!e.metaKey;\n\n    // Pressed 0-9\n    if (e.keyCode >= KeyCode.KEY_0 && e.keyCode <= KeyCode.KEY_9) {\n        if (e.keyCode !== KeyCode.KEY_0 && board.hasSelected()) {\n            const value = String.fromCharCode(e.keyCode) as CellValue;\n            if (isShift) {\n                return toggleCornerValues(board, value)\n            } else if (isMeta) {\n                e.preventDefault();\n                return toggleCenterValues(board, value);\n            } else {\n                return setValue(board, control, value);\n            }\n        }\n        if (board.hasSandwichSelected()) {\n            return setSandwichValue(board, +String.fromCharCode(e.keyCode));\n        }\n        return NO_OP;\n    }\n\n    switch (e.keyCode) {\n        case KeyCode.KEY_SPACE:\n            return unsetValue(board);\n        case KeyCode.KEY_BACK_SPACE:\n            e.preventDefault();\n            return pressBackspace(board);\n        case KeyCode.KEY_DOWN:\n            return move(board, control, +1, 0);\n        case KeyCode.KEY_UP:\n            return move(board, control, -1, 0);\n        case KeyCode.KEY_LEFT:\n            return move(board, control, 0, -1);\n        case KeyCode.KEY_RIGHT:\n            return move(board, control, 0, +1);\n        case KeyCode.KEY_ESCAPE:\n            return pressEsc(board);\n        case KeyCode.KEY_Z:\n        case KeyCode.KEY_U:\n            return undo(history);\n        case KeyCode.KEY_Y:\n        case KeyCode.KEY_R:\n            return redo(history);\n        default:\n    }\n    return NO_OP;\n}\n","// Return: number of bit 1 of `n`.\nexport const bitCount = (n: number): number => {\n    n = n - ((n >> 1) & 0x55555555)\n    n = (n & 0x33333333) + ((n >> 2) & 0x33333333)\n    return ((n + (n >> 4) & 0xF0F0F0F) * 0x1010101) >> 24\n}\n\n// Return: true if the corresponding bit of n is 1.\nexport const bitContains = (n: number, bit: number): boolean => {\n    return ((n >> bit) & 1) > 0;\n}\n\n// Return: copy of n with corresponding bit set to 0.\nexport const bitRemoveIfExists = (n: number, bit: number): number => {\n    if (!bitContains(n, bit)) {\n        return n;\n    }\n    return n - (1<<bit);\n}\n","export const sumToSeqs: any = {\n    0: [[]],\n    2: [\n        [2],\n    ],\n    3: [\n        [3],\n    ],\n    4: [\n        [4],\n    ],\n    5: [\n        [5],\n        [2, 3],\n    ],\n    6: [\n        [6],\n        [2, 4],\n    ],\n    7: [\n        [7],\n        [2, 5],\n        [3, 4],\n    ],\n    8: [\n        [8],\n        [2, 6],\n        [3, 5],\n    ],\n    9: [\n        [2, 7],\n        [3, 6],\n        [4, 5],\n        [2, 3, 4],\n    ],\n    10: [\n        [2, 8],\n        [3, 7],\n        [4, 6],\n        [2, 3, 5],\n    ],\n    11: [\n        [3, 8],\n        [4, 7],\n        [5, 6],\n        [2, 3, 6],\n        [2, 4, 5],\n    ],\n    12: [\n        [4, 8],\n        [5, 7],\n        [2, 3, 7],\n        [2, 4, 6],\n        [3, 4, 5],\n    ],\n    13: [\n        [5, 8],\n        [6, 7],\n        [2, 3, 8],\n        [2, 4, 7],\n        [2, 5, 6],\n        [3, 4, 6],\n    ],\n    14: [\n        [6, 8],\n        [2, 4, 8],\n        [2, 5, 7],\n        [3, 4, 7],\n        [3, 5, 6],\n        [2, 3, 4, 5],\n    ],\n    15: [\n        [7, 8],\n        [2, 5, 8],\n        [2, 6, 7],\n        [3, 4, 8],\n        [3, 5, 7],\n        [4, 5, 6],\n        [2, 3, 4, 6],\n    ],\n    16: [\n        [2, 6, 8],\n        [3, 5, 8],\n        [3, 6, 7],\n        [4, 5, 7],\n        [2, 3, 4, 7],\n        [2, 3, 5, 6],\n    ],\n    17: [\n        [2, 7, 8],\n        [3, 6, 8],\n        [4, 5, 8],\n        [4, 6, 7],\n        [2, 3, 4, 8],\n        [2, 3, 5, 7],\n        [2, 4, 5, 6],\n    ],\n    18: [\n        [3, 7, 8],\n        [4, 6, 8],\n        [5, 6, 7],\n        [2, 3, 5, 8],\n        [2, 3, 6, 7],\n        [2, 4, 5, 7],\n        [3, 4, 5, 6],\n    ],\n    19: [\n        [4, 7, 8],\n        [5, 6, 8],\n        [2, 3, 6, 8],\n        [2, 4, 5, 8],\n        [2, 4, 6, 7],\n        [3, 4, 5, 7],\n    ],\n    20: [\n        [5, 7, 8],\n        [2, 3, 7, 8],\n        [2, 4, 6, 8],\n        [2, 5, 6, 7],\n        [3, 4, 5, 8],\n        [3, 4, 6, 7],\n        [2, 3, 4, 5, 6],\n    ],\n    21: [\n        [6, 7, 8],\n        [2, 4, 7, 8],\n        [2, 5, 6, 8],\n        [3, 4, 6, 8],\n        [3, 5, 6, 7],\n        [2, 3, 4, 5, 7],\n    ],\n    22: [\n        [2, 5, 7, 8],\n        [3, 4, 7, 8],\n        [3, 5, 6, 8],\n        [4, 5, 6, 7],\n        [2, 3, 4, 5, 8],\n        [2, 3, 4, 6, 7],\n    ],\n    23: [\n        [2, 6, 7, 8],\n        [3, 5, 7, 8],\n        [4, 5, 6, 8],\n        [2, 3, 4, 6, 8],\n        [2, 3, 5, 6, 7],\n    ],\n    24: [\n        [3, 6, 7, 8],\n        [4, 5, 7, 8],\n        [2, 3, 4, 7, 8],\n        [2, 3, 5, 6, 8],\n        [2, 4, 5, 6, 7],\n    ],\n    25: [\n        [4, 6, 7, 8],\n        [2, 3, 5, 7, 8],\n        [2, 4, 5, 6, 8],\n        [3, 4, 5, 6, 7],\n    ],\n    26: [\n        [5, 6, 7, 8],\n        [2, 3, 6, 7, 8],\n        [2, 4, 5, 7, 8],\n        [3, 4, 5, 6, 8],\n    ],\n    27: [\n        [2, 4, 6, 7, 8],\n        [3, 4, 5, 7, 8],\n        [2, 3, 4, 5, 6, 7],\n    ],\n    28: [\n        [2, 5, 6, 7, 8],\n        [3, 4, 6, 7, 8],\n        [2, 3, 4, 5, 6, 8],\n    ],\n    29: [\n        [3, 5, 6, 7, 8],\n        [2, 3, 4, 5, 7, 8],\n    ],\n    30: [\n        [4, 5, 6, 7, 8],\n        [2, 3, 4, 6, 7, 8],\n    ],\n    31: [\n        [2, 3, 5, 6, 7, 8],\n    ],\n    32: [\n        [2, 4, 5, 6, 7, 8],\n    ],\n    33: [\n        [3, 4, 5, 6, 7, 8],\n    ],\n    35: [\n        [2, 3, 4, 5, 6, 7, 8],\n    ],\n};\nexport const sandwichLengths: any = {\n    0: [0],\n    2: [1],\n    3: [1],\n    4: [1],\n    5: [1, 2],\n    6: [1, 2],\n    7: [1, 2],\n    8: [1, 2],\n    9: [2, 3],\n    10: [2, 3],\n    11: [2, 3],\n    12: [2, 3],\n    13: [2, 3],\n    14: [2, 3, 4],\n    15: [2, 3, 4],\n    16: [3, 4],\n    17: [3, 4],\n    18: [3, 4],\n    19: [3, 4],\n    20: [3, 4, 5],\n    21: [3, 4, 5],\n    22: [4, 5],\n    23: [4, 5],\n    24: [4, 5],\n    25: [4, 5],\n    26: [4, 5],\n    27: [5, 6],\n    28: [5, 6],\n    29: [5, 6],\n    30: [5, 6],\n    31: [6],\n    32: [6],\n    33: [6],\n    35: [7],\n};\n\n/** Generated by C++ code:\n\n#include \"bits/stdc++.h\"\nusing namespace std;\n\nusing Seq = vector<int>;\n\nvoid attempt(Seq& cur, int len, map<int, vector<Seq>>& res) {\n    if (cur.size() == len) {\n        int sum = accumulate(cur.begin(), cur.end(), 0);\n        res[sum].push_back(cur);\n        return;\n    }\n\n    int last = cur.empty() ? 1 : cur.back();\n    for (int val = last + 1; val <= 8; val++) {\n        cur.push_back(val);\n        attempt(cur, len, res);\n        cur.pop_back();\n    }\n}\n\nstring join(const Seq& seq, const string& sep) {\n    bool first = true;\n    stringstream ss;\n    for (auto val : seq) {\n        if (first) first = false;\n        else ss << sep;\n        ss << val;\n    }\n    return ss.str();\n}\n\nint main() {\n    map<int, vector<Seq>> res;\n    res[0].push_back({});\n    for (int len = 1; len <= 7; len++) {\n        Seq cur;\n        attempt(cur, len, res);\n    }\n\n    cout << \"export const sumToSeqs = {\" << endl;\n    for (auto [sum, seqs] : res) {\n        cout << \"    \" << sum << \": [\" << endl;\n        for (auto seq : seqs) {\n            cout << \"        [\";\n            cout << join(seq, \", \");\n            cout << \"],\" << endl;\n        }\n        cout << \"    ],\" << endl;\n    }\n    cout << \"};\" << endl;\n\n    cout << \"export const sandwichLengths = {\" << endl;\n    for (auto [sum, seqs] : res) {\n        vector<int> possible_lens;\n        for (auto seq : seqs) {\n            possible_lens.push_back(seq.size());\n        }\n        possible_lens.resize(unique(possible_lens.begin(), possible_lens.end()) - possible_lens.begin());\n        cout << \"    \" << sum << \": [\" << join(possible_lens, \", \") << \"],\" << endl;\n    }\n    cout << \"};\" << endl;\n    return 0;\n}\n\n*/","import _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\nimport { ControlModel } from '../models/control';\nimport { bitContains, bitCount, bitRemoveIfExists } from './bits';\nimport { sandwichLengths, sumToSeqs } from './sandwich';\n\nconst toRowId = (cellId: number) => {\n    return ~~(cellId / 9);\n};\nconst toColId = (cellId: number) => {\n    return cellId % 9;\n};\nconst toCellId = (rowId: number, colId: number) => {\n    return rowId * 9 + colId;\n};\n\nconst getRowValues = (rowId: number, values: Array<number>): Array<number> => {\n    return values.slice(rowId * 9, rowId * 9 + 9);\n}\n\nconst getColValues = (colId: number, values: Array<number>): Array<number> => {\n    let res = [];\n    for (let i = colId; i < 81; i += 9) {\n        res.push(values[i]);\n    }\n    return res;\n}\n\n// Input:\n// - sum = sandwich sum for this row / column.\n// - values = numbers in this row / column. If missing --> 0.\n//\n// Return:\n// - Set of possible values inside sandwich,\n// - Set of possible values outside sandwich.\nconst getValidSandwichValues = (sum: number, values: Array<number>): [Set<number>, Set<number>] => {\n    if (sum === 0) {\n        return [new Set(), new Set([1, 2, 3, 4, 5, 6, 7, 8, 9])];\n    }\n\n    let left = values.indexOf(1);\n    let right = values.indexOf(9);\n    if (left > right) {\n        [left, right] = [right, left];\n    }\n    const len = right - left - 1;\n\n    // What we know about the seqs\n    let mustHave: Set<number> = new Set();\n    let mustNot: Set<number> = new Set();\n    let inside = false;\n    for (let value of values) {\n        if (value === 0) continue;\n\n        if (value === 1 || value === 9) {\n            inside = !inside;\n        } else {\n            if (inside) mustHave.add(value);\n            else mustNot.add(value);\n        }\n    }\n\n    // Check all seqs with this sum.\n    let insides: Set<number> = new Set();\n    let outsides: Set<number> = new Set();\n    for (let seq of sumToSeqs[sum]) {\n        const seq_set = new Set(seq);\n        let can = true;\n        if (seq.length !== len) {\n            can = false;\n        }\n        for (let value of mustHave) {\n            if (!seq_set.has(value)) {\n                can = false;\n                break;\n            }\n        }\n        for (let value of mustNot) {\n            if (seq_set.has(value)) {\n                can = false;\n                break;\n            }\n        }\n        if (can) {\n            for (let value = 1; value <= 9; value++) {\n                if (seq_set.has(value)) {\n                    insides.add(value);\n                } else {\n                    outsides.add(value);\n                }\n            }\n        }\n    }\n    return [insides, outsides];\n}\n\n// Assumption: we have just filled number in cell (rowId, colId).\n// We want to use sandwich clue in that row / column to eliminiate some candidates.\nconst applySandwichClues = (board: BoardModel, rowId: number, colId: number, values: Array<number>, candidates: Array<number>): void => {\n    // For row.\n    if (board.rowSandwich[rowId].value !== null) {\n        const row = getRowValues(rowId, values);\n        const sandwichSum: number = board.rowSandwich[rowId].value as number;\n\n        if (row.indexOf(1) >= 0 && row.indexOf(9) >= 0) {\n            const [insides, outsides] = getValidSandwichValues(sandwichSum, row);\n            let inside = false;\n            for (let i = 0; i < 9; i++) {\n                if (row[i] === 1 || row[i] === 9) {\n                    inside = !inside;\n                } else if (row[i] === 0) {\n                    for (let value = 1; value <= 9; value++) {\n                        const cellId = toCellId(rowId, i);\n                        if ((inside && !insides.has(value))\n                                || (!inside && !outsides.has(value))) {\n                            candidates[cellId] = bitRemoveIfExists(candidates[cellId], value);\n                        }\n                    }\n                }\n            }\n        } else if (row.indexOf(1) >= 0 || row.indexOf(9) >= 0) {\n            let indexOf19 = row.indexOf(1);\n            if (indexOf19 < 0) indexOf19 = row.indexOf(9);\n\n            const possibleLens = new Set(sandwichLengths[sandwichSum]);\n            for (let i = 0; i < 9; i++) {\n                if (row[i] === 0) {\n                    if (!possibleLens.has(Math.abs(i - indexOf19) - 1)) {\n                        const cellId = toCellId(rowId, i);\n                        candidates[cellId] = bitRemoveIfExists(candidates[cellId], 1);\n                        candidates[cellId] = bitRemoveIfExists(candidates[cellId], 9);\n                    }\n                }\n            }\n        }\n    }\n\n    // For column.\n    if (board.colSandwich[colId].value !== null) {\n        const col = getColValues(colId, values);\n        const sandwichSum: number = board.colSandwich[colId].value as number;\n\n        if (col.indexOf(1) >= 0 && col.indexOf(9) >= 0) {\n            const [insides, outsides] = getValidSandwichValues(sandwichSum, col);\n            let inside = false;\n            for (let i = 0; i < 9; i++) {\n                if (col[i] === 1 || col[i] === 9) {\n                    inside = !inside;\n                } else if (col[i] === 0) {\n                    for (let value = 1; value <= 9; value++) {\n                        const cellId = toCellId(i, colId);\n                        if ((inside && !insides.has(value))\n                                || (!inside && !outsides.has(value))) {\n                            candidates[cellId] = bitRemoveIfExists(candidates[cellId], value);\n                        }\n                    }\n                }\n            }\n        } else if (col.indexOf(1) >= 0 || col.indexOf(9) >= 0) {\n            let indexOf19 = col.indexOf(1);\n            if (indexOf19 < 0) indexOf19 = col.indexOf(9);\n\n            const possibleLens = new Set(sandwichLengths[sandwichSum]);\n            for (let i = 0; i < 9; i++) {\n                if (col[i] === 0) {\n                    if (!possibleLens.has(Math.abs(i - indexOf19) - 1)) {\n                        const cellId = toCellId(i, colId);\n                        candidates[cellId] = bitRemoveIfExists(candidates[cellId], 1);\n                        candidates[cellId] = bitRemoveIfExists(candidates[cellId], 9);\n                    }\n                }\n            }\n        }\n    }\n};\n\n// Input:\n// - board, control: model instances, so that we can get visible cells of a cell.\n// - values: array with length 9*9, representing the filled values board.\n// - candidates: array with length 9*9, where each element is a bitmask representing possible values for that cell.\n// \n// Return: array of 2 elements:\n// - First element is either a solution or null\n// - Number of solutions we find. We always break at >= 2 solutions.\nconst attempt = (board: BoardModel, control: ControlModel, values: Array<number>, candidates: Array<number>): [BoardModel | null, number] => {\n    // Find cell with minimum number of candidates.\n    let bestId = -1;\n    for (let i = 0; i < 81; i++) {\n        if (values[i] === 0) {\n            if (bestId < 0 || bitCount(values[i]) < bitCount(values[bestId])) {\n                bestId = i;\n            }\n        }\n    }\n    if (bestId < 0) {\n        // No more unfilled cell --> we have found a solution.\n        let solution = _.cloneDeep(board);\n        for (let i = 0; i < 81; i++) {\n            solution.setValueOfSingleCell(i, String.fromCharCode(48 + values[i]) as CellValue, control.gameOptions, false);\n        }\n        return [solution, 1];\n    }\n\n    if (bitCount(candidates[bestId]) === 0) {\n        return [null, 0];\n    }\n\n    let firstSolution = null;\n    let cntSolutions = 0;\n    for (let value = 1; value <= 9; value++) {\n        if (bitContains(candidates[bestId], value)) {\n            const saveValues = _.clone(values);\n            const saveCandidates = _.clone(candidates);\n\n            values[bestId] = value;\n            const neighborIds = board.getVisibleCells(bestId, control.gameOptions);\n            for (let neighborId of neighborIds) {\n                candidates[neighborId] = bitRemoveIfExists(candidates[neighborId], value);\n            };\n            if (control.gameOptions.sandwich) {\n                applySandwichClues(board, toRowId(bestId), toColId(bestId), values, candidates);\n            }\n\n            let [solution, cnt] = attempt(board, control, values, candidates);\n            if (cnt > 0) {\n                if (firstSolution === null) {\n                    firstSolution = solution;\n                }\n                cntSolutions += cnt;\n                if (cntSolutions >= 2) {\n                    break;\n                }\n            }\n\n            values = saveValues;\n            candidates = saveCandidates;\n        }\n    }\n    return [firstSolution, cntSolutions];\n};\n\n// Input:\n// - board: A Sandwich Sudoku board.\n// - control: ControlModel instance.\n// - values: array with length 9*9, representing the filled values board.\n// - candidates: array with length 9*9, where each element is a bitmask representing possible values for that cell.\n//\n// Return: array of 2 elements:\n// - First element is either a solution or null\n// - Number of solutions we find. We always break at >= 2 solutions.\nconst attemptSandwich = (board: BoardModel, control: ControlModel, values: Array<number>, candidates: Array<number>): [BoardModel | null, number] => {\n    // Find row / column with least number of candidates for 1/9.\n    let bestCount = 1000;\n    let isRow = false;\n    let bestId = -1;\n    let oneOrNine = 1;\n    for (let i = 0; i < 9; i++) {\n        // row\n        if (board.rowSandwich[i].value !== null) {\n            let cnt1 = 0;\n            let cnt9 = 0;\n            for (let col = 0; col < 9; col++) {\n                const cellId = toCellId(i, col);\n                if (values[cellId] === 0) {\n                    const candidate = candidates[cellId];\n                    if (bitContains(candidate, 1)) cnt1 += 1;\n                    if (bitContains(candidate, 9)) cnt9 += 1;\n                }\n            }\n            if (cnt1 > 0 && cnt1 < bestCount) {\n                bestCount = cnt1;\n                isRow = true;\n                bestId = i;\n                oneOrNine = 1;\n            }\n            if (cnt9 > 0 && cnt9 < bestCount) {\n                bestCount = cnt9;\n                isRow = true;\n                bestId = i;\n                oneOrNine = 9;\n            }\n        }\n        // col\n        if (board.colSandwich[i].value !== null) {\n            let cnt1 = 0;\n            let cnt9 = 0;\n            for (let row = 0; row < 9; row++) {\n                const cellId = toCellId(row, i);\n                if (values[cellId] === 0) {\n                    const candidate = candidates[cellId];\n                    if (bitContains(candidate, 1)) cnt1 += 1;\n                    if (bitContains(candidate, 9)) cnt9 += 1;\n                }\n            }\n            if (cnt1 > 0 && cnt1 < bestCount) {\n                bestCount = cnt1;\n                isRow = false;\n                bestId = i;\n                oneOrNine = 1;\n            }\n            if (cnt9 > 0 && cnt9 < bestCount) {\n                bestCount = cnt9;\n                isRow = false;\n                bestId = i;\n                oneOrNine = 9;\n            }\n        }\n    }\n\n    if (bestId < 0) {\n        // No row / column with sandwich clue has missing 1/9.\n        return attempt(board, control, values, candidates);\n    }\n\n    let firstSolution = null;\n    let cntSolutions = 0;\n    for (let i = 0; i < 9; i++) {\n        const cellId = isRow ? toCellId(bestId, i) : toCellId(i, bestId);\n\n        if (values[cellId] === 0 && bitContains(candidates[cellId], oneOrNine)) {\n            const saveValues = _.clone(values);\n            const saveCandidates = _.clone(candidates);\n\n            values[cellId] = oneOrNine;\n            const neighborIds = board.getVisibleCells(cellId, control.gameOptions);\n            for (let neighborId of neighborIds) {\n                candidates[neighborId] = bitRemoveIfExists(candidates[neighborId], oneOrNine);\n            };\n            if (control.gameOptions.sandwich) {\n                applySandwichClues(board, toRowId(cellId), toColId(cellId), values, candidates);\n            }\n            let [solution, cnt] = attemptSandwich(board, control, values, candidates);\n            if (cnt > 0) {\n                if (firstSolution === null) {\n                    firstSolution = solution;\n                }\n                cntSolutions += cnt;\n                if (cntSolutions >= 2) {\n                    break;\n                }\n            }\n\n            values = saveValues;\n            candidates = saveCandidates;\n        }\n    }\n    return [firstSolution, cntSolutions];\n}\n\nexport const solveBoard = (board: BoardModel, control: ControlModel): [BoardModel | null, number] => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.fillAllPossibleValues(control.gameOptions);\n\n    let values = newBoard.cells.map(cell => {\n        if (!cell.value) return 0;\n        else return +cell.value;\n    });\n    let candidates = newBoard.cells.map(cell => {\n        let mask = 0;\n        for (let value of cell.centerValues) {\n            if (value !== null) {\n                mask += 1 << (+value);\n            }\n        }\n        return mask;\n    });\n\n    // Use sandwich clues for filled cells.\n    if (control.gameOptions.sandwich) {\n        for (let i = 0; i < 9; i++) {\n            if (!newBoard.rowSandwich[i].isValid()) {\n                return [null, 0];\n            }\n            if (!newBoard.colSandwich[i].isValid()) {\n                return [null, 0];\n            }\n        }\n        for (let i = 0; i < 81; i++) {\n            if (values[i] > 0) {\n                applySandwichClues(newBoard, toRowId(i), toColId(i), values, candidates);\n            }\n        }\n        for (let i = 0; i < 81; i++) {\n            if (values[i] > 0) {\n                newBoard.cells[i].value = String(values[i]) as CellValue;\n            }\n            newBoard.cells[i].centerValues.clear();\n            for (let value = 1; value <= 9; value++) {\n                if (bitContains(candidates[i], value)) {\n                    newBoard.cells[i].centerValues.add(String(value) as CellValue);\n                }\n            }\n        }\n        return attemptSandwich(newBoard, control, values, candidates);\n    }\n\n    return attempt(newBoard, control, values, candidates);\n};\n","import React from 'react';\nimport { CellModel, CellValue } from '../../models/cell';\n\n\ntype CellProps = {\n    cell: CellModel,\n    onClick: (e: any) => void,\n    onMouseDown: (e: any) => void,\n    onMouseOver: (e: any) => void,\n    key: string,\n    highlightMatching: CellValue,\n};\n\nclass Cell extends React.Component<CellProps> {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    shouldHighlightMatching(value: CellValue) {\n        return this.props.highlightMatching && value === this.props.highlightMatching;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"corner-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"center-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        } else if (this.shouldHighlightMatching(this.props.cell.value)) {\n            classes.push('matching');\n        } else if (this.props.cell.restricted) {\n            classes.push('restricted');\n        } else if (this.props.cell.isFixed) {\n            classes.push('fixed');\n        } else if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                onMouseDown={this.props.onMouseDown}\n                onMouseOver={this.props.onMouseOver}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nexport default Cell;\n","import React from 'react';\nimport { QuestionSquare } from 'react-bootstrap-icons';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { SandwichCellModel } from '../../models/sandwichCell';\nimport { sumToSeqs } from '../../utils/sandwich';\nimport { GameState } from '../Game';\n\n\nclass SandwichCell extends React.Component<SandwichCellProps> {\n    renderSandwichHint() {\n        if (!this.props.sandwichHint || this.props.value.value === null || this.props.value.value === 0) {\n            return;\n        }\n\n        const seqs = sumToSeqs[this.props.value.value].map((seq: Array<number>) => {\n            return (\n                <div>\n                    {seq.join(' ')}\n                </div>\n            );\n        });\n        const tooltip = (\n            <Tooltip id={`tooltip-sandwich-${this.props.value.id}`}>\n                <div>{seqs}</div>\n            </Tooltip>\n        );\n        return (\n            <div className=\"cell-corner-value\">\n                <OverlayTrigger\n                    placement=\"left\"\n                    overlay={tooltip}>\n                    <QuestionSquare />\n                </OverlayTrigger>\n            </div>\n        );\n    }\n\n    render() {\n        let defaultValue = (this.props.value.value === null) ? undefined : this.props.value.value;\n\n        let classes = ['sandwich-cell'];\n        if (this.props.value.selected) {\n            classes.push('selected');\n        } else if (this.props.value.isFixed) {\n            classes.push('fixed');\n        }\n        if (this.props.value.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                onClick={this.props.onClick}\n                className={classes.join(' ')}\n            >\n                <div className=\"cell-main-value\">\n                    {defaultValue}\n                </div>\n                {this.renderSandwichHint()}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {\n        sandwichHint: state.control.displayOptions.sandwichHint,\n    };\n};\n\nconst connector = connect(mapStateToProps);\ntype SandwichCellProps = ConnectedProps<typeof connector> & {\n    value: SandwichCellModel,\n    onClick: (e: any) => void,\n}\n\nexport default connector(SandwichCell);","import React from 'react';\nimport { BoardModel } from '../../models/board';\nimport { GameOptions } from '../../models/control';\nimport Cell from './Cell';\nimport SandwichCell from './SandwichCell';\n\n\nclass Board extends React.Component<BoardProps> {\n    renderCell(i: number) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                onMouseDown={(e) => this.props.onMouseDown(e, i)}\n                onMouseOver={() => this.props.onMouseOver(i)}\n                key={String(i)}\n                highlightMatching={this.props.board.highlightMatching}\n            />\n        );\n    }\n\n    renderSandwichCell(isRow: boolean, id: number, key: string) {\n        const value = (isRow) ? this.props.board.rowSandwich[id] : this.props.board.colSandwich[id];\n        return (\n            <SandwichCell\n                value={value}\n                key={key}\n                onClick={(e) => this.props.onSelectSandwich(e, isRow, id)}\n            />\n        );\n    }\n    \n    renderEmptySandwichCell() {\n        return (\n            <div className=\"sandwich-cell\"></div>\n        );\n    }\n\n    renderRow(rowId: number) {\n        const startingCell = rowId * 9;\n        const cells = [...Array(9).keys()].map(x => this.renderCell(startingCell + x));\n\n        let sandwichCell = null;\n        if (this.props.gameOptions.sandwich) {\n            sandwichCell = this.renderSandwichCell(\n                true, rowId, `sandwich-row-${rowId}`);\n        }\n\n        return (\n            <div className=\"row\" key={startingCell}>\n                {sandwichCell}\n                {cells}\n            </div>\n        );\n    }\n\n    renderSandwichRow() {\n        const sandwichCells = [...Array(9).keys()].map(\n            x => this.renderSandwichCell(false, x, `sandwich-col-${x}`));\n\n        return (\n            <div className=\"row\">\n                {this.renderEmptySandwichCell()}\n                {sandwichCells}\n            </div>\n        );\n    }\n\n    render() {\n        let sandwichRow = null;\n        if (this.props.gameOptions.sandwich) {\n            sandwichRow = this.renderSandwichRow();\n        }\n\n        const rows = [...Array(9).keys()].map(x => this.renderRow(x));\n        return (\n            <div>\n                {sandwichRow}\n                {rows}\n            </div>\n        );\n    }\n}\n\ntype BoardProps = {\n    board: BoardModel,\n    gameOptions: GameOptions,\n    onClick: (e: any, i: number) => void,\n    onSelectSandwich: (e: any, isRow: boolean, i: number) => void,\n    onMouseDown: (e: any, i: number) => void,\n    onMouseOver: (i: number) => void,\n};\n\n\nexport default Board;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { updateDisplay } from '../../actions/control';\nimport { GameState } from '../Game';\n\n\nclass DisplayOptions extends React.Component<DisplayOptionsProps> {\n    renderSandwichDisplayOptions() {\n        if (this.props.sandwich) {\n            return (\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-sandwich-hint'\n                    label='Show Sandwich sum hints'\n                    checked={this.props.sandwichHint}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        sandwichHint: !this.props.sandwichHint\n                    })}\n                />\n            );\n        }\n        return null;\n    }\n\n    render() {\n        return (\n            <div id=\"display-options\">\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.highlightRestricted}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightRestricted: !this.props.highlightRestricted\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-matching-numbers'\n                    label='Highlight matching numbers'\n                    checked={this.props.highlightMatchingNumbers}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightMatchingNumbers: !this.props.highlightMatchingNumbers\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-auto-cleanup'\n                    label='Auto Cleanup corner &amp; center values'\n                    checked={this.props.autoCleanUp}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        autoCleanUp: !this.props.autoCleanUp\n                    })}\n                />\n                {this.renderSandwichDisplayOptions()}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.displayOptions, ...state.control.gameOptions};\n};\n\nconst connector = connect(mapStateToProps, { updateDisplay });\n\ntype DisplayOptionsProps = ConnectedProps<typeof connector>;\n\nexport default connector(DisplayOptions);\n","import _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { ControlModel, DisplayOptions, GameOptions } from '../models/control';\nimport { solveBoard } from '../utils/solver';\nimport { updateBoard } from './board';\nimport {\n    ACTION_UPDATE_DISPLAY,\n    ACTION_UPDATE_GAME_PLAY as ACTION_UPDATE_GAME_OPTIONS,\n    ActionTypes,\n    NO_OP\n    } from './types';\n\n\n\nexport const fillCenter = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.fillAllPossibleValues(control.gameOptions);\n    return updateBoard(newBoard);\n}\n\nexport const updateDisplay = (displayOptions: DisplayOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_DISPLAY,\n        payload: displayOptions,\n    };\n};\n\nexport const updateGameOptions = (gameOptions: GameOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_GAME_OPTIONS,\n        payload: gameOptions,\n    }\n};\n\nexport const verify = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllSelections();\n    newBoard.clearAllRestricteds();\n    newBoard.clearAllErrors();\n    let invalidCellIds = newBoard.getInvalidCellIds(control.gameOptions);\n    newBoard.setErrors(invalidCellIds);\n\n    let hasError = invalidCellIds.size > 0;\n\n    for (let i = 0; i < 9; i++) {\n        if (!newBoard.rowSandwich[i].isValid()) {\n            hasError = true;\n            newBoard.rowSandwich[i].error = true;\n        } else {\n            const want = newBoard.rowSandwich[i].value;\n            const has = newBoard.getRowSandwichSum(i);\n            if (want !== null && has !== null && want !== has) {\n                hasError = true;\n                newBoard.rowSandwich[i].error = true;\n            }\n        }\n\n        if (!newBoard.colSandwich[i].isValid()) {\n            hasError = true;\n            newBoard.colSandwich[i].error = true;\n        } else {\n            const want = newBoard.colSandwich[i].value;\n            const has = newBoard.getColSandwichSum(i);\n            if (want !== null && has !== null && want !== has) {\n                hasError = true;\n                newBoard.colSandwich[i].error = true;\n            }\n        }\n    }\n\n    alert(hasError ? 'Error found :(' : 'Looks good to me!');\n    return updateBoard(newBoard);\n}\n\nexport const solve = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let [newBoard, cntSolutions] = solveBoard(board, control);\n    if (cntSolutions >= 2) {\n        alert('Found at least ' + cntSolutions + ' solutions.');\n    } else {\n        alert('Found ' + cntSolutions + ' solution.');\n    }\n    if (newBoard !== null) {\n        return updateBoard(newBoard);\n    }\n    return NO_OP;\n}\n","import React from 'react';\nimport { QuestionSquare } from 'react-bootstrap-icons';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { updateGameOptions } from '../../actions/control';\nimport { GameState } from '../Game';\n\n\nclass GameOptions extends React.Component<GameOptionsProps> {\n    renderLabel(label: any, id: string, message: string) {\n        return (\n            <OverlayTrigger\n                placement=\"right\"\n                overlay={<Tooltip id={id}>{message}</Tooltip>}\n            >\n                <span>\n                    {label}&nbsp;\n                    <QuestionSquare />\n                </span>\n            </OverlayTrigger>\n        );\n    }\n\n    render() {\n        return (\n            <div id=\"game-play\">\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label={this.renderLabel('Anti Knight', 'tooltip-anti-knight', \"Two cells which are knight's move away from each other cannot contain the same digit.\")}\n                    checked={this.props.antiKnight}\n                    onChange={() => this.props.updateGameOptions({\n                        ...this.props,\n                        antiKnight: !this.props.antiKnight\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label={this.renderLabel('Anti King', 'tooltip-anti-king', \"Two cells which are king's move away from each other cannot contain the same digit.\")}\n                    checked={this.props.antiKing}\n                    onChange={() => this.props.updateGameOptions({\n                        ...this.props,\n                        antiKing: !this.props.antiKing\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-sandwich'\n                    label={this.renderLabel('Sandwich', 'tooltip-sandwich', 'The numbers in each row / column specify the sum between the number 1 and 9 in that row / column.')}\n                    checked={this.props.sandwich}\n                    onChange={() => this.props.updateGameOptions({\n                        ...this.props,\n                        sandwich: !this.props.sandwich\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.gameOptions};\n};\n\nconst connector = connect(mapStateToProps, { updateGameOptions });\n\ntype GameOptionsProps = ConnectedProps<typeof connector>;\n\nexport default connector(GameOptions);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { GameState } from '../Game';\nimport DisplayOptions from './DisplayOptions';\nimport GameOptions from './GameOptions';\n\n\nclass Control extends React.Component<ControlProps> {\n    renderUrl() {\n        if (!this.props.url) {\n            return;\n        }\n        return <a href={this.props.url}>Link</a>;\n    }\n\n    renderTooltip(id: string, message: string) {\n        return (\n            <Tooltip id={id}>\n                {message}\n            </Tooltip>\n        );\n    }\n\n    render() {\n        return (\n            <Form>\n                <div className=\"\">\n                    <Button onClick={this.props.onClickVerify}>\n                        Verify\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickUndo}\n                        className=\"btn-secondary\"\n                    >\n                        Undo\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickRedo}\n                        className=\"btn-secondary\"\n                    >\n                        Redo\n                    </Button>\n                </div>\n                <hr/>\n                <DisplayOptions />\n                <hr/>\n                <GameOptions />\n                <hr/>\n                <h4>Help</h4>\n                <OverlayTrigger\n                    placement=\"top\"\n                    overlay={this.renderTooltip('tooltip-fill-center', 'Show all possible values for each cell.')}\n                >\n                    <Button\n                        onClick={this.props.onClickFillCenters}\n                        className=\"btn-secondary\"\n                    >\n                        Fill all center values\n                    </Button>\n                </OverlayTrigger>\n                &nbsp;\n                <Button\n                    onClick={this.props.solve}\n                    className=\"btn-secondary\"\n                >\n                    Solve\n                </Button>\n                <hr/>\n                <Button\n                    onClick={this.props.generateUrl}\n                    className=\"btn-secondary\"\n                >\n                    Get URL\n                </Button>\n                &nbsp;\n                {this.renderUrl()}\n            </Form>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return { url: state.gameUrl };\n};\nconst connector = connect(mapStateToProps);\ntype ControlProps = ConnectedProps<typeof connector> & {\n    onClickVerify: () => void,\n    onClickUndo: () => void,\n    onClickRedo: () => void,\n    solve: () => void,\n    generateUrl: () => void,\n\n    onClickFillCenters: () => void,\n};\n\nexport default connector(Control);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport {\n    generateUrl,\n    initGameState,\n    keyDown,\n    mouseDown,\n    mouseOver,\n    mouseUp,\n    select,\n    selectSandwich\n    } from '../actions/board';\nimport { fillCenter, solve, verify } from '../actions/control';\nimport { redo, undo } from '../actions/history';\nimport { BoardModel } from '../models/board';\nimport { ControlModel } from '../models/control';\nimport { HistoryModel } from '../models/history';\nimport Board from './board/Board';\nimport Control from './control/Control';\n\n\nexport type GameState = {\n    board: BoardModel,\n    control: ControlModel,\n    history: HistoryModel,\n    gameUrl: string,\n};\n\nclass Game extends React.Component<GameProps, GameState> {\n    componentDidMount() {\n        if (this.props.encoded) {\n            this.props.initGameState(JSON.parse(window.atob(this.props.encoded)));\n        }\n    }\n\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.props.keyDown(this.props.board, this.props.control, this.props.history, e)}\n                tabIndex={0}\n                className=\"container\"\n                onMouseUp={() => this.props.mouseUp(this.props.board)}\n            >\n                <h1><a href=\"/sudoku\">Sudoku Tool</a></h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.props.board}\n                            gameOptions={this.props.control.gameOptions}\n                            onClick={(e, id) => this.props.select(this.props.board, this.props.control, id, !e.metaKey)}\n                            onSelectSandwich={(e, isRow, id) => this.props.selectSandwich(this.props.board, this.props.control, isRow, id)}\n                            onMouseDown={(e, id) => this.props.mouseDown(this.props.board, this.props.control, id, !e.metaKey)}\n                            onMouseOver={(id) => this.props.mouseOver(this.props.board, this.props.control, id)}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            onClickVerify={() => this.props.verify(this.props.board, this.props.control)}\n                            onClickUndo={() => this.props.undo(this.props.history)}\n                            onClickRedo={() => this.props.redo(this.props.history)}\n                            onClickFillCenters={() => this.props.fillCenter(this.props.board, this.props.control)}\n                            solve={() => this.props.solve(this.props.board, this.props.control)}\n                            generateUrl={() => this.props.generateUrl(this.props.board, this.props.control)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\ntype OwnProps = RouteComponentProps<{encoded: string}>;\nconst mapStateToProps = (state: GameState, ownProps: OwnProps) => {\n    return {\n        ...state,\n        encoded: ownProps.match.params.encoded,\n    };\n};\n\nconst connector = connect(mapStateToProps, {\n    // history actions.\n    redo,\n    undo,\n\n    // board actions.\n    initGameState,\n    generateUrl,\n    keyDown,\n    mouseDown,\n    mouseOver,\n    mouseUp,\n    select,\n    selectSandwich,\n\n    // control actions.\n    fillCenter,\n    verify,\n    solve,\n});\n\ntype GameProps = ConnectedProps<typeof connector>;\n\nexport default connector(Game);\n","export type GameOptions = {\n    antiKnight: boolean;\n    antiKing: boolean;\n    sandwich: boolean;\n};\n\nexport type DisplayOptions = {\n    highlightRestricted: boolean;\n    highlightMatchingNumbers: boolean;\n    autoCleanUp: boolean;\n    sandwichHint: boolean;\n};\n\nexport class ControlModel {\n    displayOptions: DisplayOptions;\n    gameOptions: GameOptions;\n\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n            highlightMatchingNumbers: false,\n            autoCleanUp: false,\n            sandwichHint: false,\n        };\n        this.gameOptions = {\n            antiKnight: false,\n            antiKing: false,\n            sandwich: false,\n        };\n    }\n}\n","import { BoardModel } from './board';\n\nexport class HistoryModel {\n    boards: Array<string>;\n    id: number;\n\n    constructor() {\n        this.boards = [];\n        this.id = 0;\n\n        const board = new BoardModel();\n        this.boards.push(board.serialize());\n    }\n}\n","import { combineReducers } from 'redux';\nimport { boardReducer } from './board';\nimport { controlReducer } from './control';\nimport { gameUrlReducer } from './gameUrl';\nimport { historyReducer } from './history';\n\n\nconst isMouseDownReducer = (isMouseDown = false) => {\n    return isMouseDown;\n}\n\nconst highlightMatchingReducer = (highlightMatching = null) => {\n    return highlightMatching;\n}\n\nexport default combineReducers({\n    board: boardReducer,\n    control: controlReducer,\n    history: historyReducer,\n    isMouseDown: isMouseDownReducer,\n    highlightMatching: highlightMatchingReducer,\n    gameUrl: gameUrlReducer,\n});\n","import {\n    ACTION_INIT_GAME_STATE,\n    ACTION_REDO,\n    ACTION_UNDO,\n    ACTION_UPDATE_BOARD,\n    ActionTypes\n    } from '../actions/types';\nimport { BoardModel } from '../models/board';\n\nexport const boardReducer = (board = new BoardModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        return action.payload.board;\n    }\n    if (action.type === ACTION_UNDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n    if (action.type === ACTION_REDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n    if (action.type === ACTION_INIT_GAME_STATE) {\n        return action.payload.board;\n    }\n\n    return board;\n}\n","import {\n    ACTION_INIT_GAME_STATE,\n    ACTION_UPDATE_DISPLAY,\n    ACTION_UPDATE_GAME_PLAY,\n    ActionTypes\n    } from '../actions/types';\nimport { ControlModel } from '../models/control';\n\nexport const controlReducer = (control: ControlModel = new ControlModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_DISPLAY) {\n        return {...control, displayOptions: action.payload};\n    }\n    if (action.type === ACTION_UPDATE_GAME_PLAY) {\n        return {...control, gameOptions: action.payload};\n    }\n    if (action.type === ACTION_INIT_GAME_STATE) {\n        return {...control, gameOptions: action.payload.gameOptions};\n    }\n    return control;\n};\n","import assert from 'assert';\nimport {\n    ACTION_INIT_GAME_STATE,\n    ACTION_REDO,\n    ACTION_UNDO,\n    ACTION_UPDATE_BOARD,\n    ActionTypes\n    } from '../actions/types';\nimport { HistoryModel } from '../models/history';\n\nexport const historyReducer = (history = new HistoryModel(), action: ActionTypes) => {\n    if (action.type === ACTION_INIT_GAME_STATE) {\n        return {\n            boards: [action.payload.board.serialize()],\n            id: 0,\n        };\n    }\n    if (action.type === ACTION_UPDATE_BOARD) {\n        const serialized = action.payload.board.serialize();\n\n        // Only update history if the serialized new board is different.\n        // Thus, we ignore all selections and restrictions.\n        if (serialized !== history.boards[history.id]) {\n            // Remove the rest of history.\n            // This clean data in case we do lots of undo, and then make a new move.\n            history.boards = history.boards.slice(0, history.id + 1);\n\n            // Update history.\n            history.boards.push(serialized);\n            history.id += 1;\n        }\n        return history;\n    }\n    if (action.type === ACTION_UNDO) {\n        assert(history.id > 0);\n        return {...history, id: history.id - 1 };\n    }\n    if (action.type === ACTION_REDO) {\n        assert(history.id + 1 < history.boards.length);\n        return {...history, id: history.id + 1 };\n    }\n    return history;\n}\n","import { ACTION_GENERATE_URL, ActionTypes } from '../actions/types';\n\nexport const gameUrlReducer = (gameUrl = null, action: ActionTypes) => {\n    if (action.type === ACTION_GENERATE_URL) {\n        return action.payload.url;\n    }\n    return gameUrl;\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { createStore } from 'redux';\nimport Game from './components/Game';\nimport './index.css';\nimport reducers from './reducers';\n\n\nconst store = createStore(\n    reducers,\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <Route path=\"/:encoded?\" component={Game} />\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}