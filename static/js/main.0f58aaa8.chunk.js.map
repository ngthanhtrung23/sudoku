{"version":3,"sources":["actions/types.ts","actions/history.ts","actions/board.ts","utils/solver.ts","components/board/Cell.tsx","components/board/Board.tsx","components/control/DisplayOptions.tsx","actions/control.ts","components/control/GameOptions.tsx","components/control/Control.tsx","components/Game.tsx","utils/set.ts","models/cell.ts","models/board.ts","models/control.ts","models/history.ts","reducers/index.ts","reducers/board.ts","reducers/control.ts","reducers/history.ts","reducers/gameUrl.ts","index.tsx"],"names":["NO_OP","type","redo","history","id","boards","length","payload","serialized","undo","updateBoard","board","select","control","cellId","clearSelection","setMultiSelect","newBoard","_","cloneDeep","multiSelectMode","clearAllSelections","clearAllRestricteds","highlightMatching","setSelected","displayOptions","highlightRestricted","setRestricted","gameOptions","highlightMatchingNumbers","selectedValues","getSelectedValues","size","selectedValue","values","next","value","move","d_row","d_col","r","c","i","cells","selected","toRowCol","toCellId","bitCount","n","bitContains","bit","solveBoard","fillAllPossibleValues","map","cell","candidates","mask","centerValues","attempt","bestId","solution","setValueOfSingleCell","String","fromCharCode","firstSolution","cntSolutions","saveValues","clone","saveCandidates","neighborIds","getVisibleCells","neighborId","cnt","Cell","this","props","className","sortedValues","Array","from","cornerValues","sort","classes","shouldHighlightMatching","key","isRegionTop","push","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","restricted","isFixed","error","join","onClick","onMouseDown","onMouseOver","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","Board","e","startingCell","keys","x","renderCell","rows","renderRow","DisplayOptions","Form","Check","label","checked","onChange","updateDisplay","autoCleanUp","connector","connect","state","GameOptions","message","OverlayTrigger","placement","overlay","Tooltip","renderLabel","antiKnight","updateGameOptions","antiKing","Control","url","href","Button","onClickVerify","onClickUndo","onClickRedo","renderTooltip","onClickFillCenters","solve","generateUrl","renderUrl","gameUrl","Game","encoded","initGameState","JSON","parse","window","atob","onKeyDown","keyDown","tabIndex","onMouseUp","mouseUp","metaKey","mouseDown","mouseOver","verify","fillCenter","ownProps","match","params","decodedState","gameState","location","origin","pathname","btoa","stringify","isShift","shiftKey","isMeta","keyCode","KeyCode","newValue","toggleCornerValuesOfSelectedCells","toggleCornerValues","preventDefault","toggleCenterValuesOfSelectedCells","toggleCenterValues","clearAllErrors","setValueOfSelectedCells","setValue","unsetSelectedCells","unsetValue","clearCornerValuesOfSelectedCells","clearCenterValuesOfSelectedCells","pressBackspace","pressEsc","Object","assign","invalidCellIds","getInvalidCellIds","setErrors","alert","set_intersection","a","b","Set","filter","has","CellModel","row","col","BoardModel","result","forEach","obj","getRegionByPosition","col2","add","row2","region","getRegion","di","dj","isInside","delete","myValue","seenValues","getPossibleValues","cellIds","autoCleanup","clear","ControlModel","HistoryModel","serialize","combineReducers","action","load","slice","assert","isMouseDown","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.0f58aaa8.chunk.js","sourcesContent":["import { BoardModel } from '../models/board';\nimport { DisplayOptions, GameOptions } from '../models/control';\n\nexport const ACTION_NO_OP = 'ACTION_NO_OP';\nexport interface NoOpAction {\n    type: typeof ACTION_NO_OP,\n};\nexport const NO_OP: NoOpAction = { type: ACTION_NO_OP };\n\n// Board actions.\nexport const ACTION_UPDATE_BOARD = 'ACTION_UPDATE_BOARD';\nexport const ACTION_GENERATE_URL = 'ACTION_GENERATE_URL';\nexport const ACTION_INIT_GAME_STATE = 'ACTION_INIT_GAME_STATE';\n\nexport interface UpdateBoardAction {\n    type: typeof ACTION_UPDATE_BOARD,\n    payload: {\n        board: BoardModel,\n    },\n};\nexport interface GenerateUrlAction {\n    type: typeof ACTION_GENERATE_URL,\n    payload: {\n        url: string,\n    },\n};\nexport interface InitGameStateAction {\n    type: typeof ACTION_INIT_GAME_STATE,\n    payload: {\n        values: string,\n        gameOptions: GameOptions,\n    }\n};\n\n// Control actions.\nexport const ACTION_UPDATE_DISPLAY = 'ACTION_UPDATE_DISPLAY';\nexport const ACTION_UPDATE_GAME_PLAY = 'ACTION_UPDATE_GAME_PLAY';\n\ninterface UpdateDisplayAction {\n    type: typeof ACTION_UPDATE_DISPLAY,\n    payload: DisplayOptions,\n};\n\ninterface UpdateGameOptionsAction {\n    type: typeof ACTION_UPDATE_GAME_PLAY,\n    payload: GameOptions,\n}\n\n// History actions.\nexport const ACTION_REDO = 'ACTION_REDO';\nexport const ACTION_UNDO = 'ACTION_UNDO';\n\nexport interface RedoAction {\n    type: typeof ACTION_REDO,\n    payload: {\n        serialized: string,\n    },\n};\nexport interface UndoAction {\n    type: typeof ACTION_UNDO,\n    payload: {\n        serialized: string,\n    },\n};\n\n// Combine all action types.\nexport type ActionTypes = NoOpAction\n    | UpdateBoardAction | GenerateUrlAction | InitGameStateAction\n    | UpdateDisplayAction | UpdateGameOptionsAction\n    | RedoAction | UndoAction;\n","import { ACTION_REDO, ACTION_UNDO, NO_OP, ActionTypes } from './types';\nimport { HistoryModel } from '../models/history';\n\n\nexport const redo = (history: HistoryModel): ActionTypes => {\n    if (history.id >= history.boards.length - 1) {\n        // Nothing to redo.\n        return NO_OP;\n    }\n    return {\n        type: ACTION_REDO,\n        payload: {\n            serialized: history.boards[history.id + 1],\n        },\n    };\n};\n\nexport const undo = (history: HistoryModel): ActionTypes => {\n    if (history.id === 0) {\n        // Nothing to do.\n        return NO_OP;\n    }\n    return {\n        type: ACTION_UNDO,\n        payload: {\n            serialized: history.boards[history.id - 1],\n        },\n    };\n};\n","import * as KeyCode from 'keycode-js';\nimport _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\nimport { ControlModel } from '../models/control';\nimport { HistoryModel } from '../models/history';\nimport { redo, undo } from './history';\nimport {\n    ACTION_GENERATE_URL,\n    ACTION_INIT_GAME_STATE,\n    ACTION_UPDATE_BOARD,\n    ActionTypes,\n    NO_OP\n    } from './types';\n\n\nexport const initGameState = (decodedState: any): ActionTypes => {\n    return {\n        type: ACTION_INIT_GAME_STATE,\n        payload: {\n            values: decodedState.values,\n            gameOptions: decodedState.gameOptions,\n        },\n    }\n};\n\nexport const generateUrl = (board: BoardModel, control: ControlModel): ActionTypes => {\n    const gameState = {\n        values: board.cells.map(cell => {\n            if (cell.value) return cell.value;\n            else return '0';\n        }).join(''),\n        gameOptions: control.gameOptions,\n    };\n    return {\n        type: ACTION_GENERATE_URL,\n        payload: {\n            url: window.location.origin + window.location.pathname + '#/' + window.btoa(JSON.stringify(gameState)),\n        },\n    };\n};\n\nexport const updateBoard = (board: BoardModel): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_BOARD,\n        payload: {\n            board: board,\n        }\n    };\n};\n\nconst pressEsc = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllSelections();\n    newBoard.clearAllRestricteds();\n    newBoard.highlightMatching = null;\n    return updateBoard(newBoard);\n}\n\nexport const select = (\n        board: BoardModel,\n        control: ControlModel,\n        cellId: number,\n        clearSelection: boolean = true,\n        setMultiSelect: boolean | null = null\n        ): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    if (setMultiSelect !== null) {\n        newBoard.multiSelectMode = setMultiSelect;\n    }\n\n    if (clearSelection) {\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n        newBoard.highlightMatching = null;\n    } else {\n        newBoard.clearAllRestricteds();\n    }\n\n    newBoard.setSelected(cellId);\n\n    if (control.displayOptions.highlightRestricted) {\n        newBoard.setRestricted(control.gameOptions);\n    }\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n\n    return updateBoard(newBoard);\n}\n\nexport const mouseDown = (board: BoardModel, control: ControlModel, cellId: number, clearSelection: boolean): ActionTypes => {\n    return select(board, control, cellId, clearSelection, true);\n}\n\nexport const mouseOver = (board: BoardModel, control: ControlModel, cellId: number): ActionTypes => {\n    if (!board.multiSelectMode) {\n        return NO_OP;\n    }\n    return select(board, control, cellId, false);\n}\n\nexport const mouseUp = (board: BoardModel): ActionTypes => {\n    return updateBoard(Object.assign(board, { multiSelectMode: false}));\n}\n\nconst setValue = (board: BoardModel, control: ControlModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.setValueOfSelectedCells(\n        newValue,\n        control.gameOptions,\n        control.displayOptions.autoCleanUp);\n\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n    return updateBoard(newBoard);\n};\n\nconst unsetValue = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.unsetSelectedCells();\n\n    return updateBoard(newBoard);\n};\n\nconst toggleCornerValues = (board: BoardModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n    return updateBoard(newBoard);\n}\n\nconst toggleCenterValues = (board: BoardModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.toggleCenterValuesOfSelectedCells(newValue);\n    return updateBoard(newBoard);\n}\n\n// Move selected cell in direction (d_row, d_col).\n// If there are more than one selected cells, only move the first one.\nconst move = (board: BoardModel, control: ControlModel, d_row: number, d_col: number): ActionTypes => {\n    let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n    for (let i = 0; i < 81; i++) {\n        if (board.cells[i].selected) {\n            [r, c] = board.toRowCol(i);\n            break;\n        }\n    }\n    r = (r + d_row + 9) % 9;\n    c = (c + d_col + 9) % 9;\n    return select(board, control, board.toCellId(r, c));\n}\n\nconst pressBackspace = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.unsetSelectedCells();\n\n    newBoard.clearCornerValuesOfSelectedCells();\n    newBoard.clearCenterValuesOfSelectedCells();\n\n    return updateBoard(newBoard);\n}\n\nexport const keyDown = (board: BoardModel, control: ControlModel, history: HistoryModel, e: any): ActionTypes => {\n    let isShift = !!e.shiftKey;\n    let isMeta = !!e.metaKey;\n\n    // Pressed 1-9\n    if (e.keyCode >= KeyCode.KEY_1 && e.keyCode <= KeyCode.KEY_9) {\n        const value = String.fromCharCode(e.keyCode) as CellValue;\n        if (isShift) {\n            return toggleCornerValues(board, value)\n        } else if (isMeta) {\n            e.preventDefault();\n            return toggleCenterValues(board, value);\n        } else {\n            return setValue(board, control, value);\n        }\n    }\n\n    switch (e.keyCode) {\n        case KeyCode.KEY_SPACE:\n            return unsetValue(board);\n        case KeyCode.KEY_BACK_SPACE:\n            e.preventDefault();\n            return pressBackspace(board);\n        case KeyCode.KEY_DOWN:\n            return move(board, control, +1, 0);\n        case KeyCode.KEY_UP:\n            return move(board, control, -1, 0);\n        case KeyCode.KEY_LEFT:\n            return move(board, control, 0, -1);\n        case KeyCode.KEY_RIGHT:\n            return move(board, control, 0, +1);\n        case KeyCode.KEY_ESCAPE:\n            return pressEsc(board);\n        case KeyCode.KEY_Z:\n        case KeyCode.KEY_U:\n            return undo(history);\n        case KeyCode.KEY_Y:\n        case KeyCode.KEY_R:\n            return redo(history);\n        default:\n    }\n    return NO_OP;\n}\n","import _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\nimport { ControlModel } from '../models/control';\n\nconst bitCount = (n: number): number => {\n    n = n - ((n >> 1) & 0x55555555)\n    n = (n & 0x33333333) + ((n >> 2) & 0x33333333)\n    return ((n + (n >> 4) & 0xF0F0F0F) * 0x1010101) >> 24\n}\n\nconst bitContains = (n: number, bit: number): boolean => {\n    return ((n >> bit) & 1) > 0;\n}\n\nconst bitRemoveIfExists = (n: number, bit: number): number => {\n    if (!bitContains(n, bit)) {\n        return n;\n    }\n    return n - (1<<bit);\n}\n\nconst attempt = (board: BoardModel, control: ControlModel, values: Array<number>, candidates: Array<number>): [BoardModel | null, number] => {\n    // Find cell with minimum number of candidates.\n    let bestId = -1;\n    for (let i = 0; i < 81; i++) {\n        if (values[i] === 0) {\n            if (bestId < 0 || bitCount(values[i]) < bitCount(values[bestId])) {\n                bestId = i;\n            }\n        }\n    }\n    if (bestId < 0) {\n        // No more unfilled cell --> we have found a solution.\n        let solution = _.cloneDeep(board);\n        for (let i = 0; i < 81; i++) {\n            solution.setValueOfSingleCell(i, String.fromCharCode(48 + values[i]) as CellValue, control.gameOptions, false);\n        }\n        return [solution, 1];\n    }\n\n    if (bitCount(candidates[bestId]) === 0) {\n        return [null, 0];\n    }\n\n    let firstSolution = null;\n    let cntSolutions = 0;\n    for (let value = 1; value <= 9; value++) {\n        if (bitContains(candidates[bestId], value)) {\n            const saveValues = _.clone(values);\n            const saveCandidates = _.clone(candidates);\n\n            values[bestId] = value;\n            const neighborIds = board.getVisibleCells(bestId, control.gameOptions);\n            for (let neighborId of neighborIds) {\n                candidates[neighborId] = bitRemoveIfExists(candidates[neighborId], value);\n            };\n\n            let [solution, cnt] = attempt(board, control, values, candidates);\n            if (cnt > 0) {\n                if (firstSolution === null) {\n                    firstSolution = solution;\n                }\n                cntSolutions += cnt;\n                if (cntSolutions >= 2) {\n                    break;\n                }\n            }\n\n            values = saveValues;\n            candidates = saveCandidates;\n        }\n    }\n    return [firstSolution, cntSolutions];\n};\n\nexport const solveBoard = (board: BoardModel, control: ControlModel): [BoardModel | null, number] => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.fillAllPossibleValues(control.gameOptions);\n\n    let values = newBoard.cells.map(cell => {\n        if (!cell.value) return 0;\n        else return +cell.value;\n    });\n    let candidates = newBoard.cells.map(cell => {\n        let mask = 0;\n        for (let value of cell.centerValues) {\n            if (value !== null) {\n                mask += 1 << (+value);\n            }\n        }\n        return mask;\n    });\n    return attempt(newBoard, control, values, candidates);\n};\n","import React from 'react';\nimport { CellModel, CellValue } from '../../models/cell';\n\n\ntype CellProps = {\n    cell: CellModel,\n    onClick: (e: any) => void,\n    onMouseDown: (e: any) => void,\n    onMouseOver: (e: any) => void,\n    key: string,\n    highlightMatching: CellValue,\n};\n\nclass Cell extends React.Component<CellProps> {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    shouldHighlightMatching(value: CellValue) {\n        return this.props.highlightMatching && value === this.props.highlightMatching;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"corner-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"center-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        } else if (this.shouldHighlightMatching(this.props.cell.value)) {\n            classes.push('matching');\n        } else if (this.props.cell.restricted) {\n            classes.push('restricted');\n        } else if (this.props.cell.isFixed) {\n            classes.push('fixed');\n        }\n        if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                onMouseDown={this.props.onMouseDown}\n                onMouseOver={this.props.onMouseOver}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nexport default Cell;\n","import React from 'react';\n\nimport Cell from './Cell';\nimport { BoardModel } from '../../models/board';\n\nclass Board extends React.Component<BoardProps> {\n    renderCell(i: number) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                onMouseDown={(e) => this.props.onMouseDown(e, i)}\n                onMouseOver={() => this.props.onMouseOver(i)}\n                key={String(i)}\n                highlightMatching={this.props.board.highlightMatching}\n            />\n        );\n    }\n\n    renderRow(startingCell: number) {\n        const cells = [...Array(9).keys()].map(x => this.renderCell(startingCell + x));\n        return (\n            <div className=\"row\" key={startingCell}>\n                {cells}\n            </div>\n        );\n    }\n\n    render() {\n        const rows = [...Array(9).keys()].map(x => this.renderRow(9 * x));\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\ntype BoardProps = {\n    board: BoardModel,\n    onClick: (e: any, i: number) => void,\n    onMouseDown: (e: any, i: number) => void,\n    onMouseOver: (i: number) => void,\n};\n\n\nexport default Board;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { updateDisplay } from '../../actions/control';\nimport { GameState } from '../Game';\n\nclass DisplayOptions extends React.Component<DisplayOptionsProps> {\n    render() {\n        return (\n            <div id=\"display-options\">\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.highlightRestricted}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightRestricted: !this.props.highlightRestricted\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-matching-numbers'\n                    label='Highlight matching numbers'\n                    checked={this.props.highlightMatchingNumbers}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightMatchingNumbers: !this.props.highlightMatchingNumbers\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-auto-cleanup'\n                    label='Auto Cleanup corner &amp; center values'\n                    checked={this.props.autoCleanUp}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        autoCleanUp: !this.props.autoCleanUp\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.displayOptions};\n};\n\nconst connector = connect(mapStateToProps, { updateDisplay });\n\ntype DisplayOptionsProps = ConnectedProps<typeof connector>;\n\nexport default connector(DisplayOptions);\n","import _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { ControlModel, DisplayOptions, GameOptions } from '../models/control';\nimport { solveBoard } from '../utils/solver';\nimport { updateBoard } from './board';\nimport {\n    ACTION_UPDATE_DISPLAY,\n    ACTION_UPDATE_GAME_PLAY as ACTION_UPDATE_GAME_OPTIONS,\n    ActionTypes,\n    NO_OP\n    } from './types';\n\n\n\nexport const fillCenter = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.fillAllPossibleValues(control.gameOptions);\n    return updateBoard(newBoard);\n}\n\nexport const updateDisplay = (displayOptions: DisplayOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_DISPLAY,\n        payload: displayOptions,\n    };\n};\n\nexport const updateGameOptions = (gameOptions: GameOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_GAME_OPTIONS,\n        payload: gameOptions,\n    }\n};\n\nexport const verify = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllErrors();\n    let invalidCellIds = newBoard.getInvalidCellIds(control.gameOptions);\n    newBoard.setErrors(invalidCellIds);\n\n    alert(invalidCellIds.size > 0 ? 'Error found :(' : 'Looks good to me!');\n    return updateBoard(newBoard);\n}\n\nexport const solve = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let [newBoard, cntSolutions] = solveBoard(board, control);\n    if (cntSolutions >= 2) {\n        alert('Found at least ' + cntSolutions + ' solutions.');\n    } else {\n        alert('Found ' + cntSolutions + ' solution.');\n    }\n    if (newBoard !== null) {\n        return updateBoard(newBoard);\n    }\n    return NO_OP;\n}\n","import React from 'react';\nimport { QuestionSquare } from 'react-bootstrap-icons';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { updateGameOptions } from '../../actions/control';\nimport { GameState } from '../Game';\n\n\nclass GameOptions extends React.Component<GameOptionsProps> {\n    renderLabel(label: any, id: string, message: string) {\n        return (\n            <OverlayTrigger\n                placement=\"right\"\n                overlay={<Tooltip id={id}>{message}</Tooltip>}\n            >\n                <span>\n                    {label}&nbsp;\n                    <QuestionSquare />\n                </span>\n            </OverlayTrigger>\n        );\n    }\n\n    render() {\n        return (\n            <div id=\"game-play\">\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label={this.renderLabel('Anti Knight', 'tooltip-anti-knight', \"Two cells which are knight's move away from each other cannot contain the same digit.\")}\n                    checked={this.props.antiKnight}\n                    onChange={() => this.props.updateGameOptions({\n                        ...this.props,\n                        antiKnight: !this.props.antiKnight\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label={this.renderLabel('Anti King', 'tooltip-anti-king', \"Two cells which are king's move away from each other cannot contain the same digit.\")}\n                    checked={this.props.antiKing}\n                    onChange={() => this.props.updateGameOptions({\n                        ...this.props,\n                        antiKing: !this.props.antiKing\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.gameOptions};\n};\n\nconst connector = connect(mapStateToProps, { updateGameOptions: updateGameOptions });\n\ntype GameOptionsProps = ConnectedProps<typeof connector>;\n\nexport default connector(GameOptions);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { GameState } from '../Game';\nimport DisplayOptions from './DisplayOptions';\nimport GameOptions from './GameOptions';\n\n\nclass Control extends React.Component<ControlProps> {\n    renderUrl() {\n        if (!this.props.url) {\n            return;\n        }\n        return <a href={this.props.url}>Link</a>;\n    }\n\n    renderTooltip(id: string, message: string) {\n        return (\n            <Tooltip id={id}>\n                {message}\n            </Tooltip>\n        );\n    }\n\n    render() {\n        return (\n            <Form>\n                <div className=\"\">\n                    <Button onClick={this.props.onClickVerify}>\n                        Verify\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickUndo}\n                        className=\"btn-secondary\"\n                    >\n                        Undo\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickRedo}\n                        className=\"btn-secondary\"\n                    >\n                        Redo\n                    </Button>\n                </div>\n                <hr/>\n                <DisplayOptions />\n                <hr/>\n                <GameOptions />\n                <hr/>\n                <h4>Help</h4>\n                <OverlayTrigger\n                    placement=\"top\"\n                    overlay={this.renderTooltip('tooltip-fill-center', 'Show all possible values for each cell.')}\n                >\n                    <Button\n                        onClick={this.props.onClickFillCenters}\n                        className=\"btn-secondary\"\n                    >\n                        Fill all center values\n                    </Button>\n                </OverlayTrigger>\n                &nbsp;\n                <Button\n                    onClick={this.props.solve}\n                    className=\"btn-secondary\"\n                >\n                    Solve\n                </Button>\n                <hr/>\n                <Button\n                    onClick={this.props.generateUrl}\n                    className=\"btn-secondary\"\n                >\n                    Get URL\n                </Button>\n                &nbsp;\n                {this.renderUrl()}\n            </Form>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return { url: state.gameUrl };\n};\nconst connector = connect(mapStateToProps);\ntype ControlProps = ConnectedProps<typeof connector> & {\n    onClickVerify: () => void,\n    onClickUndo: () => void,\n    onClickRedo: () => void,\n    solve: () => void,\n    generateUrl: () => void,\n\n    onClickFillCenters: () => void,\n};\n\nexport default connector(Control);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport {\n    generateUrl,\n    initGameState,\n    keyDown,\n    mouseDown,\n    mouseOver,\n    mouseUp,\n    select\n    } from '../actions/board';\nimport { fillCenter, solve, verify } from '../actions/control';\nimport { redo, undo } from '../actions/history';\nimport { BoardModel } from '../models/board';\nimport { ControlModel } from '../models/control';\nimport { HistoryModel } from '../models/history';\nimport Board from './board/Board';\nimport Control from './control/Control';\n\n\nexport type GameState = {\n    board: BoardModel,\n    control: ControlModel,\n    history: HistoryModel,\n    gameUrl: string,\n};\n\nclass Game extends React.Component<GameProps, GameState> {\n    componentDidMount() {\n        if (this.props.encoded) {\n            this.props.initGameState(JSON.parse(window.atob(this.props.encoded)));\n        }\n    }\n\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.props.keyDown(this.props.board, this.props.control, this.props.history, e)}\n                tabIndex={0}\n                className=\"container\"\n                onMouseUp={() => this.props.mouseUp(this.props.board)}\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.props.board}\n                            onClick={(e, id) => this.props.select(this.props.board, this.props.control, id, !e.metaKey)}\n                            onMouseDown={(e, id) => this.props.mouseDown(this.props.board, this.props.control, id, !e.metaKey)}\n                            onMouseOver={(id) => this.props.mouseOver(this.props.board, this.props.control, id)}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            onClickVerify={() => this.props.verify(this.props.board, this.props.control)}\n                            onClickUndo={() => this.props.undo(this.props.history)}\n                            onClickRedo={() => this.props.redo(this.props.history)}\n                            onClickFillCenters={() => this.props.fillCenter(this.props.board, this.props.control)}\n                            solve={() => this.props.solve(this.props.board, this.props.control)}\n                            generateUrl={() => this.props.generateUrl(this.props.board, this.props.control)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\ntype OwnProps = RouteComponentProps<{encoded: string}>;\nconst mapStateToProps = (state: GameState, ownProps: OwnProps) => {\n    return {\n        ...state,\n        encoded: ownProps.match.params.encoded,\n    };\n};\n\nconst connector = connect(mapStateToProps, {\n    // history actions.\n    redo,\n    undo,\n\n    // board actions.\n    initGameState,\n    generateUrl,\n    keyDown,\n    mouseDown,\n    mouseOver,\n    mouseUp,\n    select,\n\n    // control actions.\n    fillCenter,\n    verify,\n    solve,\n});\n\ntype GameProps = ConnectedProps<typeof connector>;\n\nexport default connector(Game);\n","export const set_intersection = (a: Set<any>, b: Set<any>): Set<any> => {\n    return new Set([...a].filter(x => b.has(x)));\n}\n\nexport const set_difference = (a: Set<any>, b: Set<any>): Set<any> => {\n    return new Set([...a].filter(x => !b.has(x)));\n}\n","export type CellValue = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | null;\n\nexport class CellModel {\n    value: CellValue;\n    cornerValues: Set<CellValue>;\n    centerValues: Set<CellValue>;\n    selected: boolean;\n    restricted: boolean;\n    error: boolean;\n    row: number;\n    col: number;\n    id: number;\n    isFixed: boolean | null;\n\n    constructor(id: number) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n        this.isFixed = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop(): boolean {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom(): boolean {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft(): boolean {\n        return this.col % 3 === 0;\n    }\n    isRegionRight(): boolean {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop(): boolean {\n        return this.row === 0;\n    }\n    isBoardBottom(): boolean {\n        return this.row === 8;\n    }\n    isBoardLeft(): boolean {\n        return this.col === 0;\n    }\n    isBoardRight(): boolean {\n        return this.col === 8;\n    }\n}\n","import { set_difference, set_intersection } from '../utils/set';\nimport { CellModel, CellValue } from './cell';\nimport { GameOptions } from './control';\n\nclass BoardModel {\n    cells: Array<CellModel>;\n    highlightMatching: CellValue;\n    multiSelectMode: boolean;\n\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n        this.highlightMatching = null;\n        this.multiSelectMode = false;\n    }\n\n    serialize(): string {\n        let result: Array<{\n            value: CellValue;\n            cornerValues: Array<CellValue>;\n            centerValues: Array<CellValue>;\n        }> = [];\n\n        this.cells.forEach((cell) => {\n            result.push({\n                value: cell.value,\n                cornerValues: Array.from(cell.cornerValues),\n                centerValues: Array.from(cell.centerValues),\n            });\n        });\n        return JSON.stringify(result);\n    }\n\n    load(serialized: string): void {\n        this.clearAllErrors();\n        this.clearAllRestricteds();\n        this.clearAllSelections();\n\n        let obj = JSON.parse(serialized);\n        for (let i = 0; i < 81; i++) {\n            this.cells[i].value = obj[i].value;\n            this.cells[i].cornerValues = new Set(obj[i].cornerValues);\n            this.cells[i].centerValues = new Set(obj[i].centerValues);\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row: number, col: number): boolean {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row: number, col: number): number {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId: number): [number, number] {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row: number, col: number): number {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId: number): number {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId: number, gameOptions: GameOptions): Set<number> {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result: Set<number> = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gameOptions.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gameOptions.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gameOptions: GameOptions): Set<number> {\n        let result: Set<number> = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gameOptions).forEach(neighborId => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    getPossibleValues(cellId: number, gameOptions: GameOptions): Set<CellValue> {\n        const seenValues = Array.from(this.getVisibleCells(cellId, gameOptions))\n            .map(neighborId => this.cells[neighborId].value)\n            .filter(x => x);\n\n        return set_difference(new Set(['1', '2', '3', '4', '5', '6', '7', '8', '9']), new Set(seenValues));\n    }\n\n    fillAllPossibleValues(gameOptions: GameOptions): void {\n        this.cells.forEach(cell => {\n            if (!cell.value) {\n                cell.centerValues = this.getPossibleValues(cell.id, gameOptions);\n            }\n        });\n    }\n\n    setSelected(cellId: number): void {\n        this.cells[cellId].selected = true;\n    }\n\n    getSelectedValues(): Set<CellValue> {\n        return new Set(\n            this.cells\n                .filter((cell) => cell.selected)\n                .filter((cell) => cell.value)\n                .map((cell) => cell.value)\n        );\n    }\n\n    setRestricted(gameOptions: GameOptions): void {\n        let restricted: Set<any> | null = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gameOptions);\n                } else {\n                    restricted = set_intersection(this.getVisibleCells(id, gameOptions), restricted);\n                }\n            }\n        }\n\n        if (restricted) {\n            restricted.forEach((cellId) => {\n                this.cells[cellId].restricted = true;\n            });\n        }\n    }\n\n    setErrors(cellIds: Set<number>): void {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSingleCell(cellId: number, newValue: CellValue, gameOptions: GameOptions, autoCleanup: boolean): void {\n        if (this.cells[cellId].isFixed) {\n            return;\n        }\n        this.cells[cellId].value = newValue;\n        if (autoCleanup) {\n            this.getVisibleCells(this.cells[cellId].id, gameOptions).forEach((id) => {\n                this.cells[id].cornerValues.delete(newValue);\n                this.cells[id].centerValues.delete(newValue);\n            });\n        }\n    }\n\n    setValueOfSelectedCells(newValue: CellValue, gameOptions: GameOptions, autoCleanup: boolean = false): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                this.setValueOfSingleCell(cell.id, newValue, gameOptions, autoCleanup);\n            }\n        });\n    }\n\n    unsetSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected && !cell.isFixed) {\n                cell.value = null;\n            }\n        });\n    }\n\n    toggleCornerValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections(): void {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds(): void {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors(): void {\n        this.cells.forEach((cell) => {\n            cell.error = false;\n        });\n    }\n}\n\nexport { BoardModel };\n","export type GameOptions = {\n    antiKnight: boolean;\n    antiKing: boolean;\n};\n\nexport type DisplayOptions = {\n    highlightRestricted: boolean;\n    highlightMatchingNumbers: boolean;\n    autoCleanUp: boolean;\n};\n\nexport class ControlModel {\n    displayOptions: DisplayOptions;\n    gameOptions: GameOptions;\n\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n            highlightMatchingNumbers: false,\n            autoCleanUp: false,\n        };\n        this.gameOptions = {\n            antiKnight: false,\n            antiKing: false,\n        };\n    }\n}\n","import { BoardModel } from \"./board\";\n\nexport class HistoryModel {\n    boards: Array<string>;\n    id: number;\n\n    constructor() {\n        this.boards = [];\n        this.id = 0;\n\n        const board = new BoardModel();\n        this.boards.push(board.serialize());\n    }\n}\n","import { combineReducers } from 'redux';\nimport { boardReducer } from './board';\nimport { controlReducer } from './control';\nimport { gameUrlReducer } from './gameUrl';\nimport { historyReducer } from './history';\n\n\nconst isMouseDownReducer = (isMouseDown = false) => {\n    return isMouseDown;\n}\n\nconst highlightMatchingReducer = (highlightMatching = null) => {\n    return highlightMatching;\n}\n\nexport default combineReducers({\n    board: boardReducer,\n    control: controlReducer,\n    history: historyReducer,\n    isMouseDown: isMouseDownReducer,\n    highlightMatching: highlightMatchingReducer,\n    gameUrl: gameUrlReducer,\n});\n","import {\n    ACTION_INIT_GAME_STATE,\n    ACTION_REDO,\n    ACTION_UNDO,\n    ACTION_UPDATE_BOARD,\n    ActionTypes\n    } from '../actions/types';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\n\nexport const boardReducer = (board = new BoardModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        return action.payload.board;\n    }\n    if (action.type === ACTION_UNDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n    if (action.type === ACTION_REDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n    if (action.type === ACTION_INIT_GAME_STATE) {\n        const board = new BoardModel();\n        for (let i = 0; i < 81; i++) {\n            const value = action.payload.values[i];\n            if (value !== '0') {\n                board.cells[i].value = action.payload.values[i] as CellValue;\n                board.cells[i].isFixed = true;\n            }\n        }\n        return board;\n    }\n\n    return board;\n}\n","import {\n    ACTION_INIT_GAME_STATE,\n    ACTION_UPDATE_DISPLAY,\n    ACTION_UPDATE_GAME_PLAY,\n    ActionTypes\n    } from '../actions/types';\nimport { ControlModel } from '../models/control';\n\nexport const controlReducer = (control: ControlModel = new ControlModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_DISPLAY) {\n        return {...control, displayOptions: action.payload};\n    }\n    if (action.type === ACTION_UPDATE_GAME_PLAY) {\n        return {...control, gameOptions: action.payload};\n    }\n    if (action.type === ACTION_INIT_GAME_STATE) {\n        return {...control, gameOptions: action.payload.gameOptions};\n    }\n    return control;\n};\n","import assert from 'assert';\nimport { ActionTypes, ACTION_UPDATE_BOARD, ACTION_UNDO, ACTION_REDO } from '../actions/types';\nimport { HistoryModel } from '../models/history';\n\nexport const historyReducer = (history = new HistoryModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        const serialized = action.payload.board.serialize();\n\n        // Only update history if the serialized new board is different.\n        // Thus, we ignore all selections and restrictions.\n        if (serialized !== history.boards[history.id]) {\n            // Remove the rest of history.\n            // This clean data in case we do lots of undo, and then make a new move.\n            history.boards = history.boards.slice(0, history.id + 1);\n\n            // Update history.\n            history.boards.push(serialized);\n            history.id += 1;\n        }\n        return history;\n    }\n    if (action.type === ACTION_UNDO) {\n        assert(history.id > 0);\n        return {...history, id: history.id - 1 };\n    }\n    if (action.type === ACTION_REDO) {\n        assert(history.id + 1 < history.boards.length);\n        return {...history, id: history.id + 1 };\n    }\n    return history;\n}\n","import { ACTION_GENERATE_URL, ActionTypes } from '../actions/types';\n\nexport const gameUrlReducer = (gameUrl = null, action: ActionTypes) => {\n    if (action.type === ACTION_GENERATE_URL) {\n        return action.payload.url;\n    }\n    return gameUrl;\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { createStore } from 'redux';\nimport Game from './components/Game';\nimport './index.css';\nimport reducers from './reducers';\n\n\nconst store = createStore(\n    reducers,\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <Route path=\"/:encoded?\" component={Game} />\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}