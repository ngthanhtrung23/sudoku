{"version":3,"sources":["board.js","control.js","models/cellModel.js","models/boardModel.js","models/controlModel.js","index.js"],"names":["Cell","this","props","cell","value","className","sortedValues","Array","from","cornerValues","sort","centerValues","classes","isRegionTop","push","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","selected","restricted","error","join","onClick","onMouseDown","onMouseOver","key","id","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","Board","i","board","cells","e","startingCell","renderCell","rows","renderRow","Control","Form","Button","onClickVerify","onClickUndo","onClickRedo","Check","type","label","checked","control","displayOptions","highlightRestricted","onChange","onToggleHighlightRestricted","gamePlay","antiKnight","onToggleAntiKnight","antiKing","onToggleAntiKing","CellModel","Set","row","col","BoardModel","result","forEach","JSON","stringify","serialized","clearAllErrors","clearAllRestricteds","clearAllSelections","obj","parse","cellId","toRowCol","getRegionByPosition","col2","add","toCellId","row2","region","getRegion","di","dj","isInside","delete","myValue","getVisibleCells","neighborId","filter","x","has","cellIds","newValue","clear","ControlModel","Game","state","history","historyId","isMouseDown","serialize","_","clone","slice","setState","load","length","console","log","newBoard","cloneBoard","assignNewBoard","clearSelection","clearSelectionAndRestricted","setSelected","setRestricted","select","metaKey","clearAllError","setValueOfSelectedCells","unsetSelectedCells","toggleCornerValuesOfSelectedCells","clearCornerValuesOfSelectedCells","toggleCenterValuesOfSelectedCells","clearCenterValuesOfSelectedCells","invalidCellIds","getInvalidCellIds","setErrors","alert","size","d_row","d_col","r","c","keyCode","isShift","shiftKey","isMeta","KeyCode","String","fromCharCode","preventDefault","moveSelection","undo","redo","newControl","cloneControl","toggleHighlightRestricted","assignNewControl","toggleAntiKnight","toggleAntiKing","onKeyDown","handleKeyDown","tabIndex","onMouseUp","handleMouseUp","handleClick","handleMouseDown","handleMouseOver","verifyBoard","handleToggleHighlightRestricted","handleToggleAntiKnight","handleToggleAntiKing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0863d64a.chunk.js","sourcesContent":["import React from 'react';\n\nclass Cell extends React.Component {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues).sort();\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues).sort();\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        }\n        if (this.props.cell.restricted) {\n            classes.push('restricted');\n        }\n        if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                onMouseDown={this.props.onMouseDown}\n                onMouseOver={this.props.onMouseOver}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    renderCell(i) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                onMouseDown={(e) => this.props.onMouseDown(e, i)}\n                onMouseOver={() => this.props.onMouseOver(i)}\n                key={i}\n            />\n        );\n    }\n\n    renderRow(startingCell) {\n        let cells = [];\n        for (let i = startingCell; i < startingCell + 9; i++) {\n            cells.push(this.renderCell(i));\n        }\n        return (\n            <div className=\"row\" key={startingCell}>\n                {cells}\n            </div>\n        );\n    }\n\n    render() {\n        let rows = [];\n        for (let i = 0; i < 81; i += 9) {\n            rows.push(this.renderRow(i));\n        }\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nclass Control extends React.Component {\n    render() {\n        return (\n            <Form>\n                <div className=\"\">\n                    <Button onClick={this.props.onClickVerify}>\n                        Verify\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickUndo}\n                        className=\"btn-secondary\"\n                    >\n                        Undo\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickRedo}\n                        className=\"btn-secondary\"\n                    >\n                        Redo\n                    </Button>\n                </div>\n                <hr/>\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.control.displayOptions.highlightRestricted}\n                    onChange={this.props.onToggleHighlightRestricted}\n                />\n                <hr/>\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label='Anti Knight'\n                    checked={this.props.control.gamePlay.antiKnight}\n                    onChange={this.props.onToggleAntiKnight}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label='Anti King'\n                    checked={this.props.control.gamePlay.antiKing}\n                    onChange={this.props.onToggleAntiKing}\n                />\n            </Form>\n        );\n    }\n}\n\nexport default Control;\n","class CellModel {\n    constructor(id) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop() {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom() {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft() {\n        return this.col % 3 === 0;\n    }\n    isRegionRight() {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop() {\n        return this.row === 0;\n    }\n    isBoardBottom() {\n        return this.row === 8;\n    }\n    isBoardLeft() {\n        return this.col === 0;\n    }\n    isBoardRight() {\n        return this.col === 8;\n    }\n}\n\nexport default CellModel;\n","import CellModel from './cellModel.js';\n\nclass BoardModel {\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n    }\n\n    serialize() {\n        let result = [];\n        this.cells.forEach((cell) => {\n            result.push({\n                value: cell.value,\n                cornerValues: Array.from(cell.cornerValues),\n                centerValues: Array.from(cell.centerValues),\n            });\n        });\n        return JSON.stringify(result);\n    }\n\n    load(serialized) {\n        this.clearAllErrors();\n        this.clearAllRestricteds();\n        this.clearAllSelections();\n\n        let obj = JSON.parse(serialized);\n        for (let i = 0; i < 81; i++) {\n            this.cells[i].value = obj[i].value;\n            this.cells[i].cornerValues = new Set(obj[i].cornerValues);\n            this.cells[i].centerValues = new Set(obj[i].centerValues);\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row, col) {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row, col) {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId) {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row, col) {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId) {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId, gamePlay) {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gamePlay.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gamePlay.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gamePlay) {\n        let result = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gamePlay).forEach((neighborId) => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    setSelected(cellId) {\n        this.cells[cellId].selected = true;\n    }\n\n    setRestricted(gamePlay) {\n        let restricted = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gamePlay);\n                } else {\n                    restricted = new Set([...this.getVisibleCells(id, gamePlay)].filter(x => restricted.has(x)));\n                }\n            }\n        }\n\n        restricted.forEach((cellId) => {\n            this.cells[cellId].restricted = true;\n        })\n    }\n\n    setErrors(cellIds) {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSelectedCells(newValue) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = newValue;\n            }\n        });\n    }\n\n    unsetSelectedCells() {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = null;\n            }\n        });\n    }\n\n    toggleCornerValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells() {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections() {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds() {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors() {\n        this.cells.forEach((cell) => {\n            cell.error = false;\n        });\n    }\n}\n\nexport default BoardModel;\n","class ControlModel {\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n        };\n        this.gamePlay = {\n            antiKnight: false,\n            antiKing: false,\n        };\n    }\n\n    toggleHighlightRestricted() {\n        this.displayOptions.highlightRestricted = !this.displayOptions.highlightRestricted;\n    }\n\n    toggleAntiKnight() {\n        this.gamePlay.antiKnight = !this.gamePlay.antiKnight;\n    }\n\n    toggleAntiKing() {\n        this.gamePlay.antiKing = !this.gamePlay.antiKing;\n    }\n}\n\nexport default ControlModel;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport * as KeyCode from 'keycode-js';\n\nimport Board from './board.js';\nimport Control from './control.js';\nimport BoardModel from './models/boardModel.js';\nimport ControlModel from './models/controlModel.js';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            board: new BoardModel(),\n            control: new ControlModel(),\n            history: [],\n            historyId: 0,\n            isMouseDown: false,\n        };\n        // Assumption:\n        // board is equivalent to history[historyId] at all times.\n        this.state.history.push(this.state.board.serialize());\n    }\n    \n    cloneBoard() {\n        let newBoard = _.clone(this.state.board, true);\n        return newBoard;\n    }\n\n    cloneControl() {\n        let newControl = _.clone(this.state.control, true);\n        return newControl;\n    }\n\n    assignNewBoard(board) {\n        const serialized = board.serialize();\n        let history = this.state.history;\n        let historyId = this.state.historyId;\n\n        // Only update history if the serialized new board is different.\n        // Thus, we ignore all selections and restrictions.\n        if (serialized !== this.state.history[historyId]) {\n            // Remove the rest of history.\n            // This clean data in case we do lots of undo, and then make a new move.\n            history = _.slice(history, 0, historyId + 1);\n\n            // Update history.\n            history.push(serialized);\n            historyId += 1;\n        }\n\n        this.setState({\n            board: board,\n            history: history,\n            historyId: historyId,\n        });\n    }\n    \n    undo() {\n        if (this.state.historyId === 0) {\n            // Nothing to undo.\n            return;\n        }\n        let board = new BoardModel();\n        board.load(this.state.history[this.state.historyId - 1]);\n\n        this.setState({\n            board: board,\n            historyId: this.state.historyId - 1,\n        });\n    }\n\n    redo() {\n        if (this.state.historyId >= this.state.history.length - 1) {\n            // Nothing to redo.\n            return;\n        }\n        let board = new BoardModel();\n        board.load(this.state.history[this.state.historyId + 1]);\n\n        this.setState({\n            board: board,\n            historyId: this.state.historyId + 1,\n        });\n    }\n\n    assignNewControl(control) {\n        this.setState({ control: control });\n    }\n\n    clearSelectionAndRestricted() {\n        console.log('clearSelectionAndRestricted');\n        let newBoard = this.cloneBoard();\n\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n\n        this.assignNewBoard(newBoard);\n    }\n\n    // Select a cell.\n    select(cellId, clearSelection = true) {\n        console.log('select ' + cellId);\n        let newBoard = this.cloneBoard();\n        if (clearSelection) {\n            this.clearSelectionAndRestricted();\n        } else {\n            newBoard.clearAllRestricteds();\n        }\n\n        newBoard.setSelected(cellId);\n\n        if (this.state.control.displayOptions.highlightRestricted) {\n            newBoard.setRestricted(this.state.control.gamePlay);\n        }\n\n        this.assignNewBoard(newBoard);\n    }\n\n    // Handle clicking on a cell.\n    handleClick(e, cellId) {\n        console.log('handleClick ' + cellId);\n        this.select(cellId, !e.metaKey);\n    }\n\n    // Handle mousedown on a cell.\n    handleMouseDown(e, cellId) {\n        console.log('handleMouseDown ' + cellId);\n        this.setState({isMouseDown: true});\n\n        this.select(cellId, !e.metaKey);\n    }\n\n    // Handle mouseover a cell.\n    handleMouseOver(cellId) {\n        if (!this.state.isMouseDown) {\n            return;\n        }\n        console.log('handleMouseOver ' + cellId);\n        this.select(cellId, false);\n    }\n\n    handleMouseUp() {\n        console.log('handleMouseUp');\n        this.setState({isMouseDown: false});\n    }\n\n    setValueOfSelectedCells(newValue) {\n        console.log('setValueOfSelectedCells ' + newValue);\n        this.clearAllError();\n\n        let newBoard = this.cloneBoard();\n        newBoard.setValueOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    unsetSelectedCells() {\n        console.log('unsetSelectedCells');\n        this.clearAllError();\n\n        let newBoard = this.cloneBoard();\n        newBoard.unsetSelectedCells();\n\n        this.assignNewBoard(newBoard);\n    }\n\n    toggleCornerValuesOfSelectedCells(newValue) {\n        console.log('toggleCornerValuesOfSelectedCells ' + newValue);\n\n        let newBoard = this.cloneBoard();\n        newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    clearCornerValuesOfSelectedCells() {\n        console.log('clearCornerValuesOfSelectedCells');\n        \n        let newBoard = this.cloneBoard();\n        newBoard.clearCornerValuesOfSelectedCells();\n        this.assignNewBoard(newBoard);\n    }\n\n    toggleCenterValuesOfSelectedCells(newValue) {\n        console.log('toggleCenterValuesOfSelectedCells ' + newValue);\n\n        let newBoard = this.cloneBoard();\n        newBoard.toggleCenterValuesOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    clearCenterValuesOfSelectedCells() {\n        console.log('clearCenterValuesOfSelectedCells');\n\n        let newBoard = this.cloneBoard();\n        newBoard.clearCenterValuesOfSelectedCells();\n        this.assignNewBoard(newBoard);\n    }\n\n    clearAllError() {\n        console.log('clearAllError');\n        let newBoard = this.cloneBoard();\n        newBoard.clearAllErrors();\n        this.assignNewBoard(newBoard);\n    }\n\n    verifyBoard() {\n        console.log('verifyBoard');\n        let newBoard = this.cloneBoard();\n        newBoard.clearAllErrors();\n        let invalidCellIds = newBoard.getInvalidCellIds(this.state.control.gamePlay);\n        newBoard.setErrors(invalidCellIds);\n        this.assignNewBoard(newBoard);\n\n        alert(invalidCellIds.size > 0 ? 'Error found :(' : 'LGTM!');\n    }\n\n    // Move selected cell in direction (d_row, d_col).\n    // If there are more than one selected cells, only move the first one.\n    moveSelection(d_row, d_col) {\n        let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n        for (let i = 0; i < 81; i++) {\n            if (this.state.board.cells[i].selected) {\n                console.log(this.state);\n                [r, c] = this.state.board.toRowCol(i);\n                break;\n            }\n        }\n        r = (r + d_row + 9) % 9;\n        c = (c + d_col + 9) % 9;\n        this.select(this.state.board.toCellId(r, c));\n    }\n\n    // Handle keypress event on a cell.\n    handleKeyDown(e) {\n        console.log('handleKeyDown, keyCode = ' + e.keyCode);\n\n        let isShift = !!e.shiftKey;\n        let isMeta = !!e.metaKey;\n\n        // Pressed 1-9\n        if (e.keyCode >= KeyCode.KEY_1 && e.keyCode <= KeyCode.KEY_9) {\n            const value = String.fromCharCode(e.keyCode);\n            if (isShift) {\n                this.toggleCornerValuesOfSelectedCells(value)\n            } else if (isMeta) {\n                this.toggleCenterValuesOfSelectedCells(value);\n                e.preventDefault();\n            } else {\n                this.setValueOfSelectedCells(value);\n            }\n        }\n\n        switch (e.keyCode) {\n            case KeyCode.KEY_SPACE:\n                this.unsetSelectedCells();\n                break;\n            case KeyCode.KEY_BACK_SPACE:\n                this.unsetSelectedCells();\n                this.clearCornerValuesOfSelectedCells();\n                this.clearCenterValuesOfSelectedCells();\n                e.preventDefault();\n                break;\n            case KeyCode.KEY_DOWN:\n                this.moveSelection(+1, 0);\n                break;\n            case KeyCode.KEY_UP:\n                this.moveSelection(-1, 0);\n                break;\n            case KeyCode.KEY_LEFT:\n                this.moveSelection(0, -1);\n                break;\n            case KeyCode.KEY_RIGHT:\n                this.moveSelection(0, +1);\n                break;\n            case KeyCode.KEY_ESCAPE:\n                this.clearSelectionAndRestricted();\n                break;\n            case KeyCode.KEY_Z:\n            case KeyCode.KEY_U:\n                this.undo();\n                break;\n            case KeyCode.KEY_Y:\n            case KeyCode.KEY_R:\n                this.redo();\n                break;\n            default:\n        }\n    }\n\n    handleToggleHighlightRestricted() {\n        console.log('handleToggleHighlightRestricted');\n        let newControl = this.cloneControl();\n        newControl.toggleHighlightRestricted();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAntiKnight() {\n        console.log('handleToggleAntiKnight');\n        let newControl = this.cloneControl();\n        newControl.toggleAntiKnight();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAntiKing() {\n        console.log('handleToggleAntiKing');\n        let newControl = this.cloneControl();\n        newControl.toggleAntiKing();\n        this.assignNewControl(newControl);\n    }\n\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.handleKeyDown(e)}\n                tabIndex=\"0\"\n                className=\"container\"\n                onMouseUp={() => this.handleMouseUp()}\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.state.board}\n                            onClick={(e, i) => this.handleClick(e, i)}\n                            onMouseDown={(e, i) => this.handleMouseDown(e, i)}\n                            onMouseOver={(i) => this.handleMouseOver(i)}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            control={this.state.control}\n                            onClickVerify={() => this.verifyBoard()}\n                            onClickUndo={() => this.undo()}\n                            onClickRedo={() => this.redo()}\n                            onToggleHighlightRestricted={() => this.handleToggleHighlightRestricted()}\n                            onToggleAntiKnight={() => this.handleToggleAntiKnight()}\n                            onToggleAntiKing={() => this.handleToggleAntiKing()}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}