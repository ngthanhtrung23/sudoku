{"version":3,"sources":["board.js","control.js","models/cellModel.js","models/boardModel.js","models/controlModel.js","index.js"],"names":["Cell","this","props","cell","value","className","sortedValues","Array","from","cornerValues","sort","centerValues","classes","isRegionTop","push","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","selected","highlightMatching","restricted","error","join","onClick","onMouseDown","onMouseOver","key","id","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","Board","i","board","cells","e","startingCell","renderCell","rows","renderRow","Control","Form","Button","onClickVerify","onClickUndo","onClickRedo","Check","type","label","checked","control","displayOptions","highlightRestricted","onChange","onToggleHighlightRestricted","highlightMatchingNumbers","onToggleHighlightMatchingNumbers","gamePlay","antiKnight","onToggleAntiKnight","antiKing","onToggleAntiKing","CellModel","Set","row","col","BoardModel","result","forEach","JSON","stringify","serialized","clearAllErrors","clearAllRestricteds","clearAllSelections","obj","parse","cellId","toRowCol","getRegionByPosition","col2","add","toCellId","row2","region","getRegion","di","dj","isInside","delete","myValue","getVisibleCells","neighborId","filter","x","has","cellIds","newValue","clear","ControlModel","Game","state","history","historyId","isMouseDown","serialize","_","clone","slice","setState","load","length","console","log","newBoard","cloneBoard","assignNewBoard","clearSelection","clearSelectionAndRestricted","setSelected","setRestricted","selectedValues","map","size","selectedValue","values","next","select","metaKey","clearAllError","setValueOfSelectedCells","unsetSelectedCells","toggleCornerValuesOfSelectedCells","clearCornerValuesOfSelectedCells","toggleCenterValuesOfSelectedCells","clearCenterValuesOfSelectedCells","invalidCellIds","getInvalidCellIds","setErrors","alert","d_row","d_col","r","c","keyCode","isShift","shiftKey","isMeta","KeyCode","String","fromCharCode","preventDefault","moveSelection","undo","redo","newControl","cloneControl","toggleHighlightRestricted","assignNewControl","toggleHighlightMatchingNumbers","toggleAntiKnight","toggleAntiKing","onKeyDown","handleKeyDown","tabIndex","onMouseUp","handleMouseUp","handleClick","handleMouseDown","handleMouseOver","verifyBoard","handleToggleHighlightRestricted","handleToggleHighlightMatchingNumbers","handleToggleAntiKnight","handleToggleAntiKing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d963133b.chunk.js","sourcesContent":["import React from 'react';\n\nclass Cell extends React.Component {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues).sort();\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues).sort();\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        } else if (this.props.highlightMatching && this.props.cell.value === this.props.highlightMatching) {\n            classes.push('matching');\n        } else if (this.props.cell.restricted) {\n            classes.push('restricted');\n        }\n        if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                onMouseDown={this.props.onMouseDown}\n                onMouseOver={this.props.onMouseOver}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    renderCell(i) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                onMouseDown={(e) => this.props.onMouseDown(e, i)}\n                onMouseOver={() => this.props.onMouseOver(i)}\n                key={i}\n                highlightMatching={this.props.highlightMatching}\n            />\n        );\n    }\n\n    renderRow(startingCell) {\n        let cells = [];\n        for (let i = startingCell; i < startingCell + 9; i++) {\n            cells.push(this.renderCell(i));\n        }\n        return (\n            <div className=\"row\" key={startingCell}>\n                {cells}\n            </div>\n        );\n    }\n\n    render() {\n        let rows = [];\n        for (let i = 0; i < 81; i += 9) {\n            rows.push(this.renderRow(i));\n        }\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nclass Control extends React.Component {\n    render() {\n        return (\n            <Form>\n                <div className=\"\">\n                    <Button onClick={this.props.onClickVerify}>\n                        Verify\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickUndo}\n                        className=\"btn-secondary\"\n                    >\n                        Undo\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickRedo}\n                        className=\"btn-secondary\"\n                    >\n                        Redo\n                    </Button>\n                </div>\n                <hr/>\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.control.displayOptions.highlightRestricted}\n                    onChange={this.props.onToggleHighlightRestricted}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-matching-numbers'\n                    label='Highlight matching numbers'\n                    checked={this.props.control.displayOptions.highlightMatchingNumbers}\n                    onChange={this.props.onToggleHighlightMatchingNumbers}\n                />\n                <hr/>\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label='Anti Knight'\n                    checked={this.props.control.gamePlay.antiKnight}\n                    onChange={this.props.onToggleAntiKnight}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label='Anti King'\n                    checked={this.props.control.gamePlay.antiKing}\n                    onChange={this.props.onToggleAntiKing}\n                />\n            </Form>\n        );\n    }\n}\n\nexport default Control;\n","class CellModel {\n    constructor(id) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop() {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom() {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft() {\n        return this.col % 3 === 0;\n    }\n    isRegionRight() {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop() {\n        return this.row === 0;\n    }\n    isBoardBottom() {\n        return this.row === 8;\n    }\n    isBoardLeft() {\n        return this.col === 0;\n    }\n    isBoardRight() {\n        return this.col === 8;\n    }\n}\n\nexport default CellModel;\n","import CellModel from './cellModel.js';\n\nclass BoardModel {\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n    }\n\n    serialize() {\n        let result = [];\n        this.cells.forEach((cell) => {\n            result.push({\n                value: cell.value,\n                cornerValues: Array.from(cell.cornerValues),\n                centerValues: Array.from(cell.centerValues),\n            });\n        });\n        return JSON.stringify(result);\n    }\n\n    load(serialized) {\n        this.clearAllErrors();\n        this.clearAllRestricteds();\n        this.clearAllSelections();\n\n        let obj = JSON.parse(serialized);\n        for (let i = 0; i < 81; i++) {\n            this.cells[i].value = obj[i].value;\n            this.cells[i].cornerValues = new Set(obj[i].cornerValues);\n            this.cells[i].centerValues = new Set(obj[i].centerValues);\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row, col) {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row, col) {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId) {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row, col) {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId) {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId, gamePlay) {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gamePlay.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gamePlay.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gamePlay) {\n        let result = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gamePlay).forEach((neighborId) => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    setSelected(cellId) {\n        this.cells[cellId].selected = true;\n    }\n\n    setRestricted(gamePlay) {\n        let restricted = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gamePlay);\n                } else {\n                    restricted = new Set([...this.getVisibleCells(id, gamePlay)].filter(x => restricted.has(x)));\n                }\n            }\n        }\n\n        restricted.forEach((cellId) => {\n            this.cells[cellId].restricted = true;\n        })\n    }\n\n    setErrors(cellIds) {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSelectedCells(newValue) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = newValue;\n            }\n        });\n    }\n\n    unsetSelectedCells() {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = null;\n            }\n        });\n    }\n\n    toggleCornerValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells() {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections() {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds() {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors() {\n        this.cells.forEach((cell) => {\n            cell.error = false;\n        });\n    }\n}\n\nexport default BoardModel;\n","class ControlModel {\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n            highlightMatchingNumbers: false,\n        };\n        this.gamePlay = {\n            antiKnight: false,\n            antiKing: false,\n        };\n    }\n\n    toggleHighlightRestricted() {\n        this.displayOptions.highlightRestricted = !this.displayOptions.highlightRestricted;\n    }\n\n    toggleHighlightMatchingNumbers() {\n        this.displayOptions.highlightMatchingNumbers = !this.displayOptions.highlightMatchingNumbers;\n    }\n\n    toggleAntiKnight() {\n        this.gamePlay.antiKnight = !this.gamePlay.antiKnight;\n    }\n\n    toggleAntiKing() {\n        this.gamePlay.antiKing = !this.gamePlay.antiKing;\n    }\n}\n\nexport default ControlModel;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport * as KeyCode from 'keycode-js';\n\nimport Board from './board.js';\nimport Control from './control.js';\nimport BoardModel from './models/boardModel.js';\nimport ControlModel from './models/controlModel.js';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            board: new BoardModel(),\n            control: new ControlModel(),\n            history: [],\n            historyId: 0,\n            isMouseDown: false,\n            highlightMatching: null,\n        };\n        // Assumption:\n        // board is equivalent to history[historyId] at all times.\n        this.state.history.push(this.state.board.serialize());\n    }\n    \n    cloneBoard() {\n        let newBoard = _.clone(this.state.board, true);\n        return newBoard;\n    }\n\n    cloneControl() {\n        let newControl = _.clone(this.state.control, true);\n        return newControl;\n    }\n\n    assignNewBoard(board) {\n        const serialized = board.serialize();\n        let history = this.state.history;\n        let historyId = this.state.historyId;\n\n        // Only update history if the serialized new board is different.\n        // Thus, we ignore all selections and restrictions.\n        if (serialized !== this.state.history[historyId]) {\n            // Remove the rest of history.\n            // This clean data in case we do lots of undo, and then make a new move.\n            history = _.slice(history, 0, historyId + 1);\n\n            // Update history.\n            history.push(serialized);\n            historyId += 1;\n        }\n\n        this.setState({\n            board: board,\n            history: history,\n            historyId: historyId,\n        });\n    }\n    \n    undo() {\n        if (this.state.historyId === 0) {\n            // Nothing to undo.\n            return;\n        }\n        let board = new BoardModel();\n        board.load(this.state.history[this.state.historyId - 1]);\n\n        this.setState({\n            board: board,\n            historyId: this.state.historyId - 1,\n        });\n    }\n\n    redo() {\n        if (this.state.historyId >= this.state.history.length - 1) {\n            // Nothing to redo.\n            return;\n        }\n        let board = new BoardModel();\n        board.load(this.state.history[this.state.historyId + 1]);\n\n        this.setState({\n            board: board,\n            historyId: this.state.historyId + 1,\n        });\n    }\n\n    assignNewControl(control) {\n        this.setState({ control: control });\n    }\n\n    clearSelectionAndRestricted() {\n        console.log('clearSelectionAndRestricted');\n        let newBoard = this.cloneBoard();\n\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n\n        this.assignNewBoard(newBoard);\n        this.setState({highlightMatching: null});\n    }\n\n    // Select a cell.\n    select(cellId, clearSelection = true) {\n        console.log('select ' + cellId);\n        let newBoard = this.cloneBoard();\n        if (clearSelection) {\n            this.clearSelectionAndRestricted();\n        } else {\n            newBoard.clearAllRestricteds();\n        }\n\n        newBoard.setSelected(cellId);\n\n        if (this.state.control.displayOptions.highlightRestricted) {\n            newBoard.setRestricted(this.state.control.gamePlay);\n        }\n\n        this.assignNewBoard(newBoard);\n\n        if (this.state.control.displayOptions.highlightMatchingNumbers) {\n            const selectedValues = new Set(\n                newBoard.cells\n                    .filter((cell) => cell.selected)\n                    .filter((cell) => cell.value)\n                    .map((cell) => cell.value)\n            );\n            if (selectedValues.size === 1) {\n                const selectedValue = selectedValues.values().next().value;\n                this.setState({highlightMatching: selectedValue});\n            }\n        }\n    }\n\n    // Handle clicking on a cell.\n    handleClick(e, cellId) {\n        console.log('handleClick ' + cellId);\n        this.select(cellId, !e.metaKey);\n    }\n\n    // Handle mousedown on a cell.\n    handleMouseDown(e, cellId) {\n        console.log('handleMouseDown ' + cellId);\n        this.setState({isMouseDown: true});\n\n        this.select(cellId, !e.metaKey);\n    }\n\n    // Handle mouseover a cell.\n    handleMouseOver(cellId) {\n        if (!this.state.isMouseDown) {\n            return;\n        }\n        console.log('handleMouseOver ' + cellId);\n        this.select(cellId, false);\n    }\n\n    handleMouseUp() {\n        console.log('handleMouseUp');\n        this.setState({isMouseDown: false});\n    }\n\n    setValueOfSelectedCells(newValue) {\n        console.log('setValueOfSelectedCells ' + newValue);\n        this.clearAllError();\n\n        let newBoard = this.cloneBoard();\n        newBoard.setValueOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    unsetSelectedCells() {\n        console.log('unsetSelectedCells');\n        this.clearAllError();\n\n        let newBoard = this.cloneBoard();\n        newBoard.unsetSelectedCells();\n\n        this.assignNewBoard(newBoard);\n    }\n\n    toggleCornerValuesOfSelectedCells(newValue) {\n        console.log('toggleCornerValuesOfSelectedCells ' + newValue);\n\n        let newBoard = this.cloneBoard();\n        newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    clearCornerValuesOfSelectedCells() {\n        console.log('clearCornerValuesOfSelectedCells');\n        \n        let newBoard = this.cloneBoard();\n        newBoard.clearCornerValuesOfSelectedCells();\n        this.assignNewBoard(newBoard);\n    }\n\n    toggleCenterValuesOfSelectedCells(newValue) {\n        console.log('toggleCenterValuesOfSelectedCells ' + newValue);\n\n        let newBoard = this.cloneBoard();\n        newBoard.toggleCenterValuesOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    clearCenterValuesOfSelectedCells() {\n        console.log('clearCenterValuesOfSelectedCells');\n\n        let newBoard = this.cloneBoard();\n        newBoard.clearCenterValuesOfSelectedCells();\n        this.assignNewBoard(newBoard);\n    }\n\n    clearAllError() {\n        console.log('clearAllError');\n        let newBoard = this.cloneBoard();\n        newBoard.clearAllErrors();\n        this.assignNewBoard(newBoard);\n    }\n\n    verifyBoard() {\n        console.log('verifyBoard');\n        let newBoard = this.cloneBoard();\n        newBoard.clearAllErrors();\n        let invalidCellIds = newBoard.getInvalidCellIds(this.state.control.gamePlay);\n        newBoard.setErrors(invalidCellIds);\n        this.assignNewBoard(newBoard);\n\n        alert(invalidCellIds.size > 0 ? 'Error found :(' : 'LGTM!');\n    }\n\n    // Move selected cell in direction (d_row, d_col).\n    // If there are more than one selected cells, only move the first one.\n    moveSelection(d_row, d_col) {\n        let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n        for (let i = 0; i < 81; i++) {\n            if (this.state.board.cells[i].selected) {\n                console.log(this.state);\n                [r, c] = this.state.board.toRowCol(i);\n                break;\n            }\n        }\n        r = (r + d_row + 9) % 9;\n        c = (c + d_col + 9) % 9;\n        this.select(this.state.board.toCellId(r, c));\n    }\n\n    // Handle keypress event on a cell.\n    handleKeyDown(e) {\n        console.log('handleKeyDown, keyCode = ' + e.keyCode);\n\n        let isShift = !!e.shiftKey;\n        let isMeta = !!e.metaKey;\n\n        // Pressed 1-9\n        if (e.keyCode >= KeyCode.KEY_1 && e.keyCode <= KeyCode.KEY_9) {\n            const value = String.fromCharCode(e.keyCode);\n            if (isShift) {\n                this.toggleCornerValuesOfSelectedCells(value)\n            } else if (isMeta) {\n                this.toggleCenterValuesOfSelectedCells(value);\n                e.preventDefault();\n            } else {\n                this.setValueOfSelectedCells(value);\n            }\n        }\n\n        switch (e.keyCode) {\n            case KeyCode.KEY_SPACE:\n                this.unsetSelectedCells();\n                break;\n            case KeyCode.KEY_BACK_SPACE:\n                this.unsetSelectedCells();\n                this.clearCornerValuesOfSelectedCells();\n                this.clearCenterValuesOfSelectedCells();\n                e.preventDefault();\n                break;\n            case KeyCode.KEY_DOWN:\n                this.moveSelection(+1, 0);\n                break;\n            case KeyCode.KEY_UP:\n                this.moveSelection(-1, 0);\n                break;\n            case KeyCode.KEY_LEFT:\n                this.moveSelection(0, -1);\n                break;\n            case KeyCode.KEY_RIGHT:\n                this.moveSelection(0, +1);\n                break;\n            case KeyCode.KEY_ESCAPE:\n                this.clearSelectionAndRestricted();\n                break;\n            case KeyCode.KEY_Z:\n            case KeyCode.KEY_U:\n                this.undo();\n                break;\n            case KeyCode.KEY_Y:\n            case KeyCode.KEY_R:\n                this.redo();\n                break;\n            default:\n        }\n    }\n\n    handleToggleHighlightRestricted() {\n        console.log('handleToggleHighlightRestricted');\n        let newControl = this.cloneControl();\n        newControl.toggleHighlightRestricted();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleHighlightMatchingNumbers() {\n        console.log('handleToggleHighlightMatchingNumbers');\n        let newControl = this.cloneControl();\n        newControl.toggleHighlightMatchingNumbers();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAntiKnight() {\n        console.log('handleToggleAntiKnight');\n        let newControl = this.cloneControl();\n        newControl.toggleAntiKnight();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAntiKing() {\n        console.log('handleToggleAntiKing');\n        let newControl = this.cloneControl();\n        newControl.toggleAntiKing();\n        this.assignNewControl(newControl);\n    }\n\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.handleKeyDown(e)}\n                tabIndex=\"0\"\n                className=\"container\"\n                onMouseUp={() => this.handleMouseUp()}\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.state.board}\n                            onClick={(e, i) => this.handleClick(e, i)}\n                            onMouseDown={(e, i) => this.handleMouseDown(e, i)}\n                            onMouseOver={(i) => this.handleMouseOver(i)}\n                            highlightMatching={this.state.highlightMatching}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            control={this.state.control}\n                            onClickVerify={() => this.verifyBoard()}\n                            onClickUndo={() => this.undo()}\n                            onClickRedo={() => this.redo()}\n                            onToggleHighlightRestricted={() => this.handleToggleHighlightRestricted()}\n                            onToggleHighlightMatchingNumbers={() => this.handleToggleHighlightMatchingNumbers()}\n                            onToggleAntiKnight={() => this.handleToggleAntiKnight()}\n                            onToggleAntiKing={() => this.handleToggleAntiKing()}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}