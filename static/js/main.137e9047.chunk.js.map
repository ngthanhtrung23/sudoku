{"version":3,"sources":["board.js","control.js","models/cellModel.js","models/boardModel.js","models/controlModel.js","index.js"],"names":["Cell","this","props","cell","value","className","sortedValues","Array","from","cornerValues","sort","centerValues","classes","isRegionTop","push","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","selected","restricted","error","join","onClick","key","id","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","Board","i","board","cells","e","startingCell","renderCell","rows","renderRow","Control","Form","Button","onClickVerify","Check","type","label","checked","control","displayOptions","highlightRestricted","onChange","onToggleHighlightRestricted","gamePlay","antiKnight","onToggleAntiKnight","antiKing","onToggleAntiKing","CellModel","Set","row","col","BoardModel","cellId","toRowCol","getRegionByPosition","result","col2","add","toCellId","row2","region","getRegion","di","dj","isInside","delete","myValue","getVisibleCells","forEach","neighborId","filter","x","has","cellIds","newValue","clear","ControlModel","Game","state","_","clone","setState","console","log","newBoard","cloneBoard","clearAllSelections","clearAllRestricteds","assignNewBoard","clearSelection","clearSelectionAndRestricted","setSelected","setRestricted","select","metaKey","clearAllError","setValueOfSelectedCells","unsetSelectedCells","toggleCornerValuesOfSelectedCells","clearCornerValuesOfSelectedCells","toggleCenterValuesOfSelectedCells","clearCenterValuesOfSelectedCells","clearAllErrors","invalidCellIds","getInvalidCellIds","setErrors","alert","size","d_row","d_col","r","c","keyCode","isShift","shiftKey","isMeta","KeyCode","String","fromCharCode","preventDefault","moveSelection","newControl","cloneControl","toggleHighlightRestricted","assignNewControl","toggleAntiKnight","toggleAntiKing","onKeyDown","handleKeyDown","tabIndex","handleClick","verifyBoard","handleToggleHighlightRestricted","handleToggleAntiKnight","handleToggleAntiKing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.137e9047.chunk.js","sourcesContent":["import React from 'react';\n\nclass Cell extends React.Component {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues).sort();\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues).sort();\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        }\n        if (this.props.cell.restricted) {\n            classes.push('restricted');\n        }\n        if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    renderCell(i) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                key={i}\n            />\n        );\n    }\n\n    renderRow(startingCell) {\n        let cells = [];\n        for (let i = startingCell; i < startingCell + 9; i++) {\n            cells.push(this.renderCell(i));\n        }\n        return (\n            <div className=\"row\" key={startingCell}>\n                {cells}\n            </div>\n        );\n    }\n\n    render() {\n        let rows = [];\n        for (let i = 0; i < 81; i += 9) {\n            rows.push(this.renderRow(i));\n        }\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nclass Control extends React.Component {\n    render() {\n        return (\n            <Form>\n                <Button onClick={this.props.onClickVerify}>\n                    Verify\n                </Button>\n                <hr/>\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.control.displayOptions.highlightRestricted}\n                    onChange={this.props.onToggleHighlightRestricted}\n                />\n                <hr/>\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label='Anti Knight'\n                    checked={this.props.control.gamePlay.antiKnight}\n                    onChange={this.props.onToggleAntiKnight}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label='Anti King'\n                    checked={this.props.control.gamePlay.antiKing}\n                    onChange={this.props.onToggleAntiKing}\n                />\n            </Form>\n        );\n    }\n}\n\nexport default Control;\n","class CellModel {\n    constructor(id) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop() {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom() {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft() {\n        return this.col % 3 === 0;\n    }\n    isRegionRight() {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop() {\n        return this.row === 0;\n    }\n    isBoardBottom() {\n        return this.row === 8;\n    }\n    isBoardLeft() {\n        return this.col === 0;\n    }\n    isBoardRight() {\n        return this.col === 8;\n    }\n}\n\nexport default CellModel;\n","import CellModel from './cellModel.js';\n\nclass BoardModel {\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row, col) {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row, col) {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId) {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row, col) {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId) {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId, gamePlay) {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gamePlay.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gamePlay.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gamePlay) {\n        let result = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gamePlay).forEach((neighborId) => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    setSelected(cellId) {\n        this.cells[cellId].selected = true;\n    }\n\n    setRestricted(gamePlay) {\n        let restricted = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gamePlay);\n                } else {\n                    restricted = new Set([...this.getVisibleCells(id, gamePlay)].filter(x => restricted.has(x)));\n                }\n            }\n        }\n\n        restricted.forEach((cellId) => {\n            this.cells[cellId].restricted = true;\n        })\n    }\n\n    setErrors(cellIds) {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSelectedCells(newValue) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = newValue;\n            }\n        });\n    }\n\n    unsetSelectedCells() {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = null;\n            }\n        });\n    }\n\n    toggleCornerValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells() {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections() {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds() {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors() {\n        this.cells.forEach((cell) => {\n            cell.error = false;\n        });\n    }\n}\n\nexport default BoardModel;\n","class ControlModel {\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n        };\n        this.gamePlay = {\n            antiKnight: false,\n            antiKing: false,\n        };\n    }\n\n    toggleHighlightRestricted() {\n        this.displayOptions.highlightRestricted = !this.displayOptions.highlightRestricted;\n    }\n\n    toggleAntiKnight() {\n        this.gamePlay.antiKnight = !this.gamePlay.antiKnight;\n    }\n\n    toggleAntiKing() {\n        this.gamePlay.antiKing = !this.gamePlay.antiKing;\n    }\n}\n\nexport default ControlModel;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport * as KeyCode from 'keycode-js';\n\nimport Board from './board.js';\nimport Control from './control.js';\nimport BoardModel from './models/boardModel.js';\nimport ControlModel from './models/controlModel.js';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            board: new BoardModel(),\n            control: new ControlModel(),\n        };\n    }\n    \n    cloneBoard() {\n        let newBoard = _.clone(this.state.board, true);\n        return newBoard;\n    }\n\n    cloneControl() {\n        let newControl = _.clone(this.state.control, true);\n        return newControl;\n    }\n\n    assignNewBoard(board) {\n        this.setState({\n            board: board,\n            control: this.state.control,\n        })\n    }\n\n    assignNewControl(control) {\n        this.setState({\n            board: this.state.board,\n            control: control,\n        });\n    }\n\n    clearSelectionAndRestricted() {\n        console.log('clearSelectionAndRestricted');\n        let newBoard = this.cloneBoard();\n\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n\n        this.assignNewBoard(newBoard);\n    }\n\n    // Select a cell.\n    select(cellId, clearSelection = true) {\n        console.log('select ' + cellId);\n        let newBoard = this.cloneBoard();\n        if (clearSelection) {\n            this.clearSelectionAndRestricted();\n        } else {\n            newBoard.clearAllRestricteds();\n        }\n\n        newBoard.setSelected(cellId);\n\n        if (this.state.control.displayOptions.highlightRestricted) {\n            newBoard.setRestricted(this.state.control.gamePlay);\n        }\n\n        this.assignNewBoard(newBoard);\n    }\n\n    // Handle clicking on a cell.\n    handleClick(e, cellId) {\n        console.log('handleClick ' + cellId);\n        this.select(cellId, !e.metaKey);\n    }\n\n    setValueOfSelectedCells(newValue) {\n        console.log('setValueOfSelectedCells ' + newValue);\n        this.clearAllError();\n\n        let newBoard = this.cloneBoard();\n        newBoard.setValueOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    unsetSelectedCells() {\n        console.log('unsetSelectedCells');\n        this.clearAllError();\n\n        let newBoard = this.cloneBoard();\n        newBoard.unsetSelectedCells();\n\n        this.assignNewBoard(newBoard);\n    }\n\n    toggleCornerValuesOfSelectedCells(newValue) {\n        console.log('toggleCornerValuesOfSelectedCells ' + newValue);\n\n        let newBoard = this.cloneBoard();\n        newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    clearCornerValuesOfSelectedCells() {\n        console.log('clearCornerValuesOfSelectedCells');\n        \n        let newBoard = this.cloneBoard();\n        newBoard.clearCornerValuesOfSelectedCells();\n        this.assignNewBoard(newBoard);\n    }\n\n    toggleCenterValuesOfSelectedCells(newValue) {\n        console.log('toggleCenterValuesOfSelectedCells ' + newValue);\n\n        let newBoard = this.cloneBoard();\n        newBoard.toggleCenterValuesOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    clearCenterValuesOfSelectedCells() {\n        console.log('clearCenterValuesOfSelectedCells');\n\n        let newBoard = this.cloneBoard();\n        newBoard.clearCenterValuesOfSelectedCells();\n        this.assignNewBoard(newBoard);\n    }\n\n    clearAllError() {\n        console.log('clearAllError');\n        let newBoard = this.cloneBoard();\n        newBoard.clearAllErrors();\n        this.assignNewBoard(newBoard);\n    }\n\n    verifyBoard() {\n        console.log('verifyBoard');\n        let newBoard = this.cloneBoard();\n        newBoard.clearAllErrors();\n        let invalidCellIds = newBoard.getInvalidCellIds(this.state.control.gamePlay);\n        newBoard.setErrors(invalidCellIds);\n        this.assignNewBoard(newBoard);\n\n        alert(invalidCellIds.size > 0 ? 'Error found :(' : 'LGTM!');\n    }\n\n    // Move selected cell in direction (d_row, d_col).\n    // If there are more than one selected cells, only move the first one.\n    moveSelection(d_row, d_col) {\n        let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n        for (let i = 0; i < 81; i++) {\n            if (this.state.board.cells[i].selected) {\n                console.log(this.state);\n                [r, c] = this.state.board.toRowCol(i);\n                break;\n            }\n        }\n        r = (r + d_row + 9) % 9;\n        c = (c + d_col + 9) % 9;\n        this.select(this.state.board.toCellId(r, c));\n    }\n\n    // Handle keypress event on a cell.\n    handleKeyDown(e) {\n        console.log('handleKeyDown, keyCode = ' + e.keyCode);\n\n        let isShift = !!e.shiftKey;\n        let isMeta = !!e.metaKey;\n\n        // Pressed 1-9\n        if (e.keyCode >= KeyCode.KEY_1 && e.keyCode <= KeyCode.KEY_9) {\n            const value = String.fromCharCode(e.keyCode);\n            if (isShift) {\n                this.toggleCornerValuesOfSelectedCells(value)\n            } else if (isMeta) {\n                this.toggleCenterValuesOfSelectedCells(value);\n                e.preventDefault();\n            } else {\n                this.setValueOfSelectedCells(value);\n            }\n        }\n\n        switch (e.keyCode) {\n            case KeyCode.KEY_SPACE:\n                this.unsetSelectedCells();\n                break;\n            case KeyCode.KEY_BACK_SPACE:\n                this.unsetSelectedCells();\n                this.clearCornerValuesOfSelectedCells();\n                this.clearCenterValuesOfSelectedCells();\n                e.preventDefault();\n                break;\n            case KeyCode.KEY_DOWN:\n                this.moveSelection(+1, 0);\n                break;\n            case KeyCode.KEY_UP:\n                this.moveSelection(-1, 0);\n                break;\n            case KeyCode.KEY_LEFT:\n                this.moveSelection(0, -1);\n                break;\n            case KeyCode.KEY_RIGHT:\n                this.moveSelection(0, +1);\n                break;\n            case KeyCode.KEY_ESCAPE:\n                this.clearSelectionAndRestricted();\n                break;\n            default:\n        }\n    }\n\n    handleToggleHighlightRestricted() {\n        console.log('handleToggleHighlightRestricted');\n        let newControl = this.cloneControl();\n        newControl.toggleHighlightRestricted();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAntiKnight() {\n        console.log('handleToggleAntiKnight');\n        let newControl = this.cloneControl();\n        newControl.toggleAntiKnight();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAntiKing() {\n        console.log('handleToggleAntiKing');\n        let newControl = this.cloneControl();\n        newControl.toggleAntiKing();\n        this.assignNewControl(newControl);\n    }\n\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.handleKeyDown(e)}\n                tabIndex=\"0\"\n                className=\"container\"\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.state.board}\n                            onClick={(e, i) => this.handleClick(e, i)}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            control={this.state.control}\n                            onClickVerify={() => this.verifyBoard()}\n                            onToggleHighlightRestricted={() => this.handleToggleHighlightRestricted()}\n                            onToggleAntiKnight={() => this.handleToggleAntiKnight()}\n                            onToggleAntiKing={() => this.handleToggleAntiKing()}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}