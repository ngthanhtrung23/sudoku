{"version":3,"sources":["actions/types.ts","actions/history.ts","actions/board.ts","utils/solver.ts","components/board/Cell.tsx","components/board/Board.tsx","components/control/DisplayOptions.tsx","actions/control.ts","components/control/GameOptions.tsx","components/control/Control.tsx","components/Game.tsx","models/control.ts","models/cell.ts","models/board.ts","models/history.ts","reducers/index.ts","reducers/board.ts","reducers/control.ts","reducers/history.ts","index.tsx"],"names":["NO_OP","type","redo","history","id","boards","length","payload","serialized","undo","updateBoard","board","select","control","cellId","clearSelection","setMultiSelect","newBoard","_","cloneDeep","multiSelectMode","clearAllSelections","clearAllRestricteds","highlightMatching","setSelected","displayOptions","highlightRestricted","setRestricted","gameOptions","highlightMatchingNumbers","selectedValues","getSelectedValues","size","selectedValue","values","next","value","move","d_row","d_col","r","c","i","cells","selected","toRowCol","toCellId","loadValuesAndCenterValues","cellValues","centerValues","clone","attempt","minOptionsCellId","currentState","forEach","cell","push","getValuesAndCenterValues","options","cntSolutions","firstSolution","option","setValueOfSelectedCells","solution","cnt","Cell","this","props","className","sortedValues","Array","from","cornerValues","sort","map","classes","shouldHighlightMatching","key","isRegionTop","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","restricted","error","join","onClick","onMouseDown","onMouseOver","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","Board","e","String","startingCell","keys","x","renderCell","rows","renderRow","DisplayOptions","Form","Check","label","checked","onChange","updateDisplay","autoCleanUp","connector","connect","state","GameOptions","antiKnight","updateGameOptions","antiKing","Control","Button","onClickVerify","onClickUndo","onClickRedo","onClickFillCenters","solve","Game","onKeyDown","keyDown","tabIndex","onMouseUp","mouseUp","metaKey","mouseDown","mouseOver","verify","fillCenter","isShift","shiftKey","isMeta","keyCode","KeyCode","fromCharCode","newValue","toggleCornerValuesOfSelectedCells","toggleCornerValues","preventDefault","toggleCenterValuesOfSelectedCells","toggleCenterValues","clearAllErrors","setValue","unsetSelectedCells","unsetValue","clearCornerValuesOfSelectedCells","clearCenterValuesOfSelectedCells","pressBackspace","pressEsc","Object","assign","fillAllPossibleValues","invalidCellIds","getInvalidCellIds","setErrors","alert","solveBoard","ControlModel","CellModel","row","col","Set","set_intersection","a","b","filter","has","BoardModel","result","JSON","stringify","obj","parse","getRegionByPosition","col2","add","row2","region","getRegion","di","dj","isInside","delete","myValue","getVisibleCells","neighborId","seenValues","getPossibleValues","cellIds","autoCleanup","clear","HistoryModel","serialize","combineReducers","action","load","slice","assert","isMouseDown","ReactDOM","render","store","createStore","reducers","document","getElementById"],"mappings":"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","file":"static/js/main.e8d1ab2a.chunk.js","sourcesContent":["import { BoardModel } from '../models/board';\nimport { DisplayOptions, GameOptions } from '../models/control';\n\nexport const ACTION_NO_OP = 'ACTION_NO_OP';\nexport interface NoOpAction {\n    type: typeof ACTION_NO_OP,\n};\nexport const NO_OP: NoOpAction = { type: ACTION_NO_OP };\n\n// Board actions.\nexport const ACTION_UPDATE_BOARD = 'ACTION_UPDATE_BOARD';\n\nexport interface UpdateBoardAction {\n    type: typeof ACTION_UPDATE_BOARD,\n    payload: {\n        board: BoardModel,\n    },\n};\n\n// Control actions.\nexport const ACTION_UPDATE_DISPLAY = 'ACTION_UPDATE_DISPLAY';\nexport const ACTION_UPDATE_GAME_PLAY = 'ACTION_UPDATE_GAME_PLAY';\n\ninterface UpdateDisplayAction {\n    type: typeof ACTION_UPDATE_DISPLAY,\n    payload: DisplayOptions,\n};\n\ninterface UpdateGameOptionsAction {\n    type: typeof ACTION_UPDATE_GAME_PLAY,\n    payload: GameOptions,\n}\n\n// History actions.\nexport const ACTION_REDO = 'ACTION_REDO';\nexport const ACTION_UNDO = 'ACTION_UNDO';\n\nexport interface RedoAction {\n    type: typeof ACTION_REDO,\n    payload: {\n        serialized: string,\n    },\n};\nexport interface UndoAction {\n    type: typeof ACTION_UNDO,\n    payload: {\n        serialized: string,\n    },\n};\n\n// Combine all action types.\nexport type ActionTypes = NoOpAction\n    | UpdateBoardAction\n    | UpdateDisplayAction | UpdateGameOptionsAction\n    | RedoAction | UndoAction;\n","import { ACTION_REDO, ACTION_UNDO, NO_OP, ActionTypes } from './types';\nimport { HistoryModel } from '../models/history';\n\n\nexport const redo = (history: HistoryModel): ActionTypes => {\n    if (history.id >= history.boards.length - 1) {\n        // Nothing to redo.\n        return NO_OP;\n    }\n    return {\n        type: ACTION_REDO,\n        payload: {\n            serialized: history.boards[history.id + 1],\n        },\n    };\n};\n\nexport const undo = (history: HistoryModel): ActionTypes => {\n    if (history.id === 0) {\n        // Nothing to do.\n        return NO_OP;\n    }\n    return {\n        type: ACTION_UNDO,\n        payload: {\n            serialized: history.boards[history.id - 1],\n        },\n    };\n};\n","import * as KeyCode from 'keycode-js';\nimport _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\nimport { ControlModel } from '../models/control';\nimport { HistoryModel } from '../models/history';\nimport { redo, undo } from './history';\nimport { ACTION_UPDATE_BOARD, ActionTypes, NO_OP } from './types';\n\n\nexport const updateBoard = (board: BoardModel): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_BOARD,\n        payload: {\n            board: board,\n        }\n    };\n};\n\nconst pressEsc = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllSelections();\n    newBoard.clearAllRestricteds();\n    newBoard.highlightMatching = null;\n    return updateBoard(newBoard);\n}\n\nexport const select = (\n        board: BoardModel,\n        control: ControlModel,\n        cellId: number,\n        clearSelection: boolean = true,\n        setMultiSelect: boolean | null = null\n        ): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    if (setMultiSelect !== null) {\n        newBoard.multiSelectMode = setMultiSelect;\n    }\n\n    if (clearSelection) {\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n        newBoard.highlightMatching = null;\n    } else {\n        newBoard.clearAllRestricteds();\n    }\n\n    newBoard.setSelected(cellId);\n\n    if (control.displayOptions.highlightRestricted) {\n        newBoard.setRestricted(control.gameOptions);\n    }\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n\n    return updateBoard(newBoard);\n}\n\nexport const mouseDown = (board: BoardModel, control: ControlModel, cellId: number, clearSelection: boolean): ActionTypes => {\n    return select(board, control, cellId, clearSelection, true);\n}\n\nexport const mouseOver = (board: BoardModel, control: ControlModel, cellId: number): ActionTypes => {\n    if (!board.multiSelectMode) {\n        return NO_OP;\n    }\n    return select(board, control, cellId, false);\n}\n\nexport const mouseUp = (board: BoardModel): ActionTypes => {\n    return updateBoard(Object.assign(board, { multiSelectMode: false}));\n}\n\nconst setValue = (board: BoardModel, control: ControlModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.setValueOfSelectedCells(\n        newValue,\n        control.gameOptions,\n        control.displayOptions.autoCleanUp);\n\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n    return updateBoard(newBoard);\n};\n\nconst unsetValue = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.unsetSelectedCells();\n\n    return updateBoard(newBoard);\n};\n\nconst toggleCornerValues = (board: BoardModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n    return updateBoard(newBoard);\n}\n\nconst toggleCenterValues = (board: BoardModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.toggleCenterValuesOfSelectedCells(newValue);\n    return updateBoard(newBoard);\n}\n\n// Move selected cell in direction (d_row, d_col).\n// If there are more than one selected cells, only move the first one.\nconst move = (board: BoardModel, control: ControlModel, d_row: number, d_col: number): ActionTypes => {\n    let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n    for (let i = 0; i < 81; i++) {\n        if (board.cells[i].selected) {\n            [r, c] = board.toRowCol(i);\n            break;\n        }\n    }\n    r = (r + d_row + 9) % 9;\n    c = (c + d_col + 9) % 9;\n    return select(board, control, board.toCellId(r, c));\n}\n\nconst pressBackspace = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.unsetSelectedCells();\n\n    newBoard.clearCornerValuesOfSelectedCells();\n    newBoard.clearCenterValuesOfSelectedCells();\n\n    return updateBoard(newBoard);\n}\n\nexport const keyDown = (board: BoardModel, control: ControlModel, history: HistoryModel, e: any): ActionTypes => {\n    let isShift = !!e.shiftKey;\n    let isMeta = !!e.metaKey;\n\n    // Pressed 1-9\n    if (e.keyCode >= KeyCode.KEY_1 && e.keyCode <= KeyCode.KEY_9) {\n        const value = String.fromCharCode(e.keyCode) as CellValue;\n        if (isShift) {\n            return toggleCornerValues(board, value)\n        } else if (isMeta) {\n            e.preventDefault();\n            return toggleCenterValues(board, value);\n        } else {\n            return setValue(board, control, value);\n        }\n    }\n\n    switch (e.keyCode) {\n        case KeyCode.KEY_SPACE:\n            return unsetValue(board);\n        case KeyCode.KEY_BACK_SPACE:\n            e.preventDefault();\n            return pressBackspace(board);\n        case KeyCode.KEY_DOWN:\n            return move(board, control, +1, 0);\n        case KeyCode.KEY_UP:\n            return move(board, control, -1, 0);\n        case KeyCode.KEY_LEFT:\n            return move(board, control, 0, -1);\n        case KeyCode.KEY_RIGHT:\n            return move(board, control, 0, +1);\n        case KeyCode.KEY_ESCAPE:\n            return pressEsc(board);\n        case KeyCode.KEY_Z:\n        case KeyCode.KEY_U:\n            return undo(history);\n        case KeyCode.KEY_Y:\n        case KeyCode.KEY_R:\n            return redo(history);\n        default:\n    }\n    return NO_OP;\n}\n","import _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\nimport { ControlModel } from '../models/control';\n\nconst getValuesAndCenterValues = (board: BoardModel): [Array<CellValue>, Array<Set<CellValue>>] => {\n    let cellValues: Array<CellValue> = [];\n    let centerValues: Array<Set<CellValue>> = [];\n\n    board.cells.forEach((cell) => {\n        cellValues.push(cell.value);\n        centerValues.push(_.clone(cell.centerValues));\n    });\n\n    return [cellValues, centerValues];\n};\n\nconst loadValuesAndCenterValues = (board: BoardModel, [cellValues, centerValues]: [Array<CellValue>, Array<Set<CellValue>>]) => {\n    for (let i = 0; i < 81; i++) {\n        board.cells[i].value = cellValues[i];\n        board.cells[i].centerValues = _.clone(centerValues[i]);\n    }\n};\n\nconst attempt = (board: BoardModel, control: ControlModel): [BoardModel | null, number] => {\n    let minOptionsCellId = -1;\n    for (let i = 0; i < 81; i++) {\n        if (board.cells[i].value === null) {\n            if (minOptionsCellId < 0 || board.cells[i].centerValues.size < board.cells[minOptionsCellId].centerValues.size) {\n                minOptionsCellId = i;\n            }\n        }\n    }\n    if (minOptionsCellId < 0) {\n        // All cells are filled.\n        return [_.cloneDeep(board), 1];\n    }\n\n    const currentState = getValuesAndCenterValues(board);\n    const options = board.cells[minOptionsCellId].centerValues;\n    let cntSolutions = 0;\n    let firstSolution: BoardModel | null = null;\n\n    for (let option of options) {\n        loadValuesAndCenterValues(board, currentState);\n        board.clearAllSelections();\n        board.setSelected(minOptionsCellId);\n        board.setValueOfSelectedCells(option, control.gameOptions, true);\n\n        let [solution, cnt] = attempt(board, control);\n        if (cnt > 0) {\n            if (firstSolution === null) {\n                firstSolution = solution;\n                firstSolution?.clearAllSelections();\n                firstSolution?.clearAllRestricteds();\n            }\n            cntSolutions += cnt;\n            if (cntSolutions >= 2) {\n                break;\n            }\n        }\n    };\n\n    return [firstSolution, cntSolutions];\n};\n\nexport const solveBoard = (board: BoardModel, control: ControlModel): [BoardModel | null, number] => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.fillAllPossibleValues(control.gameOptions);\n    return attempt(newBoard, control);\n};\n","import React from 'react';\n\nimport { CellModel, CellValue } from '../../models/cell';\n\ntype CellProps = {\n    cell: CellModel,\n    onClick: (e: any) => void,\n    onMouseDown: (e: any) => void,\n    onMouseOver: (e: any) => void,\n    key: string,\n    highlightMatching: CellValue,\n};\n\nclass Cell extends React.Component<CellProps> {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    shouldHighlightMatching(value: CellValue) {\n        return this.props.highlightMatching && value === this.props.highlightMatching;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"corner-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"center-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        } else if (this.shouldHighlightMatching(this.props.cell.value)) {\n            classes.push('matching');\n        } else if (this.props.cell.restricted) {\n            classes.push('restricted');\n        }\n        if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                onMouseDown={this.props.onMouseDown}\n                onMouseOver={this.props.onMouseOver}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nexport default Cell;\n","import React from 'react';\n\nimport Cell from './Cell';\nimport { BoardModel } from '../../models/board';\n\nclass Board extends React.Component<BoardProps> {\n    renderCell(i: number) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                onMouseDown={(e) => this.props.onMouseDown(e, i)}\n                onMouseOver={() => this.props.onMouseOver(i)}\n                key={String(i)}\n                highlightMatching={this.props.board.highlightMatching}\n            />\n        );\n    }\n\n    renderRow(startingCell: number) {\n        const cells = [...Array(9).keys()].map(x => this.renderCell(startingCell + x));\n        return (\n            <div className=\"row\" key={startingCell}>\n                {cells}\n            </div>\n        );\n    }\n\n    render() {\n        const rows = [...Array(9).keys()].map(x => this.renderRow(9 * x));\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\ntype BoardProps = {\n    board: BoardModel,\n    onClick: (e: any, i: number) => void,\n    onMouseDown: (e: any, i: number) => void,\n    onMouseOver: (i: number) => void,\n};\n\n\nexport default Board;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { updateDisplay } from '../../actions/control';\nimport { GameState } from '../Game';\n\nclass DisplayOptions extends React.Component<DisplayOptionsProps> {\n    render() {\n        return (\n            <div id=\"display-options\">\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.highlightRestricted}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightRestricted: !this.props.highlightRestricted\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-matching-numbers'\n                    label='Highlight matching numbers'\n                    checked={this.props.highlightMatchingNumbers}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightMatchingNumbers: !this.props.highlightMatchingNumbers\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-auto-cleanup'\n                    label='Auto Cleanup corner &amp; center values'\n                    checked={this.props.autoCleanUp}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        autoCleanUp: !this.props.autoCleanUp\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.displayOptions};\n};\n\nconst connector = connect(mapStateToProps, { updateDisplay });\n\ntype DisplayOptionsProps = ConnectedProps<typeof connector>;\n\nexport default connector(DisplayOptions);\n","import _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { ControlModel, DisplayOptions, GameOptions } from '../models/control';\nimport { solveBoard } from '../utils/solver';\nimport { updateBoard } from './board';\nimport {\n    ACTION_UPDATE_DISPLAY,\n    ACTION_UPDATE_GAME_PLAY as ACTION_UPDATE_GAME_OPTIONS,\n    ActionTypes,\n    NO_OP\n    } from './types';\n\n\n\nexport const fillCenter = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.fillAllPossibleValues(control.gameOptions);\n    return updateBoard(newBoard);\n}\n\nexport const updateDisplay = (displayOptions: DisplayOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_DISPLAY,\n        payload: displayOptions,\n    };\n};\n\nexport const updateGameOptions = (gameOptions: GameOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_GAME_OPTIONS,\n        payload: gameOptions,\n    }\n};\n\nexport const verify = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllErrors();\n    let invalidCellIds = newBoard.getInvalidCellIds(control.gameOptions);\n    newBoard.setErrors(invalidCellIds);\n\n    alert(invalidCellIds.size > 0 ? 'Error found :(' : 'LGTM!');\n    return updateBoard(newBoard);\n}\n\nexport const solve = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let [newBoard, cntSolutions] = solveBoard(board, control);\n    if (cntSolutions >= 2) {\n        alert('Found at least ' + cntSolutions + ' solutions.');\n    } else {\n        alert('Found ' + cntSolutions + ' solution.');\n    }\n    if (newBoard !== null) {\n        return updateBoard(newBoard);\n    }\n    return NO_OP;\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { updateGameOptions } from '../../actions/control';\nimport { GameState } from '../Game';\n\n\nclass GameOptions extends React.Component<GameOptionsProps> {\n    render() {\n        return (\n            <div id=\"game-play\">\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label='Anti Knight'\n                    checked={this.props.antiKnight}\n                    onChange={() => this.props.updateGameOptions({\n                        ...this.props,\n                        antiKnight: !this.props.antiKnight\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label='Anti King'\n                    checked={this.props.antiKing}\n                    onChange={() => this.props.updateGameOptions({\n                        ...this.props,\n                        antiKing: !this.props.antiKing\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.gameOptions};\n};\n\nconst connector = connect(mapStateToProps, { updateGameOptions: updateGameOptions });\n\ntype GameOptionsProps = ConnectedProps<typeof connector>;\n\nexport default connector(GameOptions);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport DisplayOptions from './DisplayOptions';\nimport GameOptions from './GameOptions';\n\n\nclass Control extends React.Component<ControlProps> {\n    render() {\n        return (\n            <Form>\n                <div className=\"\">\n                    <Button onClick={this.props.onClickVerify}>\n                        Verify\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickUndo}\n                        className=\"btn-secondary\"\n                    >\n                        Undo\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickRedo}\n                        className=\"btn-secondary\"\n                    >\n                        Redo\n                    </Button>\n                </div>\n                <hr/>\n                <DisplayOptions />\n                <hr/>\n                <GameOptions />\n                <hr/>\n                <h4>Help</h4>\n                <Button\n                    onClick={this.props.onClickFillCenters}\n                    className=\"btn-secondary\"\n                >\n                    Fill all center values\n                </Button>\n                &nbsp;\n                <Button\n                    onClick={this.props.solve}\n                    className=\"btn-secondary\"\n                >\n                    Solve\n                </Button>\n            </Form>\n        );\n    }\n}\n\ntype ControlProps = {\n    onClickVerify: () => void,\n    onClickUndo: () => void,\n    onClickRedo: () => void,\n    solve: () => void,\n\n    onClickFillCenters: () => void,\n};\n\nexport default Control;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport {\n    keyDown,\n    mouseDown,\n    mouseOver,\n    mouseUp,\n    select\n    } from '../actions/board';\nimport { fillCenter, solve, verify } from '../actions/control';\nimport { redo, undo } from '../actions/history';\nimport { BoardModel } from '../models/board';\nimport { ControlModel } from '../models/control';\nimport { HistoryModel } from '../models/history';\nimport Board from './board/Board';\nimport Control from './control/Control';\n\n\nexport type GameState = {\n    board: BoardModel,\n    control: ControlModel,\n    history: HistoryModel,\n};\n\nclass Game extends React.Component<GameProps, GameState> {\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.props.keyDown(this.props.board, this.props.control, this.props.history, e)}\n                tabIndex={0}\n                className=\"container\"\n                onMouseUp={() => this.props.mouseUp(this.props.board)}\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.props.board}\n                            onClick={(e, id) => this.props.select(this.props.board, this.props.control, id, !e.metaKey)}\n                            onMouseDown={(e, id) => this.props.mouseDown(this.props.board, this.props.control, id, !e.metaKey)}\n                            onMouseOver={(id) => this.props.mouseOver(this.props.board, this.props.control, id)}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            onClickVerify={() => this.props.verify(this.props.board, this.props.control)}\n                            onClickUndo={() => this.props.undo(this.props.history)}\n                            onClickRedo={() => this.props.redo(this.props.history)}\n                            onClickFillCenters={() => this.props.fillCenter(this.props.board, this.props.control)}\n                            solve={() => this.props.solve(this.props.board, this.props.control)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state};\n};\n\nconst connector = connect(mapStateToProps, {\n    // history actions.\n    redo: redo,\n    undo: undo,\n\n    // board actions.\n    keyDown: keyDown,\n    mouseDown: mouseDown,\n    mouseOver: mouseOver,\n    mouseUp: mouseUp,\n    select: select,\n\n    // control actions.\n    fillCenter: fillCenter,\n    verify: verify,\n    solve: solve,\n});\n\ntype GameProps = ConnectedProps<typeof connector>;\n\nexport default connector(Game);\n","export type GameOptions = {\n    antiKnight: boolean;\n    antiKing: boolean;\n};\n\nexport type DisplayOptions = {\n    highlightRestricted: boolean;\n    highlightMatchingNumbers: boolean;\n    autoCleanUp: boolean;\n};\n\nexport class ControlModel {\n    displayOptions: DisplayOptions;\n    gameOptions: GameOptions;\n\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n            highlightMatchingNumbers: false,\n            autoCleanUp: false,\n        };\n        this.gameOptions = {\n            antiKnight: false,\n            antiKing: false,\n        };\n    }\n}\n","export type CellValue = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | null;\n\nexport class CellModel {\n    value: CellValue;\n    cornerValues: Set<CellValue>;\n    centerValues: Set<CellValue>;\n    selected: boolean;\n    restricted: boolean;\n    error: boolean;\n    row: number;\n    col: number;\n    id: number;\n\n    constructor(id: number) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop(): boolean {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom(): boolean {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft(): boolean {\n        return this.col % 3 === 0;\n    }\n    isRegionRight(): boolean {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop(): boolean {\n        return this.row === 0;\n    }\n    isBoardBottom(): boolean {\n        return this.row === 8;\n    }\n    isBoardLeft(): boolean {\n        return this.col === 0;\n    }\n    isBoardRight(): boolean {\n        return this.col === 8;\n    }\n}\n","import { CellModel, CellValue } from './cell';\nimport { GameOptions } from './control';\n\nfunction set_intersection(a: Set<any>, b: Set<any>) {\n    return new Set([...a].filter(x => b.has(x)));\n}\n\nfunction set_difference(a: Set<any>, b: Set<any>) {\n    return new Set([...a].filter(x => !b.has(x)));\n}\n\nclass BoardModel {\n    cells: Array<CellModel>;\n    highlightMatching: CellValue;\n    multiSelectMode: boolean;\n\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n        this.highlightMatching = null;\n        this.multiSelectMode = false;\n    }\n\n    serialize(): string {\n        let result: Array<{\n            value: CellValue;\n            cornerValues: Array<CellValue>;\n            centerValues: Array<CellValue>;\n        }> = [];\n\n        this.cells.forEach((cell) => {\n            result.push({\n                value: cell.value,\n                cornerValues: Array.from(cell.cornerValues),\n                centerValues: Array.from(cell.centerValues),\n            });\n        });\n        return JSON.stringify(result);\n    }\n\n    load(serialized: string): void {\n        this.clearAllErrors();\n        this.clearAllRestricteds();\n        this.clearAllSelections();\n\n        let obj = JSON.parse(serialized);\n        for (let i = 0; i < 81; i++) {\n            this.cells[i].value = obj[i].value;\n            this.cells[i].cornerValues = new Set(obj[i].cornerValues);\n            this.cells[i].centerValues = new Set(obj[i].centerValues);\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row: number, col: number): boolean {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row: number, col: number): number {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId: number): [number, number] {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row: number, col: number): number {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId: number): number {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId: number, gameOptions: GameOptions): Set<number> {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result: Set<number> = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gameOptions.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gameOptions.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gameOptions: GameOptions): Set<number> {\n        let result: Set<number> = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gameOptions).forEach(neighborId => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    getPossibleValues(cellId: number, gameOptions: GameOptions): Set<CellValue> {\n        const seenValues = Array.from(this.getVisibleCells(cellId, gameOptions))\n            .map(neighborId => this.cells[neighborId].value)\n            .filter(x => x);\n\n        return set_difference(new Set(['1', '2', '3', '4', '5', '6', '7', '8', '9']), new Set(seenValues));\n    }\n\n    fillAllPossibleValues(gameOptions: GameOptions): void {\n        this.cells.forEach(cell => {\n            if (!cell.value) {\n                cell.centerValues = this.getPossibleValues(cell.id, gameOptions);\n            }\n        });\n    }\n\n    setSelected(cellId: number): void {\n        this.cells[cellId].selected = true;\n    }\n\n    getSelectedValues(): Set<CellValue> {\n        return new Set(\n            this.cells\n                .filter((cell) => cell.selected)\n                .filter((cell) => cell.value)\n                .map((cell) => cell.value)\n        );\n    }\n\n    setRestricted(gameOptions: GameOptions): void {\n        let restricted: Set<any> | null = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gameOptions);\n                } else {\n                    restricted = set_intersection(this.getVisibleCells(id, gameOptions), restricted);\n                }\n            }\n        }\n\n        if (restricted) {\n            restricted.forEach((cellId) => {\n                this.cells[cellId].restricted = true;\n            });\n        }\n    }\n\n    setErrors(cellIds: Set<number>): void {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSelectedCells(newValue: CellValue, gameOptions: GameOptions, autoCleanup: boolean = false): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = newValue;\n                if (autoCleanup) {\n                    this.getVisibleCells(cell.id, gameOptions).forEach((id) => {\n                        this.cells[id].cornerValues.delete(newValue);\n                        this.cells[id].centerValues.delete(newValue);\n                    });\n                }\n            }\n        });\n    }\n\n    unsetSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = null;\n            }\n        });\n    }\n\n    toggleCornerValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections(): void {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds(): void {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors(): void {\n        this.cells.forEach((cell) => {\n            cell.error = false;\n        });\n    }\n}\n\nexport { BoardModel };\n","import { BoardModel } from \"./board\";\n\nexport class HistoryModel {\n    boards: Array<string>;\n    id: number;\n\n    constructor() {\n        this.boards = [];\n        this.id = 0;\n\n        const board = new BoardModel();\n        this.boards.push(board.serialize());\n    }\n}\n","import { combineReducers } from 'redux';\n\nimport { controlReducer } from './control';\nimport { boardReducer } from './board';\nimport { historyReducer } from './history';\n\nconst isMouseDownReducer = (isMouseDown = false) => {\n    return isMouseDown;\n}\n\nconst highlightMatchingReducer = (highlightMatching = null) => {\n    return highlightMatching;\n}\n\nexport default combineReducers({\n    board: boardReducer,\n    control: controlReducer,\n    history: historyReducer,\n    isMouseDown: isMouseDownReducer,\n    highlightMatching: highlightMatchingReducer,\n});\n","import { ActionTypes, ACTION_UPDATE_BOARD, ACTION_UNDO, ACTION_REDO } from '../actions/types';\nimport { BoardModel } from '../models/board';\n\nexport const boardReducer = (board = new BoardModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        return action.payload.board;\n    }\n    if (action.type === ACTION_UNDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n    if (action.type === ACTION_REDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n\n    return board;\n}\n","import { ACTION_UPDATE_DISPLAY, ACTION_UPDATE_GAME_PLAY, ActionTypes } from '../actions/types';\nimport { ControlModel } from '../models/control';\n\nexport const controlReducer = (control: ControlModel = new ControlModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_DISPLAY) {\n        return {...control, displayOptions: action.payload};\n    }\n    if (action.type === ACTION_UPDATE_GAME_PLAY) {\n        return {...control, gameOptions: action.payload};\n    }\n    return control;\n};\n","import assert from 'assert';\nimport { ActionTypes, ACTION_UPDATE_BOARD, ACTION_UNDO, ACTION_REDO } from '../actions/types';\nimport { HistoryModel } from '../models/history';\n\nexport const historyReducer = (history = new HistoryModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        const serialized = action.payload.board.serialize();\n\n        // Only update history if the serialized new board is different.\n        // Thus, we ignore all selections and restrictions.\n        if (serialized !== history.boards[history.id]) {\n            // Remove the rest of history.\n            // This clean data in case we do lots of undo, and then make a new move.\n            history.boards = history.boards.slice(0, history.id + 1);\n\n            // Update history.\n            history.boards.push(serialized);\n            history.id += 1;\n        }\n        return history;\n    }\n    if (action.type === ACTION_UNDO) {\n        assert(history.id > 0);\n        return {...history, id: history.id - 1 };\n    }\n    if (action.type === ACTION_REDO) {\n        assert(history.id + 1 < history.boards.length);\n        return {...history, id: history.id + 1 };\n    }\n    return history;\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport Game from './components/Game';\nimport './index.css';\nimport reducers from './reducers';\n\n\n\nReactDOM.render(\n    <Provider store={createStore(reducers)}>\n        <Game />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}