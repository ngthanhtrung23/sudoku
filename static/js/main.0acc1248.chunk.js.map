{"version":3,"sources":["components/board/Cell.tsx","components/board/Board.tsx","components/control/DisplayOptions.tsx","actions/control.ts","components/control/GameOptions.tsx","components/control/Control.tsx","components/Game.tsx","actions/board.ts","models/control.ts","models/cell.ts","models/board.ts","models/history.ts","reducers/index.ts","reducers/board.ts","reducers/control.ts","reducers/history.ts","index.tsx"],"names":["Cell","this","props","cell","value","className","highlightMatching","sortedValues","Array","from","cornerValues","sort","map","classes","shouldHighlightMatching","key","id","centerValues","isRegionTop","push","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","selected","restricted","error","join","onClick","onMouseDown","onMouseOver","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","Board","i","board","cells","e","String","startingCell","renderCell","rows","renderRow","DisplayOptions","Form","Check","type","label","checked","highlightRestricted","onChange","updateDisplay","highlightMatchingNumbers","autoCleanUp","connector","connect","state","control","displayOptions","payload","GamePlay","antiKnight","updateGamePlay","antiKing","gamePlay","Control","Button","onClickVerify","onClickUndo","onClickRedo","onClickFillCenters","Game","history","undo","boards","length","redo","console","log","newBoard","_","cloneDeep","clearAllSelections","clearAllRestricteds","updateBoard","setState","selectedValues","Set","filter","size","selectedValue","values","next","cellId","clearSelection","setSelected","setRestricted","select","metaKey","isMouseDown","newValue","clearAllError","setValueOfSelectedCells","updateHighlightMatchingNumbers","unsetSelectedCells","toggleCornerValuesOfSelectedCells","clearCornerValuesOfSelectedCells","toggleCenterValuesOfSelectedCells","clearCenterValuesOfSelectedCells","clearAllErrors","invalidCellIds","getInvalidCellIds","setErrors","alert","d_row","d_col","r","c","toRowCol","toCellId","keyCode","isShift","shiftKey","isMeta","KeyCode","fromCharCode","preventDefault","moveSelection","clearSelectionAndRestricted","fillAllPossibleValues","onKeyDown","handleKeyDown","tabIndex","onMouseUp","handleMouseUp","handleClick","handleMouseDown","handleMouseOver","verifyBoard","handleClickFillCenter","serialized","ControlModel","CellModel","row","col","set_intersection","a","b","x","has","BoardModel","result","forEach","JSON","stringify","obj","parse","getRegionByPosition","col2","add","row2","region","getRegion","di","dj","isInside","delete","myValue","getVisibleCells","neighborId","seenValues","getPossibleValues","cellIds","autoCleanup","clear","HistoryModel","serialize","combineReducers","action","load","slice","assert","ReactDOM","render","store","createStore","reducers","document","getElementById"],"mappings":"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","file":"static/js/main.0acc1248.chunk.js","sourcesContent":["import React from 'react';\n\nimport { CellModel, CellValue } from '../../models/cell';\n\ntype CellProps = {\n    cell: CellModel,\n    onClick: (e: any) => void,\n    onMouseDown: (e: any) => void,\n    onMouseOver: (e: any) => void,\n    key: string,\n    highlightMatching: CellValue,\n};\n\nclass Cell extends React.Component<CellProps> {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    shouldHighlightMatching(value: CellValue) {\n        return this.props.highlightMatching && value === this.props.highlightMatching;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"corner-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"center-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        } else if (this.shouldHighlightMatching(this.props.cell.value)) {\n            classes.push('matching');\n        } else if (this.props.cell.restricted) {\n            classes.push('restricted');\n        }\n        if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                onMouseDown={this.props.onMouseDown}\n                onMouseOver={this.props.onMouseOver}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nexport default Cell;\n","import React from 'react';\n\nimport Cell from './Cell';\nimport { CellValue } from '../../models/cell';\nimport { BoardModel } from '../../models/board';\n\nclass Board extends React.Component<BoardProps> {\n    renderCell(i: number) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                onMouseDown={(e) => this.props.onMouseDown(e, i)}\n                onMouseOver={() => this.props.onMouseOver(i)}\n                key={String(i)}\n                highlightMatching={this.props.highlightMatching}\n            />\n        );\n    }\n\n    renderRow(startingCell: number) {\n        let cells = [];\n        for (let i = startingCell; i < startingCell + 9; i++) {\n            cells.push(this.renderCell(i));\n        }\n        return (\n            <div className=\"row\" key={startingCell}>\n                {cells}\n            </div>\n        );\n    }\n\n    render() {\n        let rows = [];\n        for (let i = 0; i < 81; i += 9) {\n            rows.push(this.renderRow(i));\n        }\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\ntype BoardProps = {\n    board: BoardModel,\n    onClick: (e: any, i: number) => void,\n    onMouseDown: (e: any, i: number) => void,\n    onMouseOver: (i: number) => void,\n    highlightMatching: CellValue,\n};\n\n\nexport default Board;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { updateDisplay } from '../../actions/control';\nimport { GameState } from '../Game';\n\nclass DisplayOptions extends React.Component<DisplayOptionsProps> {\n    render() {\n        return (\n            <div id=\"display-options\">\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.highlightRestricted}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightRestricted: !this.props.highlightRestricted\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-matching-numbers'\n                    label='Highlight matching numbers'\n                    checked={this.props.highlightMatchingNumbers}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightMatchingNumbers: !this.props.highlightMatchingNumbers\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-auto-cleanup'\n                    label='Auto Cleanup corner &amp; center values'\n                    checked={this.props.autoCleanUp}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        autoCleanUp: !this.props.autoCleanUp\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.displayOptions};\n};\n\nconst connector = connect(mapStateToProps, { updateDisplay });\n\ntype DisplayOptionsProps = ConnectedProps<typeof connector>;\n\nexport default connector(DisplayOptions);\n","import { DisplayOptions, GameOptions } from '../models/control';\n\nexport const ACTION_UPDATE_DISPLAY = 'ACTION_UPDATE_DISPLAY';\nexport const ACTION_UPDATE_GAME_PLAY = 'ACTION_UPDATE_GAME_PLAY';\n\ninterface UpdateDisplayAction {\n    type: typeof ACTION_UPDATE_DISPLAY,\n    payload: DisplayOptions,\n};\n\ninterface UpdateGamePlayAction {\n    type: typeof ACTION_UPDATE_GAME_PLAY,\n    payload: GameOptions,\n}\n\nexport const updateDisplay = (displayOptions: DisplayOptions): UpdateDisplayAction => {\n    return {\n        type: ACTION_UPDATE_DISPLAY,\n        payload: displayOptions,\n    };\n};\n\nexport const updateGamePlay = (gamePlay: GameOptions): UpdateGamePlayAction => {\n    return {\n        type: ACTION_UPDATE_GAME_PLAY,\n        payload: gamePlay,\n    }\n};\n\nexport type ControlActionTypes = UpdateDisplayAction | UpdateGamePlayAction;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { updateGamePlay } from '../../actions/control';\nimport { GameState } from '../Game';\n\nclass GamePlay extends React.Component<GamePlayProps> {\n    render() {\n        return (\n            <div id=\"game-play\">\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label='Anti Knight'\n                    checked={this.props.antiKnight}\n                    onChange={() => this.props.updateGamePlay({\n                        ...this.props,\n                        antiKnight: !this.props.antiKnight\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label='Anti King'\n                    checked={this.props.antiKing}\n                    onChange={() => this.props.updateGamePlay({\n                        ...this.props,\n                        antiKing: !this.props.antiKing\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.gamePlay};\n};\n\nconst connector = connect(mapStateToProps, { updateGamePlay });\n\ntype GamePlayProps = ConnectedProps<typeof connector>;\n\nexport default connector(GamePlay);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nimport DisplayOptions from './DisplayOptions';\nimport GamePlay from './GameOptions';\n\nclass Control extends React.Component<ControlProps> {\n    render() {\n        return (\n            <Form>\n                <div className=\"\">\n                    <Button onClick={this.props.onClickVerify}>\n                        Verify\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickUndo}\n                        className=\"btn-secondary\"\n                    >\n                        Undo\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickRedo}\n                        className=\"btn-secondary\"\n                    >\n                        Redo\n                    </Button>\n                </div>\n                <hr/>\n                <DisplayOptions />\n                <hr/>\n                <GamePlay />\n                <hr/>\n                <h4>Help</h4>\n                <Button\n                    onClick={this.props.onClickFillCenters}\n                    className=\"btn-secondary\"\n                >\n                    Fill all center values\n                </Button>\n            </Form>\n        );\n    }\n}\n\ntype ControlProps = {\n    onClickVerify: () => void,\n    onClickUndo: () => void,\n    onClickRedo: () => void,\n\n    onClickFillCenters: () => void,\n};\n\nexport default Control;\n","import * as KeyCode from 'keycode-js';\nimport _ from 'lodash';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport Board from './board/Board';\nimport Control from './control/Control';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\nimport { ControlModel } from '../models/control';\nimport { redo, undo, updateBoard } from '../actions/board';\n\nexport type GameState = {\n    board: BoardModel,\n    control: ControlModel,\n\n    history: {\n        boards: Array<string>,\n        id: number,\n    },\n\n    isMouseDown: boolean,\n    highlightMatching: CellValue,\n};\n\nclass Game extends React.Component<GameProps, GameState> {\n    undo() {\n        if (this.props.history.id === 0) {\n            // Nothing to undo.\n            return;\n        }\n        this.props.undo(this.props.history.boards[this.props.history.id - 1]);\n    }\n\n    redo() {\n        if (this.props.history.id >= this.props.history.boards.length - 1) {\n            // Nothing to redo.\n            return;\n        }\n        this.props.redo(this.props.history.boards[this.props.history.id + 1]);\n    }\n\n    clearSelectionAndRestricted() {\n        console.log('clearSelectionAndRestricted');\n        let newBoard = _.cloneDeep(this.props.board);\n\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n\n        this.props.updateBoard(newBoard);\n        this.setState({highlightMatching: null});\n    }\n\n    updateHighlightMatchingNumbers() {\n        if (this.props.control.displayOptions.highlightMatchingNumbers) {\n            const selectedValues = new Set(\n                this.props.board.cells\n                    .filter((cell) => cell.selected)\n                    .filter((cell) => cell.value)\n                    .map((cell) => cell.value)\n            );\n            if (selectedValues.size === 1) {\n                const selectedValue = selectedValues.values().next().value;\n                this.setState({highlightMatching: selectedValue});\n            }\n        }\n    }\n\n    // Select a cell.\n    select(cellId: number, clearSelection = true) {\n        console.log('select ' + cellId);\n        let newBoard = _.cloneDeep(this.props.board);\n        if (clearSelection) {\n            newBoard.clearAllSelections();\n            newBoard.clearAllRestricteds();\n            // this.setState({highlightMatching: null});\n        } else {\n            newBoard.clearAllRestricteds();\n        }\n\n        newBoard.setSelected(cellId);\n\n        if (this.props.control.displayOptions.highlightRestricted) {\n            newBoard.setRestricted(this.props.control.gamePlay);\n        }\n\n        this.props.updateBoard(newBoard);\n        // this.updateHighlightMatchingNumbers();\n    }\n\n    // Handle clicking on a cell.\n    handleClick(e: any, cellId: number) {\n        console.log('handleClick ' + cellId);\n        this.select(cellId, !e.metaKey);\n    }\n\n    // Handle mousedown on a cell.\n    handleMouseDown(e: any, cellId: number) {\n        console.log('handleMouseDown ' + cellId);\n        this.setState({isMouseDown: true});\n\n        this.select(cellId, !e.metaKey);\n    }\n\n    // Handle mouseover a cell.\n    handleMouseOver(cellId: number) {\n        if (!this.props.isMouseDown) {\n            return;\n        }\n        console.log('handleMouseOver ' + cellId);\n        this.select(cellId, false);\n    }\n\n    handleMouseUp() {\n        console.log('handleMouseUp');\n        this.setState({isMouseDown: false});\n    }\n\n    setValueOfSelectedCells(newValue: CellValue) {\n        console.log('setValueOfSelectedCells ' + newValue);\n        this.clearAllError();\n\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.setValueOfSelectedCells(\n            newValue,\n            this.props.control.gamePlay,\n            this.props.control.displayOptions.autoCleanUp);\n\n        this.props.updateBoard(newBoard);\n        this.updateHighlightMatchingNumbers();\n    }\n\n    unsetSelectedCells() {\n        console.log('unsetSelectedCells');\n        this.clearAllError();\n\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.unsetSelectedCells();\n\n        this.props.updateBoard(newBoard);\n    }\n\n    toggleCornerValuesOfSelectedCells(newValue: CellValue) {\n        console.log('toggleCornerValuesOfSelectedCells ' + newValue);\n\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n        this.props.updateBoard(newBoard);\n    }\n\n    clearCornerValuesOfSelectedCells() {\n        console.log('clearCornerValuesOfSelectedCells');\n        \n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.clearCornerValuesOfSelectedCells();\n        this.props.updateBoard(newBoard);\n    }\n\n    toggleCenterValuesOfSelectedCells(newValue: CellValue) {\n        console.log('toggleCenterValuesOfSelectedCells ' + newValue);\n\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.toggleCenterValuesOfSelectedCells(newValue);\n\n        this.props.updateBoard(newBoard);\n    }\n\n    clearCenterValuesOfSelectedCells() {\n        console.log('clearCenterValuesOfSelectedCells');\n\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.clearCenterValuesOfSelectedCells();\n        this.props.updateBoard(newBoard);\n    }\n\n    clearAllError() {\n        console.log('clearAllError');\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.clearAllErrors();\n        this.props.updateBoard(newBoard);\n    }\n\n    verifyBoard() {\n        console.log('verifyBoard');\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.clearAllErrors();\n        let invalidCellIds = newBoard.getInvalidCellIds(this.props.control.gamePlay);\n        newBoard.setErrors(invalidCellIds);\n        this.props.updateBoard(newBoard);\n\n        alert(invalidCellIds.size > 0 ? 'Error found :(' : 'LGTM!');\n    }\n\n    // Move selected cell in direction (d_row, d_col).\n    // If there are more than one selected cells, only move the first one.\n    moveSelection(d_row: number, d_col: number) {\n        let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n        for (let i = 0; i < 81; i++) {\n            if (this.props.board.cells[i].selected) {\n                [r, c] = this.props.board.toRowCol(i);\n                break;\n            }\n        }\n        r = (r + d_row + 9) % 9;\n        c = (c + d_col + 9) % 9;\n        this.select(this.props.board.toCellId(r, c));\n    }\n\n    // Handle keypress event on a cell.\n    handleKeyDown(e: any) {\n        console.log('handleKeyDown, keyCode = ' + e.keyCode);\n\n        let isShift = !!e.shiftKey;\n        let isMeta = !!e.metaKey;\n\n        // Pressed 1-9\n        if (e.keyCode >= KeyCode.KEY_1 && e.keyCode <= KeyCode.KEY_9) {\n            const value = String.fromCharCode(e.keyCode) as CellValue;\n            if (isShift) {\n                this.toggleCornerValuesOfSelectedCells(value)\n            } else if (isMeta) {\n                this.toggleCenterValuesOfSelectedCells(value);\n                e.preventDefault();\n            } else {\n                this.setValueOfSelectedCells(value);\n            }\n        }\n\n        switch (e.keyCode) {\n            case KeyCode.KEY_SPACE:\n                this.unsetSelectedCells();\n                break;\n            case KeyCode.KEY_BACK_SPACE:\n                this.unsetSelectedCells();\n                this.clearCornerValuesOfSelectedCells();\n                this.clearCenterValuesOfSelectedCells();\n                e.preventDefault();\n                break;\n            case KeyCode.KEY_DOWN:\n                this.moveSelection(+1, 0);\n                break;\n            case KeyCode.KEY_UP:\n                this.moveSelection(-1, 0);\n                break;\n            case KeyCode.KEY_LEFT:\n                this.moveSelection(0, -1);\n                break;\n            case KeyCode.KEY_RIGHT:\n                this.moveSelection(0, +1);\n                break;\n            case KeyCode.KEY_ESCAPE:\n                this.clearSelectionAndRestricted();\n                break;\n            case KeyCode.KEY_Z:\n            case KeyCode.KEY_U:\n                this.undo();\n                break;\n            case KeyCode.KEY_Y:\n            case KeyCode.KEY_R:\n                this.redo();\n                break;\n            default:\n        }\n    }\n\n    handleClickFillCenter() {\n        console.log('handleClickFillCenter');\n        let newBoard = _.cloneDeep(this.props.board);\n        newBoard.fillAllPossibleValues(this.props.control.gamePlay);\n        this.props.updateBoard(newBoard);\n    }\n\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.handleKeyDown(e)}\n                tabIndex={0}\n                className=\"container\"\n                onMouseUp={() => this.handleMouseUp()}\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.props.board}\n                            onClick={(e, i) => this.handleClick(e, i)}\n                            onMouseDown={(e, i) => this.handleMouseDown(e, i)}\n                            onMouseOver={(i) => this.handleMouseOver(i)}\n                            highlightMatching={this.props.highlightMatching}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            onClickVerify={() => this.verifyBoard()}\n                            onClickUndo={() => this.undo()}\n                            onClickRedo={() => this.redo()}\n                            onClickFillCenters={() => this.handleClickFillCenter()}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state};\n};\n\nconst connector = connect(mapStateToProps, {\n    redo,\n    undo,\n    updateBoard,\n});\n\ntype GameProps = ConnectedProps<typeof connector>;\n\nexport default connector(Game);\n","import { BoardModel } from '../models/board';\n\nexport const ACTION_REDO = 'ACTION_REDO';\nexport const ACTION_UNDO = 'ACTION_UNDO';\nexport const ACTION_UPDATE_BOARD = 'ACTION_UPDATE_BOARD';\n\ninterface RedoAction {\n    type: typeof ACTION_REDO,\n    payload: {\n        serialized: string,\n    },\n};\nexport const redo = (serialized: string): RedoAction => {\n    return {\n        type: ACTION_REDO,\n        payload: {\n            serialized,\n        },\n    };\n};\n\ninterface UndoAction {\n    type: typeof ACTION_UNDO,\n    payload: {\n        serialized: string,\n    },\n};\nexport const undo = (serialized: string): UndoAction => {\n    return {\n        type: ACTION_UNDO,\n        payload: {\n            serialized: serialized,\n        },\n    };\n};\n\ninterface UpdateBoardAction {\n    type: typeof ACTION_UPDATE_BOARD,\n    payload: {\n        board: BoardModel,\n    },\n};\nexport const updateBoard = (board: BoardModel): UpdateBoardAction => {\n    return {\n        type: ACTION_UPDATE_BOARD,\n        payload: {\n            board: board,\n        }\n    };\n};\n\nexport type BoardActionTypes = RedoAction | UndoAction | UpdateBoardAction;\n","export type GameOptions = {\n    antiKnight: boolean;\n    antiKing: boolean;\n};\n\nexport type DisplayOptions = {\n    highlightRestricted: boolean;\n    highlightMatchingNumbers: boolean;\n    autoCleanUp: boolean;\n};\n\nexport class ControlModel {\n    displayOptions: DisplayOptions;\n    gamePlay: GameOptions;\n\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n            highlightMatchingNumbers: false,\n            autoCleanUp: false,\n        };\n        this.gamePlay = {\n            antiKnight: false,\n            antiKing: false,\n        };\n    }\n}\n","export type CellValue = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | null;\n\nexport class CellModel {\n    value: CellValue;\n    cornerValues: Set<CellValue>;\n    centerValues: Set<CellValue>;\n    selected: boolean;\n    restricted: boolean;\n    error: boolean;\n    row: number;\n    col: number;\n    id: number;\n\n    constructor(id: number) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop(): boolean {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom(): boolean {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft(): boolean {\n        return this.col % 3 === 0;\n    }\n    isRegionRight(): boolean {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop(): boolean {\n        return this.row === 0;\n    }\n    isBoardBottom(): boolean {\n        return this.row === 8;\n    }\n    isBoardLeft(): boolean {\n        return this.col === 0;\n    }\n    isBoardRight(): boolean {\n        return this.col === 8;\n    }\n}\n","import { CellModel, CellValue } from './cell';\nimport { GameOptions } from './control';\n\nfunction set_intersection(a: Set<any>, b: Set<any>) {\n    return new Set([...a].filter(x => b.has(x)));\n}\n\nfunction set_difference(a: Set<any>, b: Set<any>) {\n    return new Set([...a].filter(x => !b.has(x)));\n}\n\nclass BoardModel {\n    cells: Array<CellModel>;\n\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n    }\n\n    serialize(): string {\n        let result: Array<{\n            value: CellValue;\n            cornerValues: Array<CellValue>;\n            centerValues: Array<CellValue>;\n        }> = [];\n\n        this.cells.forEach((cell) => {\n            result.push({\n                value: cell.value,\n                cornerValues: Array.from(cell.cornerValues),\n                centerValues: Array.from(cell.centerValues),\n            });\n        });\n        return JSON.stringify(result);\n    }\n\n    load(serialized: string): void {\n        this.clearAllErrors();\n        this.clearAllRestricteds();\n        this.clearAllSelections();\n\n        let obj = JSON.parse(serialized);\n        for (let i = 0; i < 81; i++) {\n            this.cells[i].value = obj[i].value;\n            this.cells[i].cornerValues = new Set(obj[i].cornerValues);\n            this.cells[i].centerValues = new Set(obj[i].centerValues);\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row: number, col: number): boolean {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row: number, col: number): number {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId: number): [number, number] {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row: number, col: number): number {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId: number): number {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId: number, gamePlay: GameOptions): Set<number> {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result: Set<number> = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gamePlay.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gamePlay.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gamePlay: GameOptions): Set<number> {\n        let result: Set<number> = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gamePlay).forEach(neighborId => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    getPossibleValues(cellId: number, gamePlay: GameOptions): Set<CellValue> {\n        const seenValues = Array.from(this.getVisibleCells(cellId, gamePlay))\n            .map(neighborId => this.cells[neighborId].value)\n            .filter(x => x);\n\n        return set_difference(new Set(['1', '2', '3', '4', '5', '6', '7', '8', '9']), new Set(seenValues));\n    }\n\n    fillAllPossibleValues(gamePlay: GameOptions): void {\n        this.cells.forEach(cell => {\n            if (!cell.value) {\n                cell.centerValues = this.getPossibleValues(cell.id, gamePlay);\n            }\n        });\n    }\n\n    setSelected(cellId: number): void {\n        this.cells[cellId].selected = true;\n    }\n\n    setRestricted(gamePlay: GameOptions): void {\n        let restricted: Set<any> | null = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gamePlay);\n                } else {\n                    restricted = set_intersection(this.getVisibleCells(id, gamePlay), restricted);\n                }\n            }\n        }\n\n        if (restricted) {\n            restricted.forEach((cellId) => {\n                this.cells[cellId].restricted = true;\n            });\n        }\n    }\n\n    setErrors(cellIds: Set<number>): void {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSelectedCells(newValue: CellValue, gamePlay: GameOptions, autoCleanup: boolean = false): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = newValue;\n                if (autoCleanup) {\n                    this.getVisibleCells(cell.id, gamePlay).forEach((id) => {\n                        this.cells[id].cornerValues.delete(newValue);\n                        this.cells[id].centerValues.delete(newValue);\n                    });\n                }\n            }\n        });\n    }\n\n    unsetSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = null;\n            }\n        });\n    }\n\n    toggleCornerValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections(): void {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds(): void {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors(): void {\n        this.cells.forEach((cell) => {\n            cell.error = false;\n        });\n    }\n}\n\nexport { BoardModel };\n","import { BoardModel } from \"./board\";\n\nexport class HistoryModel {\n    boards: Array<string>;\n    id: number;\n\n    constructor() {\n        this.boards = [];\n        this.id = 0;\n\n        const board = new BoardModel();\n        this.boards.push(board.serialize());\n    }\n}\n","import { combineReducers } from 'redux';\n\nimport { controlReducer } from './control';\nimport { boardReducer } from './board';\nimport { historyReducer } from './history';\n\nconst isMouseDownReducer = (isMouseDown = false) => {\n    return isMouseDown;\n}\n\nconst highlightMatchingReducer = (highlightMatching = null) => {\n    return highlightMatching;\n}\n\nexport default combineReducers({\n    board: boardReducer,\n    control: controlReducer,\n    history: historyReducer,\n    isMouseDown: isMouseDownReducer,\n    highlightMatching: highlightMatchingReducer,\n});\n","import { BoardActionTypes, ACTION_UPDATE_BOARD, ACTION_UNDO, ACTION_REDO } from '../actions/board';\nimport { BoardModel } from '../models/board';\n\nexport const boardReducer = (board = new BoardModel(), action: BoardActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        return action.payload.board;\n    }\n    if (action.type === ACTION_UNDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n    if (action.type === ACTION_REDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n\n    return board;\n}\n","import { ControlActionTypes, ACTION_UPDATE_DISPLAY, ACTION_UPDATE_GAME_PLAY } from '../actions/control';\nimport { ControlModel } from '../models/control';\n\nexport const controlReducer = (control: ControlModel = new ControlModel(), action: ControlActionTypes) => {\n    if (action.type === ACTION_UPDATE_DISPLAY) {\n        return {...control, displayOptions: action.payload};\n    }\n    if (action.type === ACTION_UPDATE_GAME_PLAY) {\n        return {...control, gamePlay: action.payload};\n    }\n    return control;\n};\n","import assert from 'assert';\nimport { BoardActionTypes, ACTION_UPDATE_BOARD, ACTION_UNDO, ACTION_REDO } from '../actions/board';\nimport { HistoryModel } from '../models/history';\n\nexport const historyReducer = (history = new HistoryModel(), action: BoardActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        const serialized = action.payload.board.serialize();\n\n        // Only update history if the serialized new board is different.\n        // Thus, we ignore all selections and restrictions.\n        if (serialized !== history.boards[history.id]) {\n            // Remove the rest of history.\n            // This clean data in case we do lots of undo, and then make a new move.\n            history.boards = history.boards.slice(0, history.id + 1);\n\n            // Update history.\n            history.boards.push(serialized);\n            history.id += 1;\n        }\n        return history;\n    }\n    if (action.type === ACTION_UNDO) {\n        assert(history.id > 0);\n        return {...history, id: history.id - 1 };\n    }\n    if (action.type === ACTION_REDO) {\n        assert(history.id + 1 < history.boards.length);\n        return {...history, id: history.id + 1 };\n    }\n    return history;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport Game from './components/Game';\nimport reducers from './reducers';\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={createStore(reducers)}>\n        <Game />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}