{"version":3,"sources":["utils/set.ts","models/cell.ts","models/sandwichCell.ts","models/board.ts","actions/types.ts","actions/history.ts","actions/board.ts","utils/solver.ts","components/board/Cell.tsx","components/board/SandwichCell.tsx","components/board/Board.tsx","components/control/DisplayOptions.tsx","actions/control.ts","components/control/GameOptions.tsx","components/control/Control.tsx","components/Game.tsx","models/control.ts","models/history.ts","reducers/index.ts","reducers/board.ts","reducers/control.ts","reducers/history.ts","reducers/gameUrl.ts","index.tsx"],"names":["set_intersection","a","b","Set","filter","x","has","CellModel","id","value","cornerValues","centerValues","selected","restricted","error","row","col","isFixed","this","SandwichCellModel","BoardModel","cells","highlightMatching","multiSelectMode","rowSandwich","colSandwich","i","push","result","forEach","cell","Array","from","JSON","stringify","serialized","clearAllErrors","clearAllRestricteds","clearAllSelections","obj","parse","cellId","toRowCol","getRegionByPosition","gameOptions","col2","add","toCellId","row2","region","getRegion","antiKnight","di","dj","isInside","antiKing","delete","myValue","getVisibleCells","neighborId","seenValues","map","getPossibleValues","undefined","find","values","indexOf","left","Math","min","right","max","sum","slice","rowId","getSandwichSum","colId","cellIds","newValue","autoCleanup","setValueOfSingleCell","clear","NO_OP","type","redo","history","boards","length","payload","undo","updateBoard","board","select","control","clearSelection","setMultiSelect","newBoard","_","cloneDeep","setSelected","displayOptions","highlightRestricted","setRestricted","highlightMatchingNumbers","selectedValues","getSelectedValues","size","selectedValue","next","selectSandwich","isRow","sandwich","Error","move","d_row","d_col","r","c","bitCount","n","bitContains","bit","solveBoard","fillAllPossibleValues","candidates","mask","attempt","bestId","solution","String","fromCharCode","firstSolution","cntSolutions","saveValues","clone","saveCandidates","neighborIds","cnt","Cell","props","className","sortedValues","sort","classes","shouldHighlightMatching","key","isRegionTop","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","join","onClick","onMouseDown","onMouseOver","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","SandwichCell","defaultValue","Board","e","onSelectSandwich","startingCell","keys","renderCell","sandwichCell","renderSandwichCell","sandwichCells","renderEmptySandwichCell","sandwichRow","renderSandwichRow","rows","renderRow","DisplayOptions","Form","Check","label","checked","onChange","updateDisplay","autoCleanUp","connector","connect","state","GameOptions","message","OverlayTrigger","placement","overlay","Tooltip","renderLabel","updateGameOptions","Control","url","href","Button","onClickVerify","onClickUndo","onClickRedo","renderTooltip","onClickFillCenters","solve","generateUrl","renderUrl","gameUrl","Game","encoded","initGameState","window","atob","onKeyDown","keyDown","tabIndex","onMouseUp","mouseUp","metaKey","mouseDown","mouseOver","verify","fillCenter","ownProps","match","params","decodedState","rowSandwichSums","colSandwichSums","gameState","location","origin","pathname","btoa","isShift","shiftKey","isMeta","keyCode","KeyCode","hasSelected","toggleCornerValuesOfSelectedCells","toggleCornerValues","preventDefault","toggleCenterValuesOfSelectedCells","toggleCenterValues","setValueOfSelectedCells","setValue","hasSandwichSelected","setSandwichValue","unsetSelectedCells","unsetValue","clearCornerValuesOfSelectedCells","clearCenterValuesOfSelectedCells","pressBackspace","pressEsc","Object","assign","invalidCellIds","getInvalidCellIds","setErrors","hasError","isValid","want","getRowSandwichSum","getColSandwichSum","alert","ControlModel","HistoryModel","serialize","combineReducers","action","load","assert","isMouseDown","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.7f9819d5.chunk.js","sourcesContent":["export const set_intersection = (a: Set<any>, b: Set<any>): Set<any> => {\n    return new Set([...a].filter(x => b.has(x)));\n}\n\nexport const set_difference = (a: Set<any>, b: Set<any>): Set<any> => {\n    return new Set([...a].filter(x => !b.has(x)));\n}\n","export type CellValue = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | null;\n\nexport class CellModel {\n    value: CellValue;\n    cornerValues: Set<CellValue>;\n    centerValues: Set<CellValue>;\n    selected: boolean;\n    restricted: boolean;\n    error: boolean;\n    row: number;\n    col: number;\n    id: number;\n    isFixed: boolean | null;\n\n    constructor(id: number) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n        this.isFixed = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop(): boolean {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom(): boolean {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft(): boolean {\n        return this.col % 3 === 0;\n    }\n    isRegionRight(): boolean {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop(): boolean {\n        return this.row === 0;\n    }\n    isBoardBottom(): boolean {\n        return this.row === 8;\n    }\n    isBoardLeft(): boolean {\n        return this.col === 0;\n    }\n    isBoardRight(): boolean {\n        return this.col === 8;\n    }\n}\n","export class SandwichCellModel {\n    value: number | null;\n    selected: boolean;\n    error: boolean;\n    isFixed: boolean;\n\n    constructor() {\n        this.value = null;\n        this.selected = false;\n        this.error = false;\n        this.isFixed = false;\n    }\n\n    isValid(): boolean {\n        return this.value === null\n            || this.value === 0\n            || (2 <= this.value && this.value <= 35);\n    }\n};","import { set_difference, set_intersection } from '../utils/set';\nimport { CellModel, CellValue } from './cell';\nimport { GameOptions } from './control';\nimport { SandwichCellModel } from './sandwichCell';\n\nclass BoardModel {\n    cells: Array<CellModel>;\n    highlightMatching: CellValue;\n    multiSelectMode: boolean;\n\n    // For sandwich sudoku\n    // For each row and column, we may be given the sum of cells between the cells containing 1 and 9.\n    rowSandwich: Array<SandwichCellModel>;\n    colSandwich: Array<SandwichCellModel>;\n\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n        this.highlightMatching = null;\n        this.multiSelectMode = false;\n\n        this.rowSandwich = [];\n        this.colSandwich = [];\n        for (let i = 0; i < 9; i++) {\n            this.rowSandwich.push(new SandwichCellModel());\n            this.colSandwich.push(new SandwichCellModel());\n        }\n    }\n\n    serialize(): string {\n        let result: Array<{\n            value: CellValue;\n            cornerValues: Array<CellValue>;\n            centerValues: Array<CellValue>;\n        }> = [];\n\n        this.cells.forEach((cell) => {\n            result.push({\n                value: cell.value,\n                cornerValues: Array.from(cell.cornerValues),\n                centerValues: Array.from(cell.centerValues),\n            });\n        });\n        return JSON.stringify(result);\n    }\n\n    load(serialized: string): void {\n        this.clearAllErrors();\n        this.clearAllRestricteds();\n        this.clearAllSelections();\n\n        let obj = JSON.parse(serialized);\n        for (let i = 0; i < 81; i++) {\n            this.cells[i].value = obj[i].value;\n            this.cells[i].cornerValues = new Set(obj[i].cornerValues);\n            this.cells[i].centerValues = new Set(obj[i].centerValues);\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row: number, col: number): boolean {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row: number, col: number): number {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId: number): [number, number] {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row: number, col: number): number {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId: number): number {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId: number, gameOptions: GameOptions): Set<number> {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result: Set<number> = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gameOptions.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gameOptions.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gameOptions: GameOptions): Set<number> {\n        let result: Set<number> = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gameOptions).forEach(neighborId => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    getPossibleValues(cellId: number, gameOptions: GameOptions): Set<CellValue> {\n        const seenValues = Array.from(this.getVisibleCells(cellId, gameOptions))\n            .map(neighborId => this.cells[neighborId].value)\n            .filter(x => x);\n\n        return set_difference(new Set(['1', '2', '3', '4', '5', '6', '7', '8', '9']), new Set(seenValues));\n    }\n\n    fillAllPossibleValues(gameOptions: GameOptions): void {\n        this.cells.forEach(cell => {\n            if (!cell.value) {\n                cell.centerValues = this.getPossibleValues(cell.id, gameOptions);\n            }\n        });\n    }\n\n    hasSelected(): boolean {\n        return this.cells.find(cell => cell.selected) !== undefined;\n    }\n\n    hasSandwichSelected(): boolean {\n        return this.rowSandwich.find(cell => cell.selected) !== undefined\n            || this.colSandwich.find(cell => cell.selected) !== undefined;\n    }\n\n    getSandwichSum(values: Array<CellValue>): number | null {\n        if (values.indexOf('1') < 0 || values.indexOf('9') < 0) {\n            return null;\n        }\n        const left = Math.min(values.indexOf('1'), values.indexOf('9'));\n        const right = Math.max(values.indexOf('1'), values.indexOf('9'));\n\n        let sum = 0;\n        for (let value of values.slice(left + 1, right)) {\n            if (value === null) {\n                return null;\n            }\n            sum += +value;\n        }\n        return sum;\n    }\n\n    getRowSandwichSum(rowId: number): number | null {\n        const row = this.cells.slice(rowId * 9, rowId * 9 + 9).map(cell => cell.value);\n        return this.getSandwichSum(row);\n    }\n\n    getColSandwichSum(colId: number): number | null {\n        const col = this.cells.filter(cell => cell.id % 9 === colId).map(cell => cell.value);\n        return this.getSandwichSum(col);\n    }\n\n    setSelected(cellId: number): void {\n        this.cells[cellId].selected = true;\n    }\n\n    getSelectedValues(): Set<CellValue> {\n        return new Set(\n            this.cells\n                .filter((cell) => cell.selected)\n                .filter((cell) => cell.value)\n                .map((cell) => cell.value)\n        );\n    }\n\n    setRestricted(gameOptions: GameOptions): void {\n        let restricted: Set<any> | null = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gameOptions);\n                } else {\n                    restricted = set_intersection(this.getVisibleCells(id, gameOptions), restricted);\n                }\n            }\n        }\n\n        if (restricted) {\n            restricted.forEach((cellId) => {\n                this.cells[cellId].restricted = true;\n            });\n        }\n    }\n\n    setErrors(cellIds: Set<number>): void {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSingleCell(cellId: number, newValue: CellValue, gameOptions: GameOptions, autoCleanup: boolean): void {\n        if (this.cells[cellId].isFixed) {\n            return;\n        }\n        this.cells[cellId].value = newValue;\n        if (autoCleanup) {\n            this.getVisibleCells(this.cells[cellId].id, gameOptions).forEach((id) => {\n                this.cells[id].cornerValues.delete(newValue);\n                this.cells[id].centerValues.delete(newValue);\n            });\n        }\n    }\n\n    setValueOfSelectedCells(newValue: CellValue, gameOptions: GameOptions, autoCleanup: boolean = false): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                this.setValueOfSingleCell(cell.id, newValue, gameOptions, autoCleanup);\n            }\n        });\n    }\n\n    unsetSelectedCells(): void {\n        this.cells\n            .filter(cell => cell.selected && !cell.isFixed)\n            .forEach(cell => { cell.value = null });\n        \n        [...this.rowSandwich, ...this.colSandwich]\n            .filter(cell => cell.selected)\n            .forEach(cell => { cell.value = null });\n    }\n\n    toggleCornerValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections(): void {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n        this.rowSandwich.forEach((cell) => {\n            cell.selected = false;\n        });\n        this.colSandwich.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds(): void {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors(): void {\n        this.cells.forEach(cell => { cell.error = false });\n        this.rowSandwich.forEach(cell => { cell.error = false });\n        this.colSandwich.forEach(cell => { cell.error = false });\n    }\n}\n\nexport { BoardModel };\n","import { BoardModel } from '../models/board';\nimport { DisplayOptions, GameOptions } from '../models/control';\n\nexport const ACTION_NO_OP = 'ACTION_NO_OP';\nexport interface NoOpAction {\n    type: typeof ACTION_NO_OP,\n};\nexport const NO_OP: NoOpAction = { type: ACTION_NO_OP };\n\n// Board actions.\nexport const ACTION_UPDATE_BOARD = 'ACTION_UPDATE_BOARD';\nexport const ACTION_GENERATE_URL = 'ACTION_GENERATE_URL';\nexport const ACTION_INIT_GAME_STATE = 'ACTION_INIT_GAME_STATE';\n\nexport interface UpdateBoardAction {\n    type: typeof ACTION_UPDATE_BOARD,\n    payload: {\n        board: BoardModel,\n    },\n};\nexport interface GenerateUrlAction {\n    type: typeof ACTION_GENERATE_URL,\n    payload: {\n        url: string,\n    },\n};\nexport interface InitGameStateAction {\n    type: typeof ACTION_INIT_GAME_STATE,\n    payload: {\n        board: BoardModel,\n        gameOptions: GameOptions,\n    }\n};\n\n// Control actions.\nexport const ACTION_UPDATE_DISPLAY = 'ACTION_UPDATE_DISPLAY';\nexport const ACTION_UPDATE_GAME_PLAY = 'ACTION_UPDATE_GAME_PLAY';\n\ninterface UpdateDisplayAction {\n    type: typeof ACTION_UPDATE_DISPLAY,\n    payload: DisplayOptions,\n};\n\ninterface UpdateGameOptionsAction {\n    type: typeof ACTION_UPDATE_GAME_PLAY,\n    payload: GameOptions,\n}\n\n// History actions.\nexport const ACTION_REDO = 'ACTION_REDO';\nexport const ACTION_UNDO = 'ACTION_UNDO';\n\nexport interface RedoAction {\n    type: typeof ACTION_REDO,\n    payload: {\n        serialized: string,\n    },\n};\nexport interface UndoAction {\n    type: typeof ACTION_UNDO,\n    payload: {\n        serialized: string,\n    },\n};\n\n// Combine all action types.\nexport type ActionTypes = NoOpAction\n    | UpdateBoardAction | GenerateUrlAction | InitGameStateAction\n    | UpdateDisplayAction | UpdateGameOptionsAction\n    | RedoAction | UndoAction;\n","import { ACTION_REDO, ACTION_UNDO, NO_OP, ActionTypes } from './types';\nimport { HistoryModel } from '../models/history';\n\n\nexport const redo = (history: HistoryModel): ActionTypes => {\n    if (history.id >= history.boards.length - 1) {\n        // Nothing to redo.\n        return NO_OP;\n    }\n    return {\n        type: ACTION_REDO,\n        payload: {\n            serialized: history.boards[history.id + 1],\n        },\n    };\n};\n\nexport const undo = (history: HistoryModel): ActionTypes => {\n    if (history.id === 0) {\n        // Nothing to do.\n        return NO_OP;\n    }\n    return {\n        type: ACTION_UNDO,\n        payload: {\n            serialized: history.boards[history.id - 1],\n        },\n    };\n};\n","import * as KeyCode from 'keycode-js';\nimport _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\nimport { ControlModel } from '../models/control';\nimport { HistoryModel } from '../models/history';\nimport { redo, undo } from './history';\nimport {\n    ACTION_GENERATE_URL,\n    ACTION_INIT_GAME_STATE,\n    ACTION_UPDATE_BOARD,\n    ActionTypes,\n    NO_OP\n    } from './types';\n\n\nexport const initGameState = (decodedState: any): ActionTypes => {\n    const board = new BoardModel();\n    for (let i = 0; i < 81; i++) {\n        const value = decodedState.values[i];\n        if (value !== '0') {\n            board.cells[i].value = decodedState.values[i] as CellValue;\n            board.cells[i].isFixed = true;\n        }\n    }\n    if (decodedState.rowSandwichSums !== null) {\n        for (let i = 0; i < 9; i++) {\n            board.rowSandwich[i].value = decodedState.rowSandwichSums[i];\n            board.rowSandwich[i].isFixed = true;\n        }\n    }\n    if (decodedState.colSandwichSums !== null) {\n        for (let i = 0; i < 9; i++) {\n            board.colSandwich[i].value = decodedState.colSandwichSums[i];\n            board.colSandwich[i].isFixed = true;\n        }\n    }\n    return {\n        type: ACTION_INIT_GAME_STATE,\n        payload: {\n            board: board,\n            gameOptions: decodedState.gameOptions,\n        },\n    }\n};\n\nexport const generateUrl = (board: BoardModel, control: ControlModel): ActionTypes => {\n    const gameState = {\n        values: board.cells.map(cell => {\n            if (cell.value) return cell.value;\n            else return '0';\n        }).join(''),\n        rowSandwichSums: (control.gameOptions.sandwich) ? board.rowSandwich.map(cell => cell.value) : null,\n        colSandwichSums: (control.gameOptions.sandwich) ? board.colSandwich.map(cell => cell.value) : null,\n        gameOptions: control.gameOptions,\n    };\n    return {\n        type: ACTION_GENERATE_URL,\n        payload: {\n            url: window.location.origin + window.location.pathname + '#/' + window.btoa(JSON.stringify(gameState)),\n        },\n    };\n};\n\nexport const updateBoard = (board: BoardModel): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_BOARD,\n        payload: {\n            board: board,\n        }\n    };\n};\n\nconst pressEsc = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllSelections();\n    newBoard.clearAllRestricteds();\n    newBoard.highlightMatching = null;\n    return updateBoard(newBoard);\n}\n\nexport const select = (\n        board: BoardModel,\n        control: ControlModel,\n        cellId: number,\n        clearSelection: boolean = true,\n        setMultiSelect: boolean | null = null\n        ): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    if (setMultiSelect !== null) {\n        newBoard.multiSelectMode = setMultiSelect;\n    }\n\n    if (clearSelection) {\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n        newBoard.highlightMatching = null;\n    } else {\n        newBoard.clearAllRestricteds();\n    }\n\n    newBoard.setSelected(cellId);\n\n    if (control.displayOptions.highlightRestricted) {\n        newBoard.setRestricted(control.gameOptions);\n    }\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n\n    return updateBoard(newBoard);\n}\n\nexport const selectSandwich = (\n        board: BoardModel,\n        control: ControlModel,\n        isRow: boolean,\n        id: number): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    if (!control.gameOptions.sandwich) {\n        throw new Error('Attempt to select sandwich in normal mode');\n    }\n\n    newBoard.clearAllSelections();\n    newBoard.clearAllRestricteds();\n    newBoard.highlightMatching = null;\n\n    if (isRow) {\n        newBoard.rowSandwich[id].selected = true;\n    } else {\n        newBoard.colSandwich[id].selected = true;\n    }\n\n    return updateBoard(newBoard);\n}\n\nexport const mouseDown = (board: BoardModel, control: ControlModel, cellId: number, clearSelection: boolean): ActionTypes => {\n    return select(board, control, cellId, clearSelection, true);\n}\n\nexport const mouseOver = (board: BoardModel, control: ControlModel, cellId: number): ActionTypes => {\n    if (!board.multiSelectMode) {\n        return NO_OP;\n    }\n    return select(board, control, cellId, false);\n}\n\nexport const mouseUp = (board: BoardModel): ActionTypes => {\n    return updateBoard(Object.assign(board, { multiSelectMode: false}));\n}\n\nconst setValue = (board: BoardModel, control: ControlModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.setValueOfSelectedCells(\n        newValue,\n        control.gameOptions,\n        control.displayOptions.autoCleanUp);\n\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n    return updateBoard(newBoard);\n};\n\nconst setSandwichValue = (board: BoardModel, newValue: number): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    [...newBoard.rowSandwich, ...newBoard.colSandwich]\n        .filter(cell => cell.selected)\n        .forEach(cell => {\n            if (cell.value === null) cell.value = newValue;\n            else if (cell.value < 10) cell.value = cell.value * 10 + newValue;\n        });\n    return updateBoard(newBoard);\n};\n\nconst unsetValue = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.unsetSelectedCells();\n\n    return updateBoard(newBoard);\n};\n\nconst toggleCornerValues = (board: BoardModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n    return updateBoard(newBoard);\n}\n\nconst toggleCenterValues = (board: BoardModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.toggleCenterValuesOfSelectedCells(newValue);\n    return updateBoard(newBoard);\n}\n\n// Move selected cell in direction (d_row, d_col).\n// If there are more than one selected cells, only move the first one.\nconst move = (board: BoardModel, control: ControlModel, d_row: number, d_col: number): ActionTypes => {\n    let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n    for (let i = 0; i < 81; i++) {\n        if (board.cells[i].selected) {\n            [r, c] = board.toRowCol(i);\n            break;\n        }\n    }\n    for (let i = 0; i < 9; i++) {\n        if (board.colSandwich[i].selected) {\n            r = -1;\n            c = i;\n            break;\n        }\n        if (board.rowSandwich[i].selected) {\n            r = i;\n            c = -1;\n        }\n    }\n\n    if (control.gameOptions.sandwich) {\n        r = (r + d_row + 10) % 10;\n        c = (c + d_col + 10) % 10;\n\n        if (r === 9 && c === 9) {\n            // This is the empty cell outside board.\n            return selectSandwich(board, control, false, 0);\n        } else if (r === 9) {\n            // Column sandwich\n            return selectSandwich(board, control, false, c);\n        } else if (c === 9) {\n            // Row sandwich\n            return selectSandwich(board, control, true, r);\n        } else {\n            return select(board, control, board.toCellId(r, c));\n        }\n    } else {\n        r = (r + d_row + 9) % 9;\n        c = (c + d_col + 9) % 9;\n        return select(board, control, board.toCellId(r, c));\n    }\n}\n\nconst pressBackspace = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.unsetSelectedCells();\n\n    newBoard.clearCornerValuesOfSelectedCells();\n    newBoard.clearCenterValuesOfSelectedCells();\n\n    return updateBoard(newBoard);\n}\n\nexport const keyDown = (board: BoardModel, control: ControlModel, history: HistoryModel, e: any): ActionTypes => {\n    let isShift = !!e.shiftKey;\n    let isMeta = !!e.metaKey;\n\n    // Pressed 0-9\n    if (e.keyCode >= KeyCode.KEY_0 && e.keyCode <= KeyCode.KEY_9) {\n        if (e.keyCode !== KeyCode.KEY_0 && board.hasSelected()) {\n            const value = String.fromCharCode(e.keyCode) as CellValue;\n            if (isShift) {\n                return toggleCornerValues(board, value)\n            } else if (isMeta) {\n                e.preventDefault();\n                return toggleCenterValues(board, value);\n            } else {\n                return setValue(board, control, value);\n            }\n        }\n        if (board.hasSandwichSelected()) {\n            return setSandwichValue(board, +String.fromCharCode(e.keyCode));\n        }\n        return NO_OP;\n    }\n\n    switch (e.keyCode) {\n        case KeyCode.KEY_SPACE:\n            return unsetValue(board);\n        case KeyCode.KEY_BACK_SPACE:\n            e.preventDefault();\n            return pressBackspace(board);\n        case KeyCode.KEY_DOWN:\n            return move(board, control, +1, 0);\n        case KeyCode.KEY_UP:\n            return move(board, control, -1, 0);\n        case KeyCode.KEY_LEFT:\n            return move(board, control, 0, -1);\n        case KeyCode.KEY_RIGHT:\n            return move(board, control, 0, +1);\n        case KeyCode.KEY_ESCAPE:\n            return pressEsc(board);\n        case KeyCode.KEY_Z:\n        case KeyCode.KEY_U:\n            return undo(history);\n        case KeyCode.KEY_Y:\n        case KeyCode.KEY_R:\n            return redo(history);\n        default:\n    }\n    return NO_OP;\n}\n","import _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\nimport { ControlModel } from '../models/control';\n\nconst bitCount = (n: number): number => {\n    n = n - ((n >> 1) & 0x55555555)\n    n = (n & 0x33333333) + ((n >> 2) & 0x33333333)\n    return ((n + (n >> 4) & 0xF0F0F0F) * 0x1010101) >> 24\n}\n\nconst bitContains = (n: number, bit: number): boolean => {\n    return ((n >> bit) & 1) > 0;\n}\n\nconst bitRemoveIfExists = (n: number, bit: number): number => {\n    if (!bitContains(n, bit)) {\n        return n;\n    }\n    return n - (1<<bit);\n}\n\nconst attempt = (board: BoardModel, control: ControlModel, values: Array<number>, candidates: Array<number>): [BoardModel | null, number] => {\n    // Find cell with minimum number of candidates.\n    let bestId = -1;\n    for (let i = 0; i < 81; i++) {\n        if (values[i] === 0) {\n            if (bestId < 0 || bitCount(values[i]) < bitCount(values[bestId])) {\n                bestId = i;\n            }\n        }\n    }\n    if (bestId < 0) {\n        // No more unfilled cell --> we have found a solution.\n        let solution = _.cloneDeep(board);\n        for (let i = 0; i < 81; i++) {\n            solution.setValueOfSingleCell(i, String.fromCharCode(48 + values[i]) as CellValue, control.gameOptions, false);\n        }\n        return [solution, 1];\n    }\n\n    if (bitCount(candidates[bestId]) === 0) {\n        return [null, 0];\n    }\n\n    let firstSolution = null;\n    let cntSolutions = 0;\n    for (let value = 1; value <= 9; value++) {\n        if (bitContains(candidates[bestId], value)) {\n            const saveValues = _.clone(values);\n            const saveCandidates = _.clone(candidates);\n\n            values[bestId] = value;\n            const neighborIds = board.getVisibleCells(bestId, control.gameOptions);\n            for (let neighborId of neighborIds) {\n                candidates[neighborId] = bitRemoveIfExists(candidates[neighborId], value);\n            };\n\n            let [solution, cnt] = attempt(board, control, values, candidates);\n            if (cnt > 0) {\n                if (firstSolution === null) {\n                    firstSolution = solution;\n                }\n                cntSolutions += cnt;\n                if (cntSolutions >= 2) {\n                    break;\n                }\n            }\n\n            values = saveValues;\n            candidates = saveCandidates;\n        }\n    }\n    return [firstSolution, cntSolutions];\n};\n\nexport const solveBoard = (board: BoardModel, control: ControlModel): [BoardModel | null, number] => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.fillAllPossibleValues(control.gameOptions);\n\n    let values = newBoard.cells.map(cell => {\n        if (!cell.value) return 0;\n        else return +cell.value;\n    });\n    let candidates = newBoard.cells.map(cell => {\n        let mask = 0;\n        for (let value of cell.centerValues) {\n            if (value !== null) {\n                mask += 1 << (+value);\n            }\n        }\n        return mask;\n    });\n    return attempt(newBoard, control, values, candidates);\n};\n","import React from 'react';\nimport { CellModel, CellValue } from '../../models/cell';\n\n\ntype CellProps = {\n    cell: CellModel,\n    onClick: (e: any) => void,\n    onMouseDown: (e: any) => void,\n    onMouseOver: (e: any) => void,\n    key: string,\n    highlightMatching: CellValue,\n};\n\nclass Cell extends React.Component<CellProps> {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    shouldHighlightMatching(value: CellValue) {\n        return this.props.highlightMatching && value === this.props.highlightMatching;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"corner-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"center-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        } else if (this.shouldHighlightMatching(this.props.cell.value)) {\n            classes.push('matching');\n        } else if (this.props.cell.restricted) {\n            classes.push('restricted');\n        } else if (this.props.cell.isFixed) {\n            classes.push('fixed');\n        } else if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                onMouseDown={this.props.onMouseDown}\n                onMouseOver={this.props.onMouseOver}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nexport default Cell;\n","import React from 'react';\nimport { SandwichCellModel } from '../../models/sandwichCell';\n\n\ntype SandwichCellProps = {\n    value: SandwichCellModel,\n    onClick: (e: any) => void,\n};\n\nclass SandwichCell extends React.Component<SandwichCellProps> {\n    render() {\n        let defaultValue = (this.props.value.value === null) ? undefined : this.props.value.value;\n\n        let classes = ['sandwich-cell'];\n        if (this.props.value.selected) {\n            classes.push('selected');\n        } else if (this.props.value.isFixed) {\n            classes.push('fixed');\n        }\n        if (this.props.value.error) {\n            classes.push('error');\n        }\n        return (\n            <div\n                onClick={this.props.onClick}\n                className={classes.join(' ')}>\n                <div className=\"cell-main-value\">\n                    {defaultValue}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SandwichCell;","import React from 'react';\nimport { BoardModel } from '../../models/board';\nimport { GameOptions } from '../../models/control';\nimport Cell from './Cell';\nimport SandwichCell from './SandwichCell';\n\n\nclass Board extends React.Component<BoardProps> {\n    renderCell(i: number) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                onMouseDown={(e) => this.props.onMouseDown(e, i)}\n                onMouseOver={() => this.props.onMouseOver(i)}\n                key={String(i)}\n                highlightMatching={this.props.board.highlightMatching}\n            />\n        );\n    }\n\n    renderSandwichCell(isRow: boolean, id: number, key: string) {\n        const value = (isRow) ? this.props.board.rowSandwich[id] : this.props.board.colSandwich[id];\n        return (\n            <SandwichCell\n                value={value}\n                key={key}\n                onClick={(e) => this.props.onSelectSandwich(e, isRow, id)}\n            />\n        );\n    }\n    \n    renderEmptySandwichCell() {\n        return (\n            <div className=\"sandwich-cell\"></div>\n        );\n    }\n\n    renderRow(rowId: number) {\n        const startingCell = rowId * 9;\n        const cells = [...Array(9).keys()].map(x => this.renderCell(startingCell + x));\n\n        let sandwichCell = null;\n        if (this.props.gameOptions.sandwich) {\n            sandwichCell = this.renderSandwichCell(\n                true, rowId, `sandwich-row-${rowId}`);\n        }\n\n        return (\n            <div className=\"row\" key={startingCell}>\n                {sandwichCell}\n                {cells}\n            </div>\n        );\n    }\n\n    renderSandwichRow() {\n        const sandwichCells = [...Array(9).keys()].map(\n            x => this.renderSandwichCell(false, x, `sandwich-col-${x}`));\n\n        return (\n            <div className=\"row\">\n                {this.renderEmptySandwichCell()}\n                {sandwichCells}\n            </div>\n        );\n    }\n\n    render() {\n        let sandwichRow = null;\n        if (this.props.gameOptions.sandwich) {\n            sandwichRow = this.renderSandwichRow();\n        }\n\n        const rows = [...Array(9).keys()].map(x => this.renderRow(x));\n        return (\n            <div>\n                {sandwichRow}\n                {rows}\n            </div>\n        );\n    }\n}\n\ntype BoardProps = {\n    board: BoardModel,\n    gameOptions: GameOptions,\n    onClick: (e: any, i: number) => void,\n    onSelectSandwich: (e: any, isRow: boolean, i: number) => void,\n    onMouseDown: (e: any, i: number) => void,\n    onMouseOver: (i: number) => void,\n};\n\n\nexport default Board;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { updateDisplay } from '../../actions/control';\nimport { GameState } from '../Game';\n\nclass DisplayOptions extends React.Component<DisplayOptionsProps> {\n    render() {\n        return (\n            <div id=\"display-options\">\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.highlightRestricted}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightRestricted: !this.props.highlightRestricted\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-matching-numbers'\n                    label='Highlight matching numbers'\n                    checked={this.props.highlightMatchingNumbers}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightMatchingNumbers: !this.props.highlightMatchingNumbers\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-auto-cleanup'\n                    label='Auto Cleanup corner &amp; center values'\n                    checked={this.props.autoCleanUp}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        autoCleanUp: !this.props.autoCleanUp\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.displayOptions};\n};\n\nconst connector = connect(mapStateToProps, { updateDisplay });\n\ntype DisplayOptionsProps = ConnectedProps<typeof connector>;\n\nexport default connector(DisplayOptions);\n","import _ from 'lodash';\nimport { BoardModel } from '../models/board';\nimport { ControlModel, DisplayOptions, GameOptions } from '../models/control';\nimport { solveBoard } from '../utils/solver';\nimport { updateBoard } from './board';\nimport {\n    ACTION_UPDATE_DISPLAY,\n    ACTION_UPDATE_GAME_PLAY as ACTION_UPDATE_GAME_OPTIONS,\n    ActionTypes,\n    NO_OP\n    } from './types';\n\n\n\nexport const fillCenter = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.fillAllPossibleValues(control.gameOptions);\n    return updateBoard(newBoard);\n}\n\nexport const updateDisplay = (displayOptions: DisplayOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_DISPLAY,\n        payload: displayOptions,\n    };\n};\n\nexport const updateGameOptions = (gameOptions: GameOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_GAME_OPTIONS,\n        payload: gameOptions,\n    }\n};\n\nexport const verify = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllSelections();\n    newBoard.clearAllRestricteds();\n    newBoard.clearAllErrors();\n    let invalidCellIds = newBoard.getInvalidCellIds(control.gameOptions);\n    newBoard.setErrors(invalidCellIds);\n\n    let hasError = invalidCellIds.size > 0;\n\n    for (let i = 0; i < 9; i++) {\n        if (!newBoard.rowSandwich[i].isValid()) {\n            hasError = true;\n            newBoard.rowSandwich[i].error = true;\n        } else {\n            const want = newBoard.rowSandwich[i].value;\n            const has = newBoard.getRowSandwichSum(i);\n            if (want !== null && has !== null && want !== has) {\n                hasError = true;\n                newBoard.rowSandwich[i].error = true;\n            }\n        }\n\n        if (!newBoard.colSandwich[i].isValid()) {\n            hasError = true;\n            newBoard.colSandwich[i].error = true;\n        } else {\n            const want = newBoard.colSandwich[i].value;\n            const has = newBoard.getColSandwichSum(i);\n            if (want !== null && has !== null && want !== has) {\n                hasError = true;\n                newBoard.colSandwich[i].error = true;\n            }\n        }\n    }\n\n    alert(hasError ? 'Error found :(' : 'Looks good to me!');\n    return updateBoard(newBoard);\n}\n\nexport const solve = (board: BoardModel, control: ControlModel): ActionTypes => {\n    if (control.gameOptions.sandwich) {\n        alert('Cannot solve Sandwich Sudoku.');\n    }\n    let [newBoard, cntSolutions] = solveBoard(board, control);\n    if (cntSolutions >= 2) {\n        alert('Found at least ' + cntSolutions + ' solutions.');\n    } else {\n        alert('Found ' + cntSolutions + ' solution.');\n    }\n    if (newBoard !== null) {\n        return updateBoard(newBoard);\n    }\n    return NO_OP;\n}\n","import React from 'react';\nimport { QuestionSquare } from 'react-bootstrap-icons';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { updateGameOptions } from '../../actions/control';\nimport { GameState } from '../Game';\n\n\nclass GameOptions extends React.Component<GameOptionsProps> {\n    renderLabel(label: any, id: string, message: string) {\n        return (\n            <OverlayTrigger\n                placement=\"right\"\n                overlay={<Tooltip id={id}>{message}</Tooltip>}\n            >\n                <span>\n                    {label}&nbsp;\n                    <QuestionSquare />\n                </span>\n            </OverlayTrigger>\n        );\n    }\n\n    render() {\n        return (\n            <div id=\"game-play\">\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label={this.renderLabel('Anti Knight', 'tooltip-anti-knight', \"Two cells which are knight's move away from each other cannot contain the same digit.\")}\n                    checked={this.props.antiKnight}\n                    onChange={() => this.props.updateGameOptions({\n                        ...this.props,\n                        antiKnight: !this.props.antiKnight\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label={this.renderLabel('Anti King', 'tooltip-anti-king', \"Two cells which are king's move away from each other cannot contain the same digit.\")}\n                    checked={this.props.antiKing}\n                    onChange={() => this.props.updateGameOptions({\n                        ...this.props,\n                        antiKing: !this.props.antiKing\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-sandwich'\n                    label={this.renderLabel('Sandwich', 'tooltip-sandwich', 'The numbers in each row / column specify the sum between the number 1 and 9 in that row / column.')}\n                    checked={this.props.sandwich}\n                    onChange={() => this.props.updateGameOptions({\n                        ...this.props,\n                        sandwich: !this.props.sandwich\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.gameOptions};\n};\n\nconst connector = connect(mapStateToProps, { updateGameOptions });\n\ntype GameOptionsProps = ConnectedProps<typeof connector>;\n\nexport default connector(GameOptions);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { GameState } from '../Game';\nimport DisplayOptions from './DisplayOptions';\nimport GameOptions from './GameOptions';\n\n\nclass Control extends React.Component<ControlProps> {\n    renderUrl() {\n        if (!this.props.url) {\n            return;\n        }\n        return <a href={this.props.url}>Link</a>;\n    }\n\n    renderTooltip(id: string, message: string) {\n        return (\n            <Tooltip id={id}>\n                {message}\n            </Tooltip>\n        );\n    }\n\n    render() {\n        return (\n            <Form>\n                <div className=\"\">\n                    <Button onClick={this.props.onClickVerify}>\n                        Verify\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickUndo}\n                        className=\"btn-secondary\"\n                    >\n                        Undo\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickRedo}\n                        className=\"btn-secondary\"\n                    >\n                        Redo\n                    </Button>\n                </div>\n                <hr/>\n                <DisplayOptions />\n                <hr/>\n                <GameOptions />\n                <hr/>\n                <h4>Help</h4>\n                <OverlayTrigger\n                    placement=\"top\"\n                    overlay={this.renderTooltip('tooltip-fill-center', 'Show all possible values for each cell.')}\n                >\n                    <Button\n                        onClick={this.props.onClickFillCenters}\n                        className=\"btn-secondary\"\n                    >\n                        Fill all center values\n                    </Button>\n                </OverlayTrigger>\n                &nbsp;\n                <Button\n                    onClick={this.props.solve}\n                    className=\"btn-secondary\"\n                >\n                    Solve\n                </Button>\n                <hr/>\n                <Button\n                    onClick={this.props.generateUrl}\n                    className=\"btn-secondary\"\n                >\n                    Get URL\n                </Button>\n                &nbsp;\n                {this.renderUrl()}\n            </Form>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return { url: state.gameUrl };\n};\nconst connector = connect(mapStateToProps);\ntype ControlProps = ConnectedProps<typeof connector> & {\n    onClickVerify: () => void,\n    onClickUndo: () => void,\n    onClickRedo: () => void,\n    solve: () => void,\n    generateUrl: () => void,\n\n    onClickFillCenters: () => void,\n};\n\nexport default connector(Control);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport {\n    generateUrl,\n    initGameState,\n    keyDown,\n    mouseDown,\n    mouseOver,\n    mouseUp,\n    select,\n    selectSandwich\n    } from '../actions/board';\nimport { fillCenter, solve, verify } from '../actions/control';\nimport { redo, undo } from '../actions/history';\nimport { BoardModel } from '../models/board';\nimport { ControlModel } from '../models/control';\nimport { HistoryModel } from '../models/history';\nimport Board from './board/Board';\nimport Control from './control/Control';\n\n\nexport type GameState = {\n    board: BoardModel,\n    control: ControlModel,\n    history: HistoryModel,\n    gameUrl: string,\n};\n\nclass Game extends React.Component<GameProps, GameState> {\n    componentDidMount() {\n        if (this.props.encoded) {\n            this.props.initGameState(JSON.parse(window.atob(this.props.encoded)));\n        }\n    }\n\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.props.keyDown(this.props.board, this.props.control, this.props.history, e)}\n                tabIndex={0}\n                className=\"container\"\n                onMouseUp={() => this.props.mouseUp(this.props.board)}\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.props.board}\n                            gameOptions={this.props.control.gameOptions}\n                            onClick={(e, id) => this.props.select(this.props.board, this.props.control, id, !e.metaKey)}\n                            onSelectSandwich={(e, isRow, id) => this.props.selectSandwich(this.props.board, this.props.control, isRow, id)}\n                            onMouseDown={(e, id) => this.props.mouseDown(this.props.board, this.props.control, id, !e.metaKey)}\n                            onMouseOver={(id) => this.props.mouseOver(this.props.board, this.props.control, id)}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            onClickVerify={() => this.props.verify(this.props.board, this.props.control)}\n                            onClickUndo={() => this.props.undo(this.props.history)}\n                            onClickRedo={() => this.props.redo(this.props.history)}\n                            onClickFillCenters={() => this.props.fillCenter(this.props.board, this.props.control)}\n                            solve={() => this.props.solve(this.props.board, this.props.control)}\n                            generateUrl={() => this.props.generateUrl(this.props.board, this.props.control)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\ntype OwnProps = RouteComponentProps<{encoded: string}>;\nconst mapStateToProps = (state: GameState, ownProps: OwnProps) => {\n    return {\n        ...state,\n        encoded: ownProps.match.params.encoded,\n    };\n};\n\nconst connector = connect(mapStateToProps, {\n    // history actions.\n    redo,\n    undo,\n\n    // board actions.\n    initGameState,\n    generateUrl,\n    keyDown,\n    mouseDown,\n    mouseOver,\n    mouseUp,\n    select,\n    selectSandwich,\n\n    // control actions.\n    fillCenter,\n    verify,\n    solve,\n});\n\ntype GameProps = ConnectedProps<typeof connector>;\n\nexport default connector(Game);\n","export type GameOptions = {\n    antiKnight: boolean;\n    antiKing: boolean;\n    sandwich: boolean;\n};\n\nexport type DisplayOptions = {\n    highlightRestricted: boolean;\n    highlightMatchingNumbers: boolean;\n    autoCleanUp: boolean;\n};\n\nexport class ControlModel {\n    displayOptions: DisplayOptions;\n    gameOptions: GameOptions;\n\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n            highlightMatchingNumbers: false,\n            autoCleanUp: false,\n        };\n        this.gameOptions = {\n            antiKnight: false,\n            antiKing: false,\n            sandwich: false,\n        };\n    }\n}\n","import { BoardModel } from './board';\n\nexport class HistoryModel {\n    boards: Array<string>;\n    id: number;\n\n    constructor() {\n        this.boards = [];\n        this.id = 0;\n\n        const board = new BoardModel();\n        this.boards.push(board.serialize());\n    }\n}\n","import { combineReducers } from 'redux';\nimport { boardReducer } from './board';\nimport { controlReducer } from './control';\nimport { gameUrlReducer } from './gameUrl';\nimport { historyReducer } from './history';\n\n\nconst isMouseDownReducer = (isMouseDown = false) => {\n    return isMouseDown;\n}\n\nconst highlightMatchingReducer = (highlightMatching = null) => {\n    return highlightMatching;\n}\n\nexport default combineReducers({\n    board: boardReducer,\n    control: controlReducer,\n    history: historyReducer,\n    isMouseDown: isMouseDownReducer,\n    highlightMatching: highlightMatchingReducer,\n    gameUrl: gameUrlReducer,\n});\n","import {\n    ACTION_INIT_GAME_STATE,\n    ACTION_REDO,\n    ACTION_UNDO,\n    ACTION_UPDATE_BOARD,\n    ActionTypes\n    } from '../actions/types';\nimport { BoardModel } from '../models/board';\n\nexport const boardReducer = (board = new BoardModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        return action.payload.board;\n    }\n    if (action.type === ACTION_UNDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n    if (action.type === ACTION_REDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n    if (action.type === ACTION_INIT_GAME_STATE) {\n        return action.payload.board;\n    }\n\n    return board;\n}\n","import {\n    ACTION_INIT_GAME_STATE,\n    ACTION_UPDATE_DISPLAY,\n    ACTION_UPDATE_GAME_PLAY,\n    ActionTypes\n    } from '../actions/types';\nimport { ControlModel } from '../models/control';\n\nexport const controlReducer = (control: ControlModel = new ControlModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_DISPLAY) {\n        return {...control, displayOptions: action.payload};\n    }\n    if (action.type === ACTION_UPDATE_GAME_PLAY) {\n        return {...control, gameOptions: action.payload};\n    }\n    if (action.type === ACTION_INIT_GAME_STATE) {\n        return {...control, gameOptions: action.payload.gameOptions};\n    }\n    return control;\n};\n","import assert from 'assert';\nimport {\n    ACTION_INIT_GAME_STATE,\n    ACTION_REDO,\n    ACTION_UNDO,\n    ACTION_UPDATE_BOARD,\n    ActionTypes\n    } from '../actions/types';\nimport { HistoryModel } from '../models/history';\n\nexport const historyReducer = (history = new HistoryModel(), action: ActionTypes) => {\n    if (action.type === ACTION_INIT_GAME_STATE) {\n        return {\n            boards: [action.payload.board.serialize()],\n            id: 0,\n        };\n    }\n    if (action.type === ACTION_UPDATE_BOARD) {\n        const serialized = action.payload.board.serialize();\n\n        // Only update history if the serialized new board is different.\n        // Thus, we ignore all selections and restrictions.\n        if (serialized !== history.boards[history.id]) {\n            // Remove the rest of history.\n            // This clean data in case we do lots of undo, and then make a new move.\n            history.boards = history.boards.slice(0, history.id + 1);\n\n            // Update history.\n            history.boards.push(serialized);\n            history.id += 1;\n        }\n        return history;\n    }\n    if (action.type === ACTION_UNDO) {\n        assert(history.id > 0);\n        return {...history, id: history.id - 1 };\n    }\n    if (action.type === ACTION_REDO) {\n        assert(history.id + 1 < history.boards.length);\n        return {...history, id: history.id + 1 };\n    }\n    return history;\n}\n","import { ACTION_GENERATE_URL, ActionTypes } from '../actions/types';\n\nexport const gameUrlReducer = (gameUrl = null, action: ActionTypes) => {\n    if (action.type === ACTION_GENERATE_URL) {\n        return action.payload.url;\n    }\n    return gameUrl;\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { createStore } from 'redux';\nimport Game from './components/Game';\nimport './index.css';\nimport reducers from './reducers';\n\n\nconst store = createStore(\n    reducers,\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <Route path=\"/:encoded?\" component={Game} />\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}