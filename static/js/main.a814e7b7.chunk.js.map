{"version":3,"sources":["board.js","control.js","models/cellModel.js","models/boardModel.js","models/controlModel.js","index.js"],"names":["Cell","this","props","cell","value","className","highlightMatching","sortedValues","Array","from","cornerValues","sort","map","classes","shouldHighlightMatching","key","id","centerValues","isRegionTop","push","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","selected","restricted","error","join","onClick","onMouseDown","onMouseOver","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","Board","i","board","cells","e","startingCell","renderCell","rows","renderRow","Control","Form","Button","onClickVerify","onClickUndo","onClickRedo","Check","type","label","checked","control","displayOptions","highlightRestricted","onChange","onToggleHighlightRestricted","highlightMatchingNumbers","onToggleHighlightMatchingNumbers","autoCleanUp","onToggleAutoCleanUp","gamePlay","antiKnight","onToggleAntiKnight","antiKing","onToggleAntiKing","onClickFillCenters","CellModel","Set","row","col","set_intersection","a","b","filter","x","has","BoardModel","result","forEach","JSON","stringify","serialized","clearAllErrors","clearAllRestricteds","clearAllSelections","obj","parse","cellId","toRowCol","getRegionByPosition","col2","add","toCellId","row2","region","getRegion","di","dj","isInside","delete","myValue","getVisibleCells","neighborId","seenValues","getPossibleValues","cellIds","newValue","autoCleanup","clear","ControlModel","Game","state","history","historyId","isMouseDown","serialize","_","clone","slice","setState","load","length","console","log","newBoard","cloneBoard","assignNewBoard","selectedValues","size","selectedValue","values","next","clearSelection","clearSelectionAndRestricted","setSelected","setRestricted","updateHighlightMatchingNumbers","select","metaKey","clearAllError","setValueOfSelectedCells","unsetSelectedCells","toggleCornerValuesOfSelectedCells","clearCornerValuesOfSelectedCells","toggleCenterValuesOfSelectedCells","clearCenterValuesOfSelectedCells","invalidCellIds","getInvalidCellIds","setErrors","alert","d_row","d_col","r","c","keyCode","isShift","shiftKey","isMeta","KeyCode","String","fromCharCode","preventDefault","moveSelection","undo","redo","newControl","cloneControl","toggleHighlightRestricted","assignNewControl","toggleHighlightMatchingNumbers","toggleAutoCleanUp","toggleAntiKnight","toggleAntiKing","fillAllPossibleValues","onKeyDown","handleKeyDown","tabIndex","onMouseUp","handleMouseUp","handleClick","handleMouseDown","handleMouseOver","verifyBoard","handleToggleHighlightRestricted","handleToggleHighlightMatchingNumbers","handleToggleAutoCleanUp","handleToggleAntiKnight","handleToggleAntiKing","handleClickFillCenter","ReactDOM","render","document","getElementById"],"mappings":"kQAEMA,E,oLAEE,GAAIC,KAAKC,MAAMC,KAAKC,MAChB,OACI,0BAAMC,UAAU,mBACXJ,KAAKC,MAAMC,KAAKC,S,8CAOTA,GACpB,OAAOH,KAAKC,MAAMI,mBAAqBF,IAAUH,KAAKC,MAAMI,oB,+CAGtC,IAAD,OACrB,IAAIL,KAAKC,MAAMC,KAAKC,MAApB,CAIA,IAAMG,EAAeC,MAAMC,KAAKR,KAAKC,MAAMC,KAAKO,cAC3CC,OACAC,KAAI,SAACR,GACF,IAAMS,EAAU,EAAKC,wBAAwBV,GAAS,WAAa,GACnE,OACI,0BACIC,UAAWQ,EACXE,IAAK,UAAY,EAAKb,MAAMC,KAAKa,GAAK,IAAMZ,GAE3CA,MAIjB,OACI,0BAAMC,UAAU,qBACXE,M,+CAKa,IAAD,OACrB,IAAIN,KAAKC,MAAMC,KAAKC,MAApB,CAIA,IAAMG,EAAeC,MAAMC,KAAKR,KAAKC,MAAMC,KAAKc,cAC3CN,OACAC,KAAI,SAACR,GACF,IAAMS,EAAU,EAAKC,wBAAwBV,GAAS,WAAa,GACnE,OACI,0BACIC,UAAWQ,EACXE,IAAK,UAAY,EAAKb,MAAMC,KAAKa,GAAK,IAAMZ,GAE3CA,MAIjB,OACI,0BAAMC,UAAU,qBACXE,M,+BAMT,IAAIM,EAAU,CAAC,QAoCf,OAjCIZ,KAAKC,MAAMC,KAAKe,eAChBL,EAAQM,KAAK,cAEblB,KAAKC,MAAMC,KAAKiB,gBAChBP,EAAQM,KAAK,eAIblB,KAAKC,MAAMC,KAAKkB,eAChBR,EAAQM,KAAK,cAEblB,KAAKC,MAAMC,KAAKmB,gBAChBT,EAAQM,KAAK,eAEblB,KAAKC,MAAMC,KAAKoB,cAChBV,EAAQM,KAAK,aAEblB,KAAKC,MAAMC,KAAKqB,iBAChBX,EAAQM,KAAK,gBAIblB,KAAKC,MAAMC,KAAKsB,SAChBZ,EAAQM,KAAK,YACNlB,KAAKa,wBAAwBb,KAAKC,MAAMC,KAAKC,OACpDS,EAAQM,KAAK,YACNlB,KAAKC,MAAMC,KAAKuB,YACvBb,EAAQM,KAAK,cAEblB,KAAKC,MAAMC,KAAKwB,OAChBd,EAAQM,KAAK,SAIb,yBACId,UAAWQ,EAAQe,KAAK,KACxBC,QAAS5B,KAAKC,MAAM2B,QACpBC,YAAa7B,KAAKC,MAAM4B,YACxBC,YAAa9B,KAAKC,MAAM6B,YACxBhB,IAAKd,KAAKC,MAAMC,KAAKa,IAEpBf,KAAK+B,sBACL/B,KAAKgC,yBACLhC,KAAKiC,8B,GAjHHC,IAAMC,WA8JVC,E,yKAtCAC,GAAI,IAAD,OACV,OACI,kBAAC,EAAD,CACInC,KAAMF,KAAKC,MAAMqC,MAAMC,MAAMF,GAC7BT,QAAS,SAACY,GAAD,OAAO,EAAKvC,MAAM2B,QAAQY,EAAGH,IACtCR,YAAa,SAACW,GAAD,OAAO,EAAKvC,MAAM4B,YAAYW,EAAGH,IAC9CP,YAAa,kBAAM,EAAK7B,MAAM6B,YAAYO,IAC1CvB,IAAKuB,EACLhC,kBAAmBL,KAAKC,MAAMI,sB,gCAKhCoC,GAEN,IADA,IAAIF,EAAQ,GACHF,EAAII,EAAcJ,EAAII,EAAe,EAAGJ,IAC7CE,EAAMrB,KAAKlB,KAAK0C,WAAWL,IAE/B,OACI,yBAAKjC,UAAU,MAAMU,IAAK2B,GACrBF,K,+BAOT,IADA,IAAII,EAAO,GACFN,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBM,EAAKzB,KAAKlB,KAAK4C,UAAUP,IAE7B,OACI,6BACKM,O,GAjCGT,IAAMC,W,gBC1CXU,E,uKAzEP,OACI,kBAACC,EAAA,EAAD,KACI,yBAAK1C,UAAU,IACX,kBAAC2C,EAAA,EAAD,CAAQnB,QAAS5B,KAAKC,MAAM+C,eAA5B,UADJ,OAKI,kBAACD,EAAA,EAAD,CACInB,QAAS5B,KAAKC,MAAMgD,YACpB7C,UAAU,iBAFd,QALJ,OAYI,kBAAC2C,EAAA,EAAD,CACInB,QAAS5B,KAAKC,MAAMiD,YACpB9C,UAAU,iBAFd,SAOJ,6BACA,+CACA,kBAAC0C,EAAA,EAAKK,MAAN,CACIC,KAAK,WACLrC,GAAG,gCACHsC,MAAM,6BACNC,QAAStD,KAAKC,MAAMsD,QAAQC,eAAeC,oBAC3CC,SAAU1D,KAAKC,MAAM0D,8BAEzB,kBAACb,EAAA,EAAKK,MAAN,CACIC,KAAK,WACLrC,GAAG,sCACHsC,MAAM,6BACNC,QAAStD,KAAKC,MAAMsD,QAAQC,eAAeI,yBAC3CF,SAAU1D,KAAKC,MAAM4D,mCAEzB,kBAACf,EAAA,EAAKK,MAAN,CACIC,KAAK,WACLrC,GAAG,wBACHsC,MAAM,sCACNC,QAAStD,KAAKC,MAAMsD,QAAQC,eAAeM,YAC3CJ,SAAU1D,KAAKC,MAAM8D,sBAEzB,6BACA,yCACA,kBAACjB,EAAA,EAAKK,MAAN,CACIC,KAAK,WACLrC,GAAG,uBACHsC,MAAM,cACNC,QAAStD,KAAKC,MAAMsD,QAAQS,SAASC,WACrCP,SAAU1D,KAAKC,MAAMiE,qBAEzB,kBAACpB,EAAA,EAAKK,MAAN,CACIC,KAAK,WACLrC,GAAG,qBACHsC,MAAM,YACNC,QAAStD,KAAKC,MAAMsD,QAAQS,SAASG,SACrCT,SAAU1D,KAAKC,MAAMmE,mBAEzB,6BACA,oCACA,kBAACrB,EAAA,EAAD,CACInB,QAAS5B,KAAKC,MAAMoE,mBACpBjE,UAAU,iBAFd,+B,GAhEM8B,IAAMC,W,QCqCbmC,E,WAxCX,WAAYvD,GAAK,oBACbf,KAAKG,MAAQ,KACbH,KAAKS,aAAe,IAAI8D,IACxBvE,KAAKgB,aAAe,IAAIuD,IACxBvE,KAAKwB,UAAW,EAChBxB,KAAKyB,YAAa,EAClBzB,KAAK0B,OAAQ,EAEb1B,KAAKwE,OAASzD,EAAK,GACnBf,KAAKyE,IAAM1D,EAAK,EAChBf,KAAKe,GAAKA,E,0DAIV,OAAOf,KAAKwE,IAAM,IAAM,I,uCAGxB,OAAOxE,KAAKwE,IAAM,IAAM,I,qCAGxB,OAAOxE,KAAKyE,IAAM,IAAM,I,sCAGxB,OAAOzE,KAAKyE,IAAM,IAAM,I,mCAIxB,OAAoB,IAAbzE,KAAKwE,M,sCAGZ,OAAoB,IAAbxE,KAAKwE,M,oCAGZ,OAAoB,IAAbxE,KAAKyE,M,qCAGZ,OAAoB,IAAbzE,KAAKyE,Q,KCnCpB,SAASC,EAAiBC,EAAGC,GACzB,OAAO,IAAIL,IAAI,YAAII,GAAGE,QAAO,SAAAC,GAAC,OAAIF,EAAEG,IAAID,O,IAuQ7BE,E,WA/PX,aAAe,oBACXhF,KAAKuC,MAAQ,GACb,IAAK,IAAIF,EAAI,EAAGA,EAAI,GAAIA,IACpBrC,KAAKuC,MAAMrB,KAAK,IAAIoD,EAAUjC,I,wDAKlC,IAAI4C,EAAS,GAQb,OAPAjF,KAAKuC,MAAM2C,SAAQ,SAAChF,GAChB+E,EAAO/D,KAAK,CACRf,MAAOD,EAAKC,MACZM,aAAcF,MAAMC,KAAKN,EAAKO,cAC9BO,aAAcT,MAAMC,KAAKN,EAAKc,mBAG/BmE,KAAKC,UAAUH,K,2BAGrBI,GACDrF,KAAKsF,iBACLtF,KAAKuF,sBACLvF,KAAKwF,qBAGL,IADA,IAAIC,EAAMN,KAAKO,MAAML,GACZhD,EAAI,EAAGA,EAAI,GAAIA,IACpBrC,KAAKuC,MAAMF,GAAGlC,MAAQsF,EAAIpD,GAAGlC,MAC7BH,KAAKuC,MAAMF,GAAG5B,aAAe,IAAI8D,IAAIkB,EAAIpD,GAAG5B,cAC5CT,KAAKuC,MAAMF,GAAGrB,aAAe,IAAIuD,IAAIkB,EAAIpD,GAAGrB,gB,+BAK3CwD,EAAKC,GACV,OAAO,GAAKD,GAAOA,EAAM,GAAK,GAAKC,GAAOA,EAAM,I,+BAG3CD,EAAKC,GACV,OAAa,EAAND,EAAUC,I,+BAGZkB,GACL,MAAO,IAAIA,EAAS,GAAIA,EAAS,K,0CAGjBnB,EAAKC,GAGrB,OAAW,KAFED,EAAM,MACNC,EAAM,K,gCAIbkB,GAAS,IAAD,EACK3F,KAAK4F,SAASD,GADnB,mBACPnB,EADO,KACFC,EADE,KAEd,OAAOzE,KAAK6F,oBAAoBrB,EAAKC,K,sCAOzBkB,EAAQ3B,GAMpB,IAN+B,IAAD,EACXhE,KAAK4F,SAASD,GADH,mBACvBnB,EADuB,KAClBC,EADkB,KAG1BQ,EAAS,IAAIV,IAGRuB,EAAO,EAAGA,EAAO,EAAGA,IACzBb,EAAOc,IAAI/F,KAAKgG,SAASxB,EAAKsB,IAGlC,IAAK,IAAIG,EAAO,EAAGA,EAAO,EAAGA,IACzBhB,EAAOc,IAAI/F,KAAKgG,SAASC,EAAMxB,IAInC,IADA,IAAMyB,EAASlG,KAAKmG,UAAUR,GACrBtD,EAAI,EAAGA,EAAI,GAAIA,IAChBrC,KAAKmG,UAAU9D,KAAO6D,GACtBjB,EAAOc,IAAI1D,GAKnB,GAAI2B,EAASC,WACT,IAAK,IAAImC,GAAM,EAAGA,GAAM,EAAGA,IACvB,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IACvB,GAAID,EAAGA,EAAKC,EAAGA,IAAO,EAAG,CACrB,IAAMJ,EAAOzB,EAAM4B,EACbN,EAAOrB,EAAM4B,EACfrG,KAAKsG,SAASL,EAAMH,IACpBb,EAAOc,IAAI/F,KAAKgG,SAASC,EAAMH,IAQnD,GAAI9B,EAASG,SACT,IAAK,IAAIiC,GAAM,EAAGA,GAAM,EAAGA,IACvB,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAC7B,IAAMJ,EAAOzB,EAAM4B,EACbN,EAAOrB,EAAM4B,EACfrG,KAAKsG,SAASL,EAAMH,IACpBb,EAAOc,IAAI/F,KAAKgG,SAASC,EAAMH,IAQ/C,OADAb,EAAOsB,OAAOZ,GACPV,I,wCAGOjB,GAEd,IAFyB,IAAD,OACpBiB,EAAS,IAAIV,IADO,WAEflC,GACL,IAAMmE,EAAU,EAAKjE,MAAMF,GAAGlC,MAC1BqG,GACA,EAAKC,gBAAgBpE,EAAG2B,GAAUkB,SAAQ,SAACwB,GACnCF,IAAY,EAAKjE,MAAMmE,GAAYvG,QACnC8E,EAAOc,IAAI1D,GACX4C,EAAOc,IAAIW,QANlBrE,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAWT,OAAO4C,I,wCAGOU,EAAQ3B,GAAW,IAvIjBW,EAAGC,EAuIa,OAC1B+B,EAAapG,MAAMC,KAAKR,KAAKyG,gBAAgBd,EAAQ3B,IACtDrD,KAAI,SAAA+F,GAAU,OAAI,EAAKnE,MAAMmE,GAAYvG,SACzC0E,QAAO,SAAAC,GAAC,OAAIA,KAEjB,OA5IgBH,EA4IM,IAAIJ,IAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MA5IpDK,EA4I2D,IAAIL,IAAIoC,GA3InF,IAAIpC,IAAI,YAAII,GAAGE,QAAO,SAAAC,GAAC,OAAKF,EAAEG,IAAID,S,4CA8InBd,GAAW,IAAD,OAC5BhE,KAAKuC,MAAM2C,SAAQ,SAAAhF,GACVA,EAAKC,QACND,EAAKc,aAAe,EAAK4F,kBAAkB1G,EAAKa,GAAIiD,S,kCAKpD2B,GACR3F,KAAKuC,MAAMoD,GAAQnE,UAAW,I,oCAGpBwC,GAGV,IAHqB,IAAD,OAChBvC,EAAa,KAERV,EAAK,EAAGA,EAAK,GAAIA,IAClBf,KAAKuC,MAAMxB,GAAIS,WAEXC,EADe,OAAfA,EACazB,KAAKyG,gBAAgB1F,EAAIiD,GAEzBU,EAAiB1E,KAAKyG,gBAAgB1F,EAAIiD,GAAWvC,IAK9EA,EAAWyD,SAAQ,SAACS,GAChB,EAAKpD,MAAMoD,GAAQlE,YAAa,O,gCAI9BoF,GAAU,IAAD,OACfA,EAAQ3B,SAAQ,SAACnE,GACb,EAAKwB,MAAMxB,GAAIW,OAAQ,O,8CAIPoF,EAAU9C,GAAgC,IAAD,OAArB+C,EAAqB,wDAC7D/G,KAAKuC,MAAM2C,SAAQ,SAAChF,GACZA,EAAKsB,WACLtB,EAAKC,MAAQ2G,EACTC,GACA,EAAKN,gBAAgBvG,EAAKa,GAAIiD,GAAUkB,SAAQ,SAACnE,GAC7C,EAAKwB,MAAMxB,GAAIN,aAAa8F,OAAOO,GACnC,EAAKvE,MAAMxB,GAAIC,aAAauF,OAAOO,Y,2CAQnD9G,KAAKuC,MAAM2C,SAAQ,SAAChF,GACZA,EAAKsB,WACLtB,EAAKC,MAAQ,W,wDAKSA,GAC9BH,KAAKuC,MAAM2C,SAAQ,SAAChF,GACZA,EAAKsB,WACDtB,EAAKO,aAAasE,IAAI5E,GACtBD,EAAKO,aAAa8F,OAAOpG,GAEzBD,EAAKO,aAAasF,IAAI5F,S,yDAOlCH,KAAKuC,MAAM2C,SAAQ,SAAChF,GACZA,EAAKsB,UACLtB,EAAKO,aAAauG,a,wDAKI7G,GAC9BH,KAAKuC,MAAM2C,SAAQ,SAAChF,GACZA,EAAKsB,WACDtB,EAAKc,aAAa+D,IAAI5E,GACtBD,EAAKc,aAAauF,OAAOpG,GAEzBD,EAAKc,aAAa+E,IAAI5F,S,uDAMLA,GAC7BH,KAAKuC,MAAM2C,SAAQ,SAAChF,GACZA,EAAKsB,UACLtB,EAAKc,aAAagG,a,2CAM1BhH,KAAKuC,MAAM2C,SAAQ,SAAChF,GAChBA,EAAKsB,UAAW,O,4CAKpBxB,KAAKuC,MAAM2C,SAAQ,SAAChF,GAChBA,EAAKuB,YAAa,O,uCAKtBzB,KAAKuC,MAAM2C,SAAQ,SAAChF,GAChBA,EAAKwB,OAAQ,S,KCnOVuF,E,WAjCX,aAAe,oBACXjH,KAAKwD,eAAiB,CAClBC,qBAAqB,EACrBG,0BAA0B,EAC1BE,aAAa,GAEjB9D,KAAKgE,SAAW,CACZC,YAAY,EACZE,UAAU,G,wEAKdnE,KAAKwD,eAAeC,qBAAuBzD,KAAKwD,eAAeC,sB,uDAI/DzD,KAAKwD,eAAeI,0BAA4B5D,KAAKwD,eAAeI,2B,0CAIpE5D,KAAKwD,eAAeM,aAAe9D,KAAKwD,eAAeM,c,yCAIvD9D,KAAKgE,SAASC,YAAcjE,KAAKgE,SAASC,a,uCAI1CjE,KAAKgE,SAASG,UAAYnE,KAAKgE,SAASG,a,KCjB1C+C,G,8DACF,WAAYjH,GAAQ,IAAD,8BACf,cAAMA,IACDkH,MAAQ,CACT7E,MAAO,IAAI0C,EACXzB,QAAS,IAAI0D,EACbG,QAAS,GACTC,UAAW,EACXC,aAAa,EACbjH,kBAAmB,MAIvB,EAAK8G,MAAMC,QAAQlG,KAAK,EAAKiG,MAAM7E,MAAMiF,aAZ1B,E,yDAiBf,OADeC,IAAEC,MAAMzH,KAAKmH,MAAM7E,OAAO,K,qCAMzC,OADiBkF,IAAEC,MAAMzH,KAAKmH,MAAM5D,SAAS,K,qCAIlCjB,GACX,IAAM+C,EAAa/C,EAAMiF,YACrBH,EAAUpH,KAAKmH,MAAMC,QACrBC,EAAYrH,KAAKmH,MAAME,UAIvBhC,IAAerF,KAAKmH,MAAMC,QAAQC,MAGlCD,EAAUI,IAAEE,MAAMN,EAAS,EAAGC,EAAY,IAGlCnG,KAAKmE,GACbgC,GAAa,GAGjBrH,KAAK2H,SAAS,CACVrF,MAAOA,EACP8E,QAASA,EACTC,UAAWA,M,6BAKf,GAA6B,IAAzBrH,KAAKmH,MAAME,UAAf,CAIA,IAAI/E,EAAQ,IAAI0C,EAChB1C,EAAMsF,KAAK5H,KAAKmH,MAAMC,QAAQpH,KAAKmH,MAAME,UAAY,IAErDrH,KAAK2H,SAAS,CACVrF,MAAOA,EACP+E,UAAWrH,KAAKmH,MAAME,UAAY,O,6BAKtC,KAAIrH,KAAKmH,MAAME,WAAarH,KAAKmH,MAAMC,QAAQS,OAAS,GAAxD,CAIA,IAAIvF,EAAQ,IAAI0C,EAChB1C,EAAMsF,KAAK5H,KAAKmH,MAAMC,QAAQpH,KAAKmH,MAAME,UAAY,IAErDrH,KAAK2H,SAAS,CACVrF,MAAOA,EACP+E,UAAWrH,KAAKmH,MAAME,UAAY,O,uCAIzB9D,GACbvD,KAAK2H,SAAS,CAAEpE,QAASA,M,oDAIzBuE,QAAQC,IAAI,+BACZ,IAAIC,EAAWhI,KAAKiI,aAEpBD,EAASxC,qBACTwC,EAASzC,sBAETvF,KAAKkI,eAAeF,GACpBhI,KAAK2H,SAAS,CAACtH,kBAAmB,S,uDAIlC,GAAIL,KAAKmH,MAAM5D,QAAQC,eAAeI,yBAA0B,CAC5D,IAAMuE,EAAiB,IAAI5D,IACvBvE,KAAKmH,MAAM7E,MAAMC,MACZsC,QAAO,SAAC3E,GAAD,OAAUA,EAAKsB,YACtBqD,QAAO,SAAC3E,GAAD,OAAUA,EAAKC,SACtBQ,KAAI,SAACT,GAAD,OAAUA,EAAKC,UAE5B,GAA4B,IAAxBgI,EAAeC,KAAY,CAC3B,IAAMC,EAAgBF,EAAeG,SAASC,OAAOpI,MACrDH,KAAK2H,SAAS,CAACtH,kBAAmBgI,Q,6BAMvC1C,GAAgC,IAAxB6C,IAAuB,yDAClCV,QAAQC,IAAI,UAAYpC,GACxB,IAAIqC,EAAWhI,KAAKiI,aAChBO,EACAxI,KAAKyI,8BAELT,EAASzC,sBAGbyC,EAASU,YAAY/C,GAEjB3F,KAAKmH,MAAM5D,QAAQC,eAAeC,qBAClCuE,EAASW,cAAc3I,KAAKmH,MAAM5D,QAAQS,UAG9ChE,KAAKkI,eAAeF,GACpBhI,KAAK4I,mC,kCAIGpG,EAAGmD,GACXmC,QAAQC,IAAI,eAAiBpC,GAC7B3F,KAAK6I,OAAOlD,GAASnD,EAAEsG,W,sCAIXtG,EAAGmD,GACfmC,QAAQC,IAAI,mBAAqBpC,GACjC3F,KAAK2H,SAAS,CAACL,aAAa,IAE5BtH,KAAK6I,OAAOlD,GAASnD,EAAEsG,W,sCAIXnD,GACP3F,KAAKmH,MAAMG,cAGhBQ,QAAQC,IAAI,mBAAqBpC,GACjC3F,KAAK6I,OAAOlD,GAAQ,M,sCAIpBmC,QAAQC,IAAI,iBACZ/H,KAAK2H,SAAS,CAACL,aAAa,M,8CAGRR,GACpBgB,QAAQC,IAAI,2BAA6BjB,GACzC9G,KAAK+I,gBAEL,IAAIf,EAAWhI,KAAKiI,aACpBD,EAASgB,wBACLlC,EACA9G,KAAKmH,MAAM5D,QAAQS,SACnBhE,KAAKmH,MAAM5D,QAAQC,eAAeM,aAEtC9D,KAAKkI,eAAeF,GACpBhI,KAAK4I,mC,2CAILd,QAAQC,IAAI,sBACZ/H,KAAK+I,gBAEL,IAAIf,EAAWhI,KAAKiI,aACpBD,EAASiB,qBAETjJ,KAAKkI,eAAeF,K,wDAGUlB,GAC9BgB,QAAQC,IAAI,qCAAuCjB,GAEnD,IAAIkB,EAAWhI,KAAKiI,aACpBD,EAASkB,kCAAkCpC,GAE3C9G,KAAKkI,eAAeF,K,yDAIpBF,QAAQC,IAAI,oCAEZ,IAAIC,EAAWhI,KAAKiI,aACpBD,EAASmB,mCACTnJ,KAAKkI,eAAeF,K,wDAGUlB,GAC9BgB,QAAQC,IAAI,qCAAuCjB,GAEnD,IAAIkB,EAAWhI,KAAKiI,aACpBD,EAASoB,kCAAkCtC,GAE3C9G,KAAKkI,eAAeF,K,yDAIpBF,QAAQC,IAAI,oCAEZ,IAAIC,EAAWhI,KAAKiI,aACpBD,EAASqB,mCACTrJ,KAAKkI,eAAeF,K,sCAIpBF,QAAQC,IAAI,iBACZ,IAAIC,EAAWhI,KAAKiI,aACpBD,EAAS1C,iBACTtF,KAAKkI,eAAeF,K,oCAIpBF,QAAQC,IAAI,eACZ,IAAIC,EAAWhI,KAAKiI,aACpBD,EAAS1C,iBACT,IAAIgE,EAAiBtB,EAASuB,kBAAkBvJ,KAAKmH,MAAM5D,QAAQS,UACnEgE,EAASwB,UAAUF,GACnBtJ,KAAKkI,eAAeF,GAEpByB,MAAMH,EAAelB,KAAO,EAAI,iBAAmB,W,oCAKzCsB,EAAOC,GAEjB,IADA,IAAIC,EAAI,EAAGC,EAAI,EACNxH,EAAI,EAAGA,EAAI,GAAIA,IACpB,GAAIrC,KAAKmH,MAAM7E,MAAMC,MAAMF,GAAGb,SAAU,CACpCsG,QAAQC,IAAI/H,KAAKmH,OADmB,MAE3BnH,KAAKmH,MAAM7E,MAAMsD,SAASvD,GAFC,mBAEnCuH,EAFmC,KAEhCC,EAFgC,KAGpC,MAGRD,GAAKA,EAAIF,EAAQ,GAAK,EACtBG,GAAKA,EAAIF,EAAQ,GAAK,EACtB3J,KAAK6I,OAAO7I,KAAKmH,MAAM7E,MAAM0D,SAAS4D,EAAGC,M,oCAI/BrH,GACVsF,QAAQC,IAAI,4BAA8BvF,EAAEsH,SAE5C,IAAIC,IAAYvH,EAAEwH,SACdC,IAAWzH,EAAEsG,QAGjB,GAAItG,EAAEsH,SAAWI,KAAiB1H,EAAEsH,SAAWI,IAAe,CAC1D,IAAM/J,EAAQgK,OAAOC,aAAa5H,EAAEsH,SAChCC,EACA/J,KAAKkJ,kCAAkC/I,GAChC8J,GACPjK,KAAKoJ,kCAAkCjJ,GACvCqC,EAAE6H,kBAEFrK,KAAKgJ,wBAAwB7I,GAIrC,OAAQqC,EAAEsH,SACN,KAAKI,IACDlK,KAAKiJ,qBACL,MACJ,KAAKiB,IACDlK,KAAKiJ,qBACLjJ,KAAKmJ,mCACLnJ,KAAKqJ,mCACL7G,EAAE6H,iBACF,MACJ,KAAKH,IACDlK,KAAKsK,cAAc,EAAI,GACvB,MACJ,KAAKJ,IACDlK,KAAKsK,eAAe,EAAG,GACvB,MACJ,KAAKJ,IACDlK,KAAKsK,cAAc,GAAI,GACvB,MACJ,KAAKJ,IACDlK,KAAKsK,cAAc,EAAG,GACtB,MACJ,KAAKJ,IACDlK,KAAKyI,8BACL,MACJ,KAAKyB,IACL,KAAKA,IACDlK,KAAKuK,OACL,MACJ,KAAKL,IACL,KAAKA,IACDlK,KAAKwK,U,wDAOb1C,QAAQC,IAAI,mCACZ,IAAI0C,EAAazK,KAAK0K,eACtBD,EAAWE,4BACX3K,KAAK4K,iBAAiBH,K,6DAItB3C,QAAQC,IAAI,wCACZ,IAAI0C,EAAazK,KAAK0K,eACtBD,EAAWI,iCACX7K,KAAK4K,iBAAiBH,K,gDAItB3C,QAAQC,IAAI,2BACZ,IAAI0C,EAAazK,KAAK0K,eACtBD,EAAWK,oBACX9K,KAAK4K,iBAAiBH,K,+CAItB3C,QAAQC,IAAI,0BACZ,IAAI0C,EAAazK,KAAK0K,eACtBD,EAAWM,mBACX/K,KAAK4K,iBAAiBH,K,6CAItB3C,QAAQC,IAAI,wBACZ,IAAI0C,EAAazK,KAAK0K,eACtBD,EAAWO,iBACXhL,KAAK4K,iBAAiBH,K,8CAItB3C,QAAQC,IAAI,yBACZ,IAAIC,EAAWhI,KAAKiI,aACpBD,EAASiD,sBAAsBjL,KAAKmH,MAAM5D,QAAQS,UAClDhE,KAAKkI,eAAeF,K,+BAGd,IAAD,OACL,OACI,yBACIkD,UAAW,SAAC1I,GAAD,OAAO,EAAK2I,cAAc3I,IACrC4I,SAAS,IACThL,UAAU,YACViL,UAAW,kBAAM,EAAKC,kBAEtB,2CACA,yBAAKlL,UAAU,OACX,yBAAKA,UAAU,UACX,kBAAC,EAAD,CACIkC,MAAOtC,KAAKmH,MAAM7E,MAClBV,QAAS,SAACY,EAAGH,GAAJ,OAAU,EAAKkJ,YAAY/I,EAAGH,IACvCR,YAAa,SAACW,EAAGH,GAAJ,OAAU,EAAKmJ,gBAAgBhJ,EAAGH,IAC/CP,YAAa,SAACO,GAAD,OAAO,EAAKoJ,gBAAgBpJ,IACzChC,kBAAmBL,KAAKmH,MAAM9G,qBAGtC,yBAAKD,UAAU,UACX,kBAAC,EAAD,CACImD,QAASvD,KAAKmH,MAAM5D,QACpBP,cAAe,kBAAM,EAAK0I,eAC1BzI,YAAa,kBAAM,EAAKsH,QACxBrH,YAAa,kBAAM,EAAKsH,QACxB7G,4BAA6B,kBAAM,EAAKgI,mCACxC9H,iCAAkC,kBAAM,EAAK+H,wCAC7C7H,oBAAqB,kBAAM,EAAK8H,2BAChC3H,mBAAoB,kBAAM,EAAK4H,0BAC/B1H,iBAAkB,kBAAM,EAAK2H,wBAC7B1H,mBAAoB,kBAAM,EAAK2H,kC,GAzXxC9J,IAAMC,YAkYzB8J,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.a814e7b7.chunk.js","sourcesContent":["import React from 'react';\n\nclass Cell extends React.Component {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    shouldHighlightMatching(value) {\n        return this.props.highlightMatching && value === this.props.highlightMatching;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"corner-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"center-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        } else if (this.shouldHighlightMatching(this.props.cell.value)) {\n            classes.push('matching');\n        } else if (this.props.cell.restricted) {\n            classes.push('restricted');\n        }\n        if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                onMouseDown={this.props.onMouseDown}\n                onMouseOver={this.props.onMouseOver}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    renderCell(i) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                onMouseDown={(e) => this.props.onMouseDown(e, i)}\n                onMouseOver={() => this.props.onMouseOver(i)}\n                key={i}\n                highlightMatching={this.props.highlightMatching}\n            />\n        );\n    }\n\n    renderRow(startingCell) {\n        let cells = [];\n        for (let i = startingCell; i < startingCell + 9; i++) {\n            cells.push(this.renderCell(i));\n        }\n        return (\n            <div className=\"row\" key={startingCell}>\n                {cells}\n            </div>\n        );\n    }\n\n    render() {\n        let rows = [];\n        for (let i = 0; i < 81; i += 9) {\n            rows.push(this.renderRow(i));\n        }\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nclass Control extends React.Component {\n    render() {\n        return (\n            <Form>\n                <div className=\"\">\n                    <Button onClick={this.props.onClickVerify}>\n                        Verify\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickUndo}\n                        className=\"btn-secondary\"\n                    >\n                        Undo\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickRedo}\n                        className=\"btn-secondary\"\n                    >\n                        Redo\n                    </Button>\n                </div>\n                <hr/>\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.control.displayOptions.highlightRestricted}\n                    onChange={this.props.onToggleHighlightRestricted}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-matching-numbers'\n                    label='Highlight matching numbers'\n                    checked={this.props.control.displayOptions.highlightMatchingNumbers}\n                    onChange={this.props.onToggleHighlightMatchingNumbers}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-auto-cleanup'\n                    label='Auto Cleanup corner & center values'\n                    checked={this.props.control.displayOptions.autoCleanUp}\n                    onChange={this.props.onToggleAutoCleanUp}\n                />\n                <hr/>\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label='Anti Knight'\n                    checked={this.props.control.gamePlay.antiKnight}\n                    onChange={this.props.onToggleAntiKnight}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label='Anti King'\n                    checked={this.props.control.gamePlay.antiKing}\n                    onChange={this.props.onToggleAntiKing}\n                />\n                <hr/>\n                <h4>Help</h4>\n                <Button\n                    onClick={this.props.onClickFillCenters}\n                    className=\"btn-secondary\"\n                >\n                    Fill all center values\n                </Button>\n            </Form>\n        );\n    }\n}\n\nexport default Control;\n","class CellModel {\n    constructor(id) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop() {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom() {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft() {\n        return this.col % 3 === 0;\n    }\n    isRegionRight() {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop() {\n        return this.row === 0;\n    }\n    isBoardBottom() {\n        return this.row === 8;\n    }\n    isBoardLeft() {\n        return this.col === 0;\n    }\n    isBoardRight() {\n        return this.col === 8;\n    }\n}\n\nexport default CellModel;\n","import CellModel from './cellModel.js';\n\nfunction set_intersection(a, b) {\n    return new Set([...a].filter(x => b.has(x)));\n}\n\nfunction set_difference(a, b) {\n    return new Set([...a].filter(x => !b.has(x)));\n}\n\nclass BoardModel {\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n    }\n\n    serialize() {\n        let result = [];\n        this.cells.forEach((cell) => {\n            result.push({\n                value: cell.value,\n                cornerValues: Array.from(cell.cornerValues),\n                centerValues: Array.from(cell.centerValues),\n            });\n        });\n        return JSON.stringify(result);\n    }\n\n    load(serialized) {\n        this.clearAllErrors();\n        this.clearAllRestricteds();\n        this.clearAllSelections();\n\n        let obj = JSON.parse(serialized);\n        for (let i = 0; i < 81; i++) {\n            this.cells[i].value = obj[i].value;\n            this.cells[i].cornerValues = new Set(obj[i].cornerValues);\n            this.cells[i].centerValues = new Set(obj[i].centerValues);\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row, col) {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row, col) {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId) {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row, col) {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId) {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId, gamePlay) {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gamePlay.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gamePlay.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gamePlay) {\n        let result = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gamePlay).forEach((neighborId) => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    getPossibleValues(cellId, gamePlay) {\n        const seenValues = Array.from(this.getVisibleCells(cellId, gamePlay))\n            .map(neighborId => this.cells[neighborId].value)\n            .filter(x => x);\n\n        return set_difference(new Set(['1', '2', '3', '4', '5', '6', '7', '8', '9']), new Set(seenValues));\n    }\n\n    fillAllPossibleValues(gamePlay) {\n        this.cells.forEach(cell => {\n            if (!cell.value) {\n                cell.centerValues = this.getPossibleValues(cell.id, gamePlay);\n            }\n        });\n    }\n\n    setSelected(cellId) {\n        this.cells[cellId].selected = true;\n    }\n\n    setRestricted(gamePlay) {\n        let restricted = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gamePlay);\n                } else {\n                    restricted = set_intersection(this.getVisibleCells(id, gamePlay), restricted);\n                }\n            }\n        }\n\n        restricted.forEach((cellId) => {\n            this.cells[cellId].restricted = true;\n        })\n    }\n\n    setErrors(cellIds) {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSelectedCells(newValue, gamePlay, autoCleanup = false) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = newValue;\n                if (autoCleanup) {\n                    this.getVisibleCells(cell.id, gamePlay).forEach((id) => {\n                        this.cells[id].cornerValues.delete(newValue);\n                        this.cells[id].centerValues.delete(newValue);\n                    });\n                }\n            }\n        });\n    }\n\n    unsetSelectedCells() {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = null;\n            }\n        });\n    }\n\n    toggleCornerValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells() {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections() {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds() {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors() {\n        this.cells.forEach((cell) => {\n            cell.error = false;\n        });\n    }\n}\n\nexport default BoardModel;\n","class ControlModel {\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n            highlightMatchingNumbers: false,\n            autoCleanUp: false,\n        };\n        this.gamePlay = {\n            antiKnight: false,\n            antiKing: false,\n        };\n    }\n\n    toggleHighlightRestricted() {\n        this.displayOptions.highlightRestricted = !this.displayOptions.highlightRestricted;\n    }\n\n    toggleHighlightMatchingNumbers() {\n        this.displayOptions.highlightMatchingNumbers = !this.displayOptions.highlightMatchingNumbers;\n    }\n\n    toggleAutoCleanUp() {\n        this.displayOptions.autoCleanUp = !this.displayOptions.autoCleanUp;\n    }\n\n    toggleAntiKnight() {\n        this.gamePlay.antiKnight = !this.gamePlay.antiKnight;\n    }\n\n    toggleAntiKing() {\n        this.gamePlay.antiKing = !this.gamePlay.antiKing;\n    }\n}\n\nexport default ControlModel;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport * as KeyCode from 'keycode-js';\n\nimport Board from './board.js';\nimport Control from './control.js';\nimport BoardModel from './models/boardModel.js';\nimport ControlModel from './models/controlModel.js';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            board: new BoardModel(),\n            control: new ControlModel(),\n            history: [],\n            historyId: 0,\n            isMouseDown: false,\n            highlightMatching: null,\n        };\n        // Assumption:\n        // board is equivalent to history[historyId] at all times.\n        this.state.history.push(this.state.board.serialize());\n    }\n    \n    cloneBoard() {\n        let newBoard = _.clone(this.state.board, true);\n        return newBoard;\n    }\n\n    cloneControl() {\n        let newControl = _.clone(this.state.control, true);\n        return newControl;\n    }\n\n    assignNewBoard(board) {\n        const serialized = board.serialize();\n        let history = this.state.history;\n        let historyId = this.state.historyId;\n\n        // Only update history if the serialized new board is different.\n        // Thus, we ignore all selections and restrictions.\n        if (serialized !== this.state.history[historyId]) {\n            // Remove the rest of history.\n            // This clean data in case we do lots of undo, and then make a new move.\n            history = _.slice(history, 0, historyId + 1);\n\n            // Update history.\n            history.push(serialized);\n            historyId += 1;\n        }\n\n        this.setState({\n            board: board,\n            history: history,\n            historyId: historyId,\n        });\n    }\n    \n    undo() {\n        if (this.state.historyId === 0) {\n            // Nothing to undo.\n            return;\n        }\n        let board = new BoardModel();\n        board.load(this.state.history[this.state.historyId - 1]);\n\n        this.setState({\n            board: board,\n            historyId: this.state.historyId - 1,\n        });\n    }\n\n    redo() {\n        if (this.state.historyId >= this.state.history.length - 1) {\n            // Nothing to redo.\n            return;\n        }\n        let board = new BoardModel();\n        board.load(this.state.history[this.state.historyId + 1]);\n\n        this.setState({\n            board: board,\n            historyId: this.state.historyId + 1,\n        });\n    }\n\n    assignNewControl(control) {\n        this.setState({ control: control });\n    }\n\n    clearSelectionAndRestricted() {\n        console.log('clearSelectionAndRestricted');\n        let newBoard = this.cloneBoard();\n\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n\n        this.assignNewBoard(newBoard);\n        this.setState({highlightMatching: null});\n    }\n\n    updateHighlightMatchingNumbers() {\n        if (this.state.control.displayOptions.highlightMatchingNumbers) {\n            const selectedValues = new Set(\n                this.state.board.cells\n                    .filter((cell) => cell.selected)\n                    .filter((cell) => cell.value)\n                    .map((cell) => cell.value)\n            );\n            if (selectedValues.size === 1) {\n                const selectedValue = selectedValues.values().next().value;\n                this.setState({highlightMatching: selectedValue});\n            }\n        }\n    }\n\n    // Select a cell.\n    select(cellId, clearSelection = true) {\n        console.log('select ' + cellId);\n        let newBoard = this.cloneBoard();\n        if (clearSelection) {\n            this.clearSelectionAndRestricted();\n        } else {\n            newBoard.clearAllRestricteds();\n        }\n\n        newBoard.setSelected(cellId);\n\n        if (this.state.control.displayOptions.highlightRestricted) {\n            newBoard.setRestricted(this.state.control.gamePlay);\n        }\n\n        this.assignNewBoard(newBoard);\n        this.updateHighlightMatchingNumbers();\n    }\n\n    // Handle clicking on a cell.\n    handleClick(e, cellId) {\n        console.log('handleClick ' + cellId);\n        this.select(cellId, !e.metaKey);\n    }\n\n    // Handle mousedown on a cell.\n    handleMouseDown(e, cellId) {\n        console.log('handleMouseDown ' + cellId);\n        this.setState({isMouseDown: true});\n\n        this.select(cellId, !e.metaKey);\n    }\n\n    // Handle mouseover a cell.\n    handleMouseOver(cellId) {\n        if (!this.state.isMouseDown) {\n            return;\n        }\n        console.log('handleMouseOver ' + cellId);\n        this.select(cellId, false);\n    }\n\n    handleMouseUp() {\n        console.log('handleMouseUp');\n        this.setState({isMouseDown: false});\n    }\n\n    setValueOfSelectedCells(newValue) {\n        console.log('setValueOfSelectedCells ' + newValue);\n        this.clearAllError();\n\n        let newBoard = this.cloneBoard();\n        newBoard.setValueOfSelectedCells(\n            newValue,\n            this.state.control.gamePlay,\n            this.state.control.displayOptions.autoCleanUp);\n\n        this.assignNewBoard(newBoard);\n        this.updateHighlightMatchingNumbers();\n    }\n\n    unsetSelectedCells() {\n        console.log('unsetSelectedCells');\n        this.clearAllError();\n\n        let newBoard = this.cloneBoard();\n        newBoard.unsetSelectedCells();\n\n        this.assignNewBoard(newBoard);\n    }\n\n    toggleCornerValuesOfSelectedCells(newValue) {\n        console.log('toggleCornerValuesOfSelectedCells ' + newValue);\n\n        let newBoard = this.cloneBoard();\n        newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    clearCornerValuesOfSelectedCells() {\n        console.log('clearCornerValuesOfSelectedCells');\n        \n        let newBoard = this.cloneBoard();\n        newBoard.clearCornerValuesOfSelectedCells();\n        this.assignNewBoard(newBoard);\n    }\n\n    toggleCenterValuesOfSelectedCells(newValue) {\n        console.log('toggleCenterValuesOfSelectedCells ' + newValue);\n\n        let newBoard = this.cloneBoard();\n        newBoard.toggleCenterValuesOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    clearCenterValuesOfSelectedCells() {\n        console.log('clearCenterValuesOfSelectedCells');\n\n        let newBoard = this.cloneBoard();\n        newBoard.clearCenterValuesOfSelectedCells();\n        this.assignNewBoard(newBoard);\n    }\n\n    clearAllError() {\n        console.log('clearAllError');\n        let newBoard = this.cloneBoard();\n        newBoard.clearAllErrors();\n        this.assignNewBoard(newBoard);\n    }\n\n    verifyBoard() {\n        console.log('verifyBoard');\n        let newBoard = this.cloneBoard();\n        newBoard.clearAllErrors();\n        let invalidCellIds = newBoard.getInvalidCellIds(this.state.control.gamePlay);\n        newBoard.setErrors(invalidCellIds);\n        this.assignNewBoard(newBoard);\n\n        alert(invalidCellIds.size > 0 ? 'Error found :(' : 'LGTM!');\n    }\n\n    // Move selected cell in direction (d_row, d_col).\n    // If there are more than one selected cells, only move the first one.\n    moveSelection(d_row, d_col) {\n        let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n        for (let i = 0; i < 81; i++) {\n            if (this.state.board.cells[i].selected) {\n                console.log(this.state);\n                [r, c] = this.state.board.toRowCol(i);\n                break;\n            }\n        }\n        r = (r + d_row + 9) % 9;\n        c = (c + d_col + 9) % 9;\n        this.select(this.state.board.toCellId(r, c));\n    }\n\n    // Handle keypress event on a cell.\n    handleKeyDown(e) {\n        console.log('handleKeyDown, keyCode = ' + e.keyCode);\n\n        let isShift = !!e.shiftKey;\n        let isMeta = !!e.metaKey;\n\n        // Pressed 1-9\n        if (e.keyCode >= KeyCode.KEY_1 && e.keyCode <= KeyCode.KEY_9) {\n            const value = String.fromCharCode(e.keyCode);\n            if (isShift) {\n                this.toggleCornerValuesOfSelectedCells(value)\n            } else if (isMeta) {\n                this.toggleCenterValuesOfSelectedCells(value);\n                e.preventDefault();\n            } else {\n                this.setValueOfSelectedCells(value);\n            }\n        }\n\n        switch (e.keyCode) {\n            case KeyCode.KEY_SPACE:\n                this.unsetSelectedCells();\n                break;\n            case KeyCode.KEY_BACK_SPACE:\n                this.unsetSelectedCells();\n                this.clearCornerValuesOfSelectedCells();\n                this.clearCenterValuesOfSelectedCells();\n                e.preventDefault();\n                break;\n            case KeyCode.KEY_DOWN:\n                this.moveSelection(+1, 0);\n                break;\n            case KeyCode.KEY_UP:\n                this.moveSelection(-1, 0);\n                break;\n            case KeyCode.KEY_LEFT:\n                this.moveSelection(0, -1);\n                break;\n            case KeyCode.KEY_RIGHT:\n                this.moveSelection(0, +1);\n                break;\n            case KeyCode.KEY_ESCAPE:\n                this.clearSelectionAndRestricted();\n                break;\n            case KeyCode.KEY_Z:\n            case KeyCode.KEY_U:\n                this.undo();\n                break;\n            case KeyCode.KEY_Y:\n            case KeyCode.KEY_R:\n                this.redo();\n                break;\n            default:\n        }\n    }\n\n    handleToggleHighlightRestricted() {\n        console.log('handleToggleHighlightRestricted');\n        let newControl = this.cloneControl();\n        newControl.toggleHighlightRestricted();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleHighlightMatchingNumbers() {\n        console.log('handleToggleHighlightMatchingNumbers');\n        let newControl = this.cloneControl();\n        newControl.toggleHighlightMatchingNumbers();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAutoCleanUp() {\n        console.log('handleToggleAutoCleanUp');\n        let newControl = this.cloneControl();\n        newControl.toggleAutoCleanUp();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAntiKnight() {\n        console.log('handleToggleAntiKnight');\n        let newControl = this.cloneControl();\n        newControl.toggleAntiKnight();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAntiKing() {\n        console.log('handleToggleAntiKing');\n        let newControl = this.cloneControl();\n        newControl.toggleAntiKing();\n        this.assignNewControl(newControl);\n    }\n\n    handleClickFillCenter() {\n        console.log('handleClickFillCenter');\n        let newBoard = this.cloneBoard();\n        newBoard.fillAllPossibleValues(this.state.control.gamePlay);\n        this.assignNewBoard(newBoard);\n    }\n\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.handleKeyDown(e)}\n                tabIndex=\"0\"\n                className=\"container\"\n                onMouseUp={() => this.handleMouseUp()}\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.state.board}\n                            onClick={(e, i) => this.handleClick(e, i)}\n                            onMouseDown={(e, i) => this.handleMouseDown(e, i)}\n                            onMouseOver={(i) => this.handleMouseOver(i)}\n                            highlightMatching={this.state.highlightMatching}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            control={this.state.control}\n                            onClickVerify={() => this.verifyBoard()}\n                            onClickUndo={() => this.undo()}\n                            onClickRedo={() => this.redo()}\n                            onToggleHighlightRestricted={() => this.handleToggleHighlightRestricted()}\n                            onToggleHighlightMatchingNumbers={() => this.handleToggleHighlightMatchingNumbers()}\n                            onToggleAutoCleanUp={() => this.handleToggleAutoCleanUp()}\n                            onToggleAntiKnight={() => this.handleToggleAntiKnight()}\n                            onToggleAntiKing={() => this.handleToggleAntiKing()}\n                            onClickFillCenters={() => this.handleClickFillCenter()}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}