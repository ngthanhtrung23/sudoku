{"version":3,"sources":["components/board/Cell.tsx","components/board/Board.tsx","actions/types.ts","components/control/DisplayOptions.tsx","actions/control.ts","components/control/GameOptions.tsx","components/control/Control.tsx","actions/history.ts","actions/board.ts","components/Game.tsx","actions/fill_center.ts","actions/verify.ts","models/control.ts","models/cell.ts","models/board.ts","models/history.ts","reducers/index.ts","reducers/board.ts","reducers/control.ts","reducers/history.ts","index.tsx"],"names":["Cell","this","props","cell","value","className","highlightMatching","sortedValues","Array","from","cornerValues","sort","map","classes","shouldHighlightMatching","key","id","centerValues","isRegionTop","push","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","selected","restricted","error","join","onClick","onMouseDown","onMouseOver","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","Board","i","board","cells","e","String","startingCell","renderCell","rows","renderRow","NO_OP","type","DisplayOptions","Form","Check","label","checked","highlightRestricted","onChange","updateDisplay","highlightMatchingNumbers","autoCleanUp","connector","connect","state","control","displayOptions","payload","GamePlay","antiKnight","updateGamePlay","antiKing","gamePlay","Control","Button","onClickVerify","onClickUndo","onClickRedo","onClickFillCenters","redo","history","boards","length","serialized","undo","updateBoard","select","cellId","clearSelection","setMultiSelect","newBoard","_","cloneDeep","multiSelectMode","clearAllSelections","clearAllRestricteds","setSelected","setRestricted","selectedValues","getSelectedValues","size","selectedValue","values","next","move","d_row","d_col","r","c","toRowCol","toCellId","Game","onKeyDown","keyDown","tabIndex","onMouseUp","mouseUp","metaKey","mouseDown","mouseOver","verify","fillCenter","isShift","shiftKey","isMeta","keyCode","KeyCode","fromCharCode","newValue","toggleCornerValuesOfSelectedCells","toggleCornerValues","preventDefault","toggleCenterValuesOfSelectedCells","toggleCenterValues","clearAllErrors","setValueOfSelectedCells","setValue","unsetSelectedCells","unsetValue","clearCornerValuesOfSelectedCells","clearCenterValuesOfSelectedCells","pressBackspace","pressEsc","Object","assign","fillAllPossibleValues","invalidCellIds","getInvalidCellIds","setErrors","alert","ControlModel","CellModel","row","col","Set","set_intersection","a","b","filter","x","has","BoardModel","result","forEach","JSON","stringify","obj","parse","getRegionByPosition","col2","add","row2","region","getRegion","di","dj","isInside","delete","myValue","getVisibleCells","neighborId","seenValues","getPossibleValues","cellIds","autoCleanup","clear","HistoryModel","serialize","combineReducers","action","load","slice","assert","isMouseDown","ReactDOM","render","store","createStore","reducers","document","getElementById"],"mappings":"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","file":"static/js/main.7a81d3de.chunk.js","sourcesContent":["import React from 'react';\n\nimport { CellModel, CellValue } from '../../models/cell';\n\ntype CellProps = {\n    cell: CellModel,\n    onClick: (e: any) => void,\n    onMouseDown: (e: any) => void,\n    onMouseOver: (e: any) => void,\n    key: string,\n    highlightMatching: CellValue,\n};\n\nclass Cell extends React.Component<CellProps> {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    shouldHighlightMatching(value: CellValue) {\n        return this.props.highlightMatching && value === this.props.highlightMatching;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"corner-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span\n                        className={classes}\n                        key={\"center-\" + this.props.cell.id + \"-\" + value}\n                    >\n                        {value}\n                    </span>\n                );\n            });\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        } else if (this.shouldHighlightMatching(this.props.cell.value)) {\n            classes.push('matching');\n        } else if (this.props.cell.restricted) {\n            classes.push('restricted');\n        }\n        if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                onMouseDown={this.props.onMouseDown}\n                onMouseOver={this.props.onMouseOver}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nexport default Cell;\n","import React from 'react';\n\nimport Cell from './Cell';\nimport { BoardModel } from '../../models/board';\n\nclass Board extends React.Component<BoardProps> {\n    renderCell(i: number) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                onMouseDown={(e) => this.props.onMouseDown(e, i)}\n                onMouseOver={() => this.props.onMouseOver(i)}\n                key={String(i)}\n                highlightMatching={this.props.board.highlightMatching}\n            />\n        );\n    }\n\n    renderRow(startingCell: number) {\n        let cells = [];\n        for (let i = startingCell; i < startingCell + 9; i++) {\n            cells.push(this.renderCell(i));\n        }\n        return (\n            <div className=\"row\" key={startingCell}>\n                {cells}\n            </div>\n        );\n    }\n\n    render() {\n        let rows = [];\n        for (let i = 0; i < 81; i += 9) {\n            rows.push(this.renderRow(i));\n        }\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\ntype BoardProps = {\n    board: BoardModel,\n    onClick: (e: any, i: number) => void,\n    onMouseDown: (e: any, i: number) => void,\n    onMouseOver: (i: number) => void,\n};\n\n\nexport default Board;\n","import { BoardModel } from '../models/board';\nimport { DisplayOptions, GameOptions } from '../models/control';\n\nexport const ACTION_NO_OP = 'ACTION_NO_OP';\nexport interface NoOpAction {\n    type: typeof ACTION_NO_OP,\n};\nexport const NO_OP: NoOpAction = { type: ACTION_NO_OP };\n\n// Board actions.\nexport const ACTION_UPDATE_BOARD = 'ACTION_UPDATE_BOARD';\n\nexport interface UpdateBoardAction {\n    type: typeof ACTION_UPDATE_BOARD,\n    payload: {\n        board: BoardModel,\n    },\n};\n\n// Control actions.\nexport const ACTION_UPDATE_DISPLAY = 'ACTION_UPDATE_DISPLAY';\nexport const ACTION_UPDATE_GAME_PLAY = 'ACTION_UPDATE_GAME_PLAY';\n\ninterface UpdateDisplayAction {\n    type: typeof ACTION_UPDATE_DISPLAY,\n    payload: DisplayOptions,\n};\n\ninterface UpdateGamePlayAction {\n    type: typeof ACTION_UPDATE_GAME_PLAY,\n    payload: GameOptions,\n}\n\n// History actions.\nexport const ACTION_REDO = 'ACTION_REDO';\nexport const ACTION_UNDO = 'ACTION_UNDO';\n\nexport interface RedoAction {\n    type: typeof ACTION_REDO,\n    payload: {\n        serialized: string,\n    },\n};\nexport interface UndoAction {\n    type: typeof ACTION_UNDO,\n    payload: {\n        serialized: string,\n    },\n};\n\n// Combine all action types.\nexport type ActionTypes = NoOpAction\n    | UpdateBoardAction\n    | UpdateDisplayAction | UpdateGamePlayAction\n    | RedoAction | UndoAction;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { updateDisplay } from '../../actions/control';\nimport { GameState } from '../Game';\n\nclass DisplayOptions extends React.Component<DisplayOptionsProps> {\n    render() {\n        return (\n            <div id=\"display-options\">\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.highlightRestricted}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightRestricted: !this.props.highlightRestricted\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-matching-numbers'\n                    label='Highlight matching numbers'\n                    checked={this.props.highlightMatchingNumbers}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        highlightMatchingNumbers: !this.props.highlightMatchingNumbers\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-auto-cleanup'\n                    label='Auto Cleanup corner &amp; center values'\n                    checked={this.props.autoCleanUp}\n                    onChange={() => this.props.updateDisplay({\n                        ...this.props,\n                        autoCleanUp: !this.props.autoCleanUp\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.displayOptions};\n};\n\nconst connector = connect(mapStateToProps, { updateDisplay });\n\ntype DisplayOptionsProps = ConnectedProps<typeof connector>;\n\nexport default connector(DisplayOptions);\n","import { ACTION_UPDATE_DISPLAY, ACTION_UPDATE_GAME_PLAY as ACTION_UPDATE_GAME_OPTIONS, ActionTypes } from './types';\nimport { DisplayOptions, GameOptions } from '../models/control';\n\n\nexport const updateDisplay = (displayOptions: DisplayOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_DISPLAY,\n        payload: displayOptions,\n    };\n};\n\nexport const updateGameOptions = (gamePlay: GameOptions): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_GAME_OPTIONS,\n        payload: gamePlay,\n    }\n};\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { updateGameOptions } from '../../actions/control';\nimport { GameState } from '../Game';\n\nclass GamePlay extends React.Component<GamePlayProps> {\n    render() {\n        return (\n            <div id=\"game-play\">\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label='Anti Knight'\n                    checked={this.props.antiKnight}\n                    onChange={() => this.props.updateGamePlay({\n                        ...this.props,\n                        antiKnight: !this.props.antiKnight\n                    })}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label='Anti King'\n                    checked={this.props.antiKing}\n                    onChange={() => this.props.updateGamePlay({\n                        ...this.props,\n                        antiKing: !this.props.antiKing\n                    })}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state.control.gamePlay};\n};\n\nconst connector = connect(mapStateToProps, { updateGamePlay: updateGameOptions });\n\ntype GamePlayProps = ConnectedProps<typeof connector>;\n\nexport default connector(GamePlay);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nimport DisplayOptions from './DisplayOptions';\nimport GamePlay from './GameOptions';\n\nclass Control extends React.Component<ControlProps> {\n    render() {\n        return (\n            <Form>\n                <div className=\"\">\n                    <Button onClick={this.props.onClickVerify}>\n                        Verify\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickUndo}\n                        className=\"btn-secondary\"\n                    >\n                        Undo\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickRedo}\n                        className=\"btn-secondary\"\n                    >\n                        Redo\n                    </Button>\n                </div>\n                <hr/>\n                <DisplayOptions />\n                <hr/>\n                <GamePlay />\n                <hr/>\n                <h4>Help</h4>\n                <Button\n                    onClick={this.props.onClickFillCenters}\n                    className=\"btn-secondary\"\n                >\n                    Fill all center values\n                </Button>\n            </Form>\n        );\n    }\n}\n\ntype ControlProps = {\n    onClickVerify: () => void,\n    onClickUndo: () => void,\n    onClickRedo: () => void,\n\n    onClickFillCenters: () => void,\n};\n\nexport default Control;\n","import { ACTION_REDO, ACTION_UNDO, NO_OP, ActionTypes } from './types';\nimport { HistoryModel } from '../models/history';\n\n\nexport const redo = (history: HistoryModel): ActionTypes => {\n    if (history.id >= history.boards.length - 1) {\n        // Nothing to redo.\n        return NO_OP;\n    }\n    return {\n        type: ACTION_REDO,\n        payload: {\n            serialized: history.boards[history.id + 1],\n        },\n    };\n};\n\nexport const undo = (history: HistoryModel): ActionTypes => {\n    if (history.id === 0) {\n        // Nothing to do.\n        return NO_OP;\n    }\n    return {\n        type: ACTION_UNDO,\n        payload: {\n            serialized: history.boards[history.id - 1],\n        },\n    };\n};\n","import * as KeyCode from 'keycode-js';\nimport _ from 'lodash';\n\nimport { ACTION_UPDATE_BOARD, NO_OP, ActionTypes } from './types';\nimport { undo, redo } from './history';\nimport { BoardModel } from '../models/board';\nimport { CellValue } from '../models/cell';\nimport { ControlModel } from '../models/control';\nimport { HistoryModel } from '../models/history';\n\nexport const updateBoard = (board: BoardModel): ActionTypes => {\n    return {\n        type: ACTION_UPDATE_BOARD,\n        payload: {\n            board: board,\n        }\n    };\n};\n\nconst pressEsc = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllSelections();\n    newBoard.clearAllRestricteds();\n    newBoard.highlightMatching = null;\n    return updateBoard(newBoard);\n}\n\nexport const select = (\n        board: BoardModel,\n        control: ControlModel,\n        cellId: number,\n        clearSelection: boolean = true,\n        setMultiSelect: boolean | null = null\n        ): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    if (setMultiSelect !== null) {\n        newBoard.multiSelectMode = setMultiSelect;\n    }\n\n    if (clearSelection) {\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n        newBoard.highlightMatching = null;\n    } else {\n        newBoard.clearAllRestricteds();\n    }\n\n    newBoard.setSelected(cellId);\n\n    if (control.displayOptions.highlightRestricted) {\n        newBoard.setRestricted(control.gamePlay);\n    }\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n\n    return updateBoard(newBoard);\n}\n\nexport const mouseDown = (board: BoardModel, control: ControlModel, cellId: number, clearSelection: boolean): ActionTypes => {\n    return select(board, control, cellId, clearSelection, true);\n}\n\nexport const mouseOver = (board: BoardModel, control: ControlModel, cellId: number): ActionTypes => {\n    if (!board.multiSelectMode) {\n        return NO_OP;\n    }\n    return select(board, control, cellId, false);\n}\n\nexport const mouseUp = (board: BoardModel): ActionTypes => {\n    return updateBoard(Object.assign(board, { multiSelectMode: false}));\n}\n\nconst setValue = (board: BoardModel, control: ControlModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.setValueOfSelectedCells(\n        newValue,\n        control.gamePlay,\n        control.displayOptions.autoCleanUp);\n\n    if (control.displayOptions.highlightMatchingNumbers) {\n        newBoard.highlightMatching = null;\n\n        const selectedValues = newBoard.getSelectedValues();\n        if (selectedValues.size === 1) {\n            const selectedValue = selectedValues.values().next().value;\n            newBoard.highlightMatching = selectedValue;\n        }\n    }\n    return updateBoard(newBoard);\n};\n\nconst unsetValue = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.unsetSelectedCells();\n\n    return updateBoard(newBoard);\n};\n\nconst toggleCornerValues = (board: BoardModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n    return updateBoard(newBoard);\n}\n\nconst toggleCenterValues = (board: BoardModel, newValue: CellValue): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.toggleCenterValuesOfSelectedCells(newValue);\n    return updateBoard(newBoard);\n}\n\n// Move selected cell in direction (d_row, d_col).\n// If there are more than one selected cells, only move the first one.\nconst move = (board: BoardModel, control: ControlModel, d_row: number, d_col: number): ActionTypes => {\n    let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n    for (let i = 0; i < 81; i++) {\n        if (board.cells[i].selected) {\n            [r, c] = board.toRowCol(i);\n            break;\n        }\n    }\n    r = (r + d_row + 9) % 9;\n    c = (c + d_col + 9) % 9;\n    return select(board, control, board.toCellId(r, c));\n}\n\nconst pressBackspace = (board: BoardModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n\n    newBoard.clearAllErrors();\n    newBoard.unsetSelectedCells();\n\n    newBoard.clearCornerValuesOfSelectedCells();\n    newBoard.clearCenterValuesOfSelectedCells();\n\n    return updateBoard(newBoard);\n}\n\nexport const keyDown = (board: BoardModel, control: ControlModel, history: HistoryModel, e: any): ActionTypes => {\n    let isShift = !!e.shiftKey;\n    let isMeta = !!e.metaKey;\n\n    // Pressed 1-9\n    if (e.keyCode >= KeyCode.KEY_1 && e.keyCode <= KeyCode.KEY_9) {\n        const value = String.fromCharCode(e.keyCode) as CellValue;\n        if (isShift) {\n            return toggleCornerValues(board, value)\n        } else if (isMeta) {\n            e.preventDefault();\n            return toggleCenterValues(board, value);\n        } else {\n            return setValue(board, control, value);\n        }\n    }\n\n    switch (e.keyCode) {\n        case KeyCode.KEY_SPACE:\n            return unsetValue(board);\n        case KeyCode.KEY_BACK_SPACE:\n            e.preventDefault();\n            return pressBackspace(board);\n        case KeyCode.KEY_DOWN:\n            return move(board, control, +1, 0);\n        case KeyCode.KEY_UP:\n            return move(board, control, -1, 0);\n        case KeyCode.KEY_LEFT:\n            return move(board, control, 0, -1);\n        case KeyCode.KEY_RIGHT:\n            return move(board, control, 0, +1);\n        case KeyCode.KEY_ESCAPE:\n            return pressEsc(board);\n        case KeyCode.KEY_Z:\n        case KeyCode.KEY_U:\n            return undo(history);\n        case KeyCode.KEY_Y:\n        case KeyCode.KEY_R:\n            return redo(history);\n        default:\n    }\n    return NO_OP;\n}\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport Board from './board/Board';\nimport Control from './control/Control';\nimport { BoardModel } from '../models/board';\nimport { ControlModel } from '../models/control';\nimport { keyDown, mouseDown, mouseOver, mouseUp, select } from '../actions/board';\nimport { fillCenter } from '../actions/fill_center';\nimport { redo, undo } from '../actions/history';\nimport { verify } from '../actions/verify';\nimport { HistoryModel } from '../models/history';\n\nexport type GameState = {\n    board: BoardModel,\n    control: ControlModel,\n    history: HistoryModel,\n};\n\nclass Game extends React.Component<GameProps, GameState> {\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.props.keyDown(this.props.board, this.props.control, this.props.history, e)}\n                tabIndex={0}\n                className=\"container\"\n                onMouseUp={() => this.props.mouseUp(this.props.board)}\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.props.board}\n                            onClick={(e, id) => this.props.select(this.props.board, this.props.control, id, !e.metaKey)}\n                            onMouseDown={(e, id) => this.props.mouseDown(this.props.board, this.props.control, id, !e.metaKey)}\n                            onMouseOver={(id) => this.props.mouseOver(this.props.board, this.props.control, id)}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            onClickVerify={() => this.props.verify(this.props.board, this.props.control)}\n                            onClickUndo={() => this.props.undo(this.props.history)}\n                            onClickRedo={() => this.props.redo(this.props.history)}\n                            onClickFillCenters={() => this.props.fillCenter(this.props.board, this.props.control)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GameState) => {\n    return {...state};\n};\n\nconst connector = connect(mapStateToProps, {\n    // history actions.\n    redo: redo,\n    undo: undo,\n\n    // board actions.\n    keyDown: keyDown,\n    mouseDown: mouseDown,\n    mouseOver: mouseOver,\n    mouseUp: mouseUp,\n    select: select,\n\n    // control actions.\n    fillCenter: fillCenter,\n    verify: verify,\n});\n\ntype GameProps = ConnectedProps<typeof connector>;\n\nexport default connector(Game);\n","import _ from 'lodash';\n\nimport { ActionTypes } from './types';\nimport { BoardModel } from '../models/board';\nimport { ControlModel } from '../models/control';\nimport { updateBoard } from './board';\n\nexport const fillCenter = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.fillAllPossibleValues(control.gamePlay);\n    return updateBoard(newBoard);\n}\n","import _ from 'lodash';\n\nimport { ActionTypes } from './types';\nimport { BoardModel } from '../models/board';\nimport { ControlModel } from '../models/control';\nimport { updateBoard } from './board';\n\nexport const verify = (board: BoardModel, control: ControlModel): ActionTypes => {\n    let newBoard = _.cloneDeep(board);\n    newBoard.clearAllErrors();\n    let invalidCellIds = newBoard.getInvalidCellIds(control.gamePlay);\n    newBoard.setErrors(invalidCellIds);\n\n    alert(invalidCellIds.size > 0 ? 'Error found :(' : 'LGTM!');\n    return updateBoard(newBoard);\n}\n","export type GameOptions = {\n    antiKnight: boolean;\n    antiKing: boolean;\n};\n\nexport type DisplayOptions = {\n    highlightRestricted: boolean;\n    highlightMatchingNumbers: boolean;\n    autoCleanUp: boolean;\n};\n\nexport class ControlModel {\n    displayOptions: DisplayOptions;\n    gamePlay: GameOptions;\n\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n            highlightMatchingNumbers: false,\n            autoCleanUp: false,\n        };\n        this.gamePlay = {\n            antiKnight: false,\n            antiKing: false,\n        };\n    }\n}\n","export type CellValue = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | null;\n\nexport class CellModel {\n    value: CellValue;\n    cornerValues: Set<CellValue>;\n    centerValues: Set<CellValue>;\n    selected: boolean;\n    restricted: boolean;\n    error: boolean;\n    row: number;\n    col: number;\n    id: number;\n\n    constructor(id: number) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop(): boolean {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom(): boolean {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft(): boolean {\n        return this.col % 3 === 0;\n    }\n    isRegionRight(): boolean {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop(): boolean {\n        return this.row === 0;\n    }\n    isBoardBottom(): boolean {\n        return this.row === 8;\n    }\n    isBoardLeft(): boolean {\n        return this.col === 0;\n    }\n    isBoardRight(): boolean {\n        return this.col === 8;\n    }\n}\n","import { CellModel, CellValue } from './cell';\nimport { GameOptions } from './control';\n\nfunction set_intersection(a: Set<any>, b: Set<any>) {\n    return new Set([...a].filter(x => b.has(x)));\n}\n\nfunction set_difference(a: Set<any>, b: Set<any>) {\n    return new Set([...a].filter(x => !b.has(x)));\n}\n\nclass BoardModel {\n    cells: Array<CellModel>;\n    highlightMatching: CellValue;\n    multiSelectMode: boolean;\n\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n        this.highlightMatching = null;\n        this.multiSelectMode = false;\n    }\n\n    serialize(): string {\n        let result: Array<{\n            value: CellValue;\n            cornerValues: Array<CellValue>;\n            centerValues: Array<CellValue>;\n        }> = [];\n\n        this.cells.forEach((cell) => {\n            result.push({\n                value: cell.value,\n                cornerValues: Array.from(cell.cornerValues),\n                centerValues: Array.from(cell.centerValues),\n            });\n        });\n        return JSON.stringify(result);\n    }\n\n    load(serialized: string): void {\n        this.clearAllErrors();\n        this.clearAllRestricteds();\n        this.clearAllSelections();\n\n        let obj = JSON.parse(serialized);\n        for (let i = 0; i < 81; i++) {\n            this.cells[i].value = obj[i].value;\n            this.cells[i].cornerValues = new Set(obj[i].cornerValues);\n            this.cells[i].centerValues = new Set(obj[i].centerValues);\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row: number, col: number): boolean {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row: number, col: number): number {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId: number): [number, number] {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row: number, col: number): number {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId: number): number {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId: number, gamePlay: GameOptions): Set<number> {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result: Set<number> = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gamePlay.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gamePlay.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gamePlay: GameOptions): Set<number> {\n        let result: Set<number> = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gamePlay).forEach(neighborId => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    getPossibleValues(cellId: number, gamePlay: GameOptions): Set<CellValue> {\n        const seenValues = Array.from(this.getVisibleCells(cellId, gamePlay))\n            .map(neighborId => this.cells[neighborId].value)\n            .filter(x => x);\n\n        return set_difference(new Set(['1', '2', '3', '4', '5', '6', '7', '8', '9']), new Set(seenValues));\n    }\n\n    fillAllPossibleValues(gamePlay: GameOptions): void {\n        this.cells.forEach(cell => {\n            if (!cell.value) {\n                cell.centerValues = this.getPossibleValues(cell.id, gamePlay);\n            }\n        });\n    }\n\n    setSelected(cellId: number): void {\n        this.cells[cellId].selected = true;\n    }\n\n    getSelectedValues(): Set<CellValue> {\n        return new Set(\n            this.cells\n                .filter((cell) => cell.selected)\n                .filter((cell) => cell.value)\n                .map((cell) => cell.value)\n        );\n    }\n\n    setRestricted(gamePlay: GameOptions): void {\n        let restricted: Set<any> | null = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gamePlay);\n                } else {\n                    restricted = set_intersection(this.getVisibleCells(id, gamePlay), restricted);\n                }\n            }\n        }\n\n        if (restricted) {\n            restricted.forEach((cellId) => {\n                this.cells[cellId].restricted = true;\n            });\n        }\n    }\n\n    setErrors(cellIds: Set<number>): void {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSelectedCells(newValue: CellValue, gamePlay: GameOptions, autoCleanup: boolean = false): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = newValue;\n                if (autoCleanup) {\n                    this.getVisibleCells(cell.id, gamePlay).forEach((id) => {\n                        this.cells[id].cornerValues.delete(newValue);\n                        this.cells[id].centerValues.delete(newValue);\n                    });\n                }\n            }\n        });\n    }\n\n    unsetSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = null;\n            }\n        });\n    }\n\n    toggleCornerValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value: CellValue): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(): void {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections(): void {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds(): void {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors(): void {\n        this.cells.forEach((cell) => {\n            cell.error = false;\n        });\n    }\n}\n\nexport { BoardModel };\n","import { BoardModel } from \"./board\";\n\nexport class HistoryModel {\n    boards: Array<string>;\n    id: number;\n\n    constructor() {\n        this.boards = [];\n        this.id = 0;\n\n        const board = new BoardModel();\n        this.boards.push(board.serialize());\n    }\n}\n","import { combineReducers } from 'redux';\n\nimport { controlReducer } from './control';\nimport { boardReducer } from './board';\nimport { historyReducer } from './history';\n\nconst isMouseDownReducer = (isMouseDown = false) => {\n    return isMouseDown;\n}\n\nconst highlightMatchingReducer = (highlightMatching = null) => {\n    return highlightMatching;\n}\n\nexport default combineReducers({\n    board: boardReducer,\n    control: controlReducer,\n    history: historyReducer,\n    isMouseDown: isMouseDownReducer,\n    highlightMatching: highlightMatchingReducer,\n});\n","import { ActionTypes, ACTION_UPDATE_BOARD, ACTION_UNDO, ACTION_REDO } from '../actions/types';\nimport { BoardModel } from '../models/board';\n\nexport const boardReducer = (board = new BoardModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        return action.payload.board;\n    }\n    if (action.type === ACTION_UNDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n    if (action.type === ACTION_REDO) {\n        const board = new BoardModel();\n        board.load(action.payload.serialized);\n        return board;\n    }\n\n    return board;\n}\n","import { ActionTypes, ACTION_UPDATE_DISPLAY, ACTION_UPDATE_GAME_PLAY } from '../actions/types';\nimport { ControlModel } from '../models/control';\n\nexport const controlReducer = (control: ControlModel = new ControlModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_DISPLAY) {\n        return {...control, displayOptions: action.payload};\n    }\n    if (action.type === ACTION_UPDATE_GAME_PLAY) {\n        return {...control, gamePlay: action.payload};\n    }\n    return control;\n};\n","import assert from 'assert';\nimport { ActionTypes, ACTION_UPDATE_BOARD, ACTION_UNDO, ACTION_REDO } from '../actions/types';\nimport { HistoryModel } from '../models/history';\n\nexport const historyReducer = (history = new HistoryModel(), action: ActionTypes) => {\n    if (action.type === ACTION_UPDATE_BOARD) {\n        const serialized = action.payload.board.serialize();\n\n        // Only update history if the serialized new board is different.\n        // Thus, we ignore all selections and restrictions.\n        if (serialized !== history.boards[history.id]) {\n            // Remove the rest of history.\n            // This clean data in case we do lots of undo, and then make a new move.\n            history.boards = history.boards.slice(0, history.id + 1);\n\n            // Update history.\n            history.boards.push(serialized);\n            history.id += 1;\n        }\n        return history;\n    }\n    if (action.type === ACTION_UNDO) {\n        assert(history.id > 0);\n        return {...history, id: history.id - 1 };\n    }\n    if (action.type === ACTION_REDO) {\n        assert(history.id + 1 < history.boards.length);\n        return {...history, id: history.id + 1 };\n    }\n    return history;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport Game from './components/Game';\nimport reducers from './reducers';\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={createStore(reducers)}>\n        <Game />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}