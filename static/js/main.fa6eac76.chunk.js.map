{"version":3,"sources":["board.js","control.js","data.js","index.js"],"names":["Cell","this","props","cell","value","className","classes","isRegionTop","push","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","selected","restricted","error","join","onClick","key","id","renderCellMainValue","React","Component","Board","i","board","cells","startingCell","renderCell","rows","renderRow","Control","Button","onClickVerify","CellData","cornerValues","Set","centerValues","row","col","BoardData","ControlData","highlightRestricted","GameData","control","cellId","toRowCol","getRegionByPosition","result","col2","add","toCellId","row2","region","getRegion","delete","Game","state","newGame","_","clone","Object","setPrototypeOf","prototype","console","log","cloneState","getVisibleCells","forEach","setState","newValue","clearAllError","hasError","myValue","neighborId","alert","e","keyCode","fillSelectedWithValue","String","fromCharCode","unfillSelected","onKeyDown","handleKeyDown","tabIndex","handleClick","verifyBoard","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa6eac76.chunk.js","sourcesContent":["import React from 'react';\n\nclass Cell extends React.Component {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        }\n        if (this.props.cell.restricted) {\n            classes.push('restricted');\n        }\n        if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n            </div>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    renderCell(i) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={() => this.props.onClick(i)}\n                key={i}\n            />\n        );\n    }\n\n    renderRow(startingCell) {\n        let cells = [];\n        for (let i = startingCell; i < startingCell + 9; i++) {\n            cells.push(this.renderCell(i));\n        }\n        return (\n            <div className=\"row\" key={startingCell}>\n                {cells}\n            </div>\n        );\n    }\n\n    render() {\n        let rows = [];\n        for (let i = 0; i < 81; i += 9) {\n            rows.push(this.renderRow(i));\n        }\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\nexport { Board };\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nclass Control extends React.Component {\n    render() {\n        return (\n            <Button onClick={this.props.onClickVerify}>\n                Verify\n            </Button>\n        );\n    }\n}\n\nexport { Control };\n","class CellData {\n    constructor(id) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop() {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom() {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft() {\n        return this.col % 3 === 0;\n    }\n    isRegionRight() {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop() {\n        return this.row === 0;\n    }\n    isBoardBottom() {\n        return this.row === 8;\n    }\n    isBoardLeft() {\n        return this.col === 0;\n    }\n    isBoardRight() {\n        return this.col === 8;\n    }\n}\n\nclass BoardData {\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellData(i));\n        }\n    }\n}\n\nclass ControlData {\n    constructor() {\n        this.highlightRestricted = true;\n    }\n}\n\nclass GameData {\n    constructor() {\n        this.board = new BoardData();\n        this.control = new ControlData();\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row, col) {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row, col) {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId) {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row, col) {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId) {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /** Return set of cells visible from a single cell, not including that cell. */\n    getVisibleCells(cellId) {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n}\n\nexport { CellData, BoardData, GameData };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\n\nimport { Board } from './board.js';\nimport { Control } from './control.js';\nimport { GameData } from './data.js';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = new GameData();\n    }\n    \n    cloneState() {\n        let newGame = _.clone(this.state, true);\n        Object.setPrototypeOf(newGame, GameData.prototype);\n        return newGame;\n    }\n\n    // Handle clicking on a cell.\n    handleClick(cellId) {\n        console.log('handleClick ' + cellId);\n        // Clear all highlighting in the board.\n        let newGame = this.cloneState();\n\n        for (let i = 0; i < 81; i++) {\n            newGame.board.cells[i].selected = false;\n        }\n\n        // Select new cell.\n        newGame.board.cells[cellId].selected = true;\n\n        // Clear all previously restricted cells.\n        for (let i = 0; i < 81; i++) {\n            newGame.board.cells[i].restricted = false;\n        }\n\n        // Update restricted cells.\n        newGame.getVisibleCells(cellId).forEach((id) => {\n            newGame.board.cells[id].restricted = true;\n        });\n\n        this.setState(newGame);\n    }\n\n    fillSelectedWithValue(newValue) {\n        console.log('fillSelectedWithValue ' + newValue);\n        this.clearAllError();\n        let newGame = this.cloneState();\n        for (let i = 0; i < 81; i++) {\n            if (newGame.board.cells[i].selected) {\n                newGame.board.cells[i].value = newValue;\n            }\n        }\n        this.setState(newGame);\n    }\n\n    unfillSelected() {\n        console.log('unfillSelected');\n        this.clearAllError();\n        let newGame = this.cloneState();\n        for (let i = 0; i < 81; i++) {\n            if (newGame.board.cells[i].selected) {\n                newGame.board.cells[i].value = null;\n            }\n        }\n        this.setState(newGame);\n    }\n\n    clearAllError() {\n        console.log('clearAllError');\n        let newGame = this.cloneState();\n        for (let i = 0; i < 81; i++) {\n            newGame.board.cells[i].error = false;\n        }\n        console.log(newGame);\n        this.setState(newGame);\n    }\n\n    verifyBoard() {\n        console.log('verifyBoard');\n        let newGame = this.cloneState();\n        let hasError = false;\n        for (let i = 0; i < 81; i++) {\n            const myValue = newGame.board.cells[i].value;\n            if (myValue) {\n                newGame.getVisibleCells(i).forEach((neighborId) => {\n                    if (myValue === newGame.board.cells[neighborId].value) {\n                        newGame.board.cells[i].error = true;\n                        newGame.board.cells[neighborId].error = true;\n                        hasError = true;\n                    }\n                })\n            }\n        }\n        this.setState(newGame);\n\n        alert(hasError ? 'Error found :(' : 'LGTM!');\n    }\n\n    // Handle keypress event on a cell.\n    handleKeyDown(e) {\n        console.log('handleKeyDown, keyCode = ' + e.keyCode);\n        // Pressed 1-9\n        if (e.keyCode >= 49 && e.keyCode <= 57) {\n            this.fillSelectedWithValue(String.fromCharCode(e.keyCode));\n        }\n        // Press space\n        if (e.keyCode === 32) {\n            this.unfillSelected();\n        }\n    }\n\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.handleKeyDown(e)}\n                tabIndex=\"0\"\n                className=\"container\"\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.state.board}\n                            onClick={(i) => this.handleClick(i)}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            onClickVerify={() => this.verifyBoard()}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}