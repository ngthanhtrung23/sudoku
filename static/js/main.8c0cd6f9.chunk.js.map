{"version":3,"sources":["data.js","index.js"],"names":["CellData","id","this","value","cornerValues","Set","centerValues","selected","row","col","BoardData","cells","i","push","GameData","board","Cell","props","cell","className","classes","isRegionTop","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","join","onClick","key","renderCellMainValue","React","Component","Board","startingCell","renderCell","rows","renderRow","Game","state","cellId","newGame","setState","newValue","e","console","log","keyCode","fillSelectedWithValue","String","fromCharCode","onKeyDown","handleKeyDown","tabIndex","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c0cd6f9.chunk.js","sourcesContent":["class CellData {\n    constructor(id) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop() {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom() {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft() {\n        return this.col % 3 === 0;\n    }\n    isRegionRight() {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop() {\n        return this.row === 0;\n    }\n    isBoardBottom() {\n        return this.row === 8;\n    }\n    isBoardLeft() {\n        return this.col === 0;\n    }\n    isBoardRight() {\n        return this.col === 8;\n    }\n}\n\nclass BoardData {\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellData(i));\n        }\n    }\n}\n\nclass GameData {\n    constructor() {\n        this.board = new BoardData();\n    }\n}\n\nexport { CellData, BoardData, GameData };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './data.js';\nimport './index.css';\nimport { GameData } from './data.js';\n\nclass Cell extends React.Component {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n            </div>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    renderCell(i) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={() => this.props.onClick(i)}\n                key={i}\n            />\n        );\n    }\n\n    renderRow(startingCell) {\n        let cells = [];\n        for (let i = startingCell; i < startingCell + 9; i++) {\n            cells.push(this.renderCell(i));\n        }\n        return (\n            <div className=\"row\" key={startingCell}>\n                {cells}\n            </div>\n        );\n    }\n\n    render() {\n        let rows = [];\n        for (let i = 0; i < 81; i += 9) {\n            rows.push(this.renderRow(i));\n        }\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = new GameData();\n    }\n\n    // Handle clicking on a cell.\n    handleClick(cellId) {\n        // Clear all highlighting in the board.\n        let newGame = this.state;\n        for (let i = 0; i < 81; i++) {\n            newGame.board.cells[i].selected = false;\n        }\n\n        // Select new cell.\n        newGame.board.cells[cellId].selected = true;\n\n        this.setState(newGame);\n    }\n\n    fillSelectedWithValue(newValue) {\n        let newGame = this.state;\n        for (let i = 0; i < 81; i++) {\n            if (newGame.board.cells[i].selected) {\n                newGame.board.cells[i].value = newValue;\n            }\n        }\n        this.setState(newGame);\n    }\n\n    // Handle keypress event on a cell.\n    handleKeyDown(e) {\n        console.log('keyCode = ' + e.keyCode);\n        // Pressed 1-9\n        if (e.keyCode >= 49 && e.keyCode <= 57) {\n            this.fillSelectedWithValue(String.fromCharCode(e.keyCode));\n        }\n    }\n\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.handleKeyDown(e)}\n                tabIndex=\"0\"\n            >\n                <h1>Sudoku Tool</h1>\n                <Board\n                    board={this.state.board}\n                    onClick={(i) => this.handleClick(i)}\n                />\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}