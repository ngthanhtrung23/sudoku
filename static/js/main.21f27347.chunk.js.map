{"version":3,"sources":["board.js","control.js","models/cellModel.js","models/boardModel.js","models/controlModel.js","index.js"],"names":["Cell","this","props","cell","value","className","highlightMatching","sortedValues","Array","from","cornerValues","sort","map","classes","shouldHighlightMatching","centerValues","isRegionTop","push","isRegionLeft","isBoardLeft","isBoardRight","isBoardTop","isBoardBottom","selected","restricted","error","join","onClick","onMouseDown","onMouseOver","key","id","renderCellMainValue","renderCellCornerValues","renderCellCenterValues","React","Component","Board","i","board","cells","e","startingCell","renderCell","rows","renderRow","Control","Form","Button","onClickVerify","onClickUndo","onClickRedo","Check","type","label","checked","control","displayOptions","highlightRestricted","onChange","onToggleHighlightRestricted","highlightMatchingNumbers","onToggleHighlightMatchingNumbers","autoCleanUp","onToggleAutoCleanUp","gamePlay","antiKnight","onToggleAntiKnight","antiKing","onToggleAntiKing","CellModel","Set","row","col","set_intersection","a","b","filter","x","has","BoardModel","result","forEach","JSON","stringify","serialized","clearAllErrors","clearAllRestricteds","clearAllSelections","obj","parse","cellId","toRowCol","getRegionByPosition","col2","add","toCellId","row2","region","getRegion","di","dj","isInside","delete","myValue","getVisibleCells","neighborId","cellIds","newValue","autoCleanup","clear","ControlModel","Game","state","history","historyId","isMouseDown","serialize","_","clone","slice","setState","load","length","console","log","newBoard","cloneBoard","assignNewBoard","clearSelection","clearSelectionAndRestricted","setSelected","setRestricted","selectedValues","size","selectedValue","values","next","select","metaKey","clearAllError","setValueOfSelectedCells","unsetSelectedCells","toggleCornerValuesOfSelectedCells","clearCornerValuesOfSelectedCells","toggleCenterValuesOfSelectedCells","clearCenterValuesOfSelectedCells","invalidCellIds","getInvalidCellIds","setErrors","alert","d_row","d_col","r","c","keyCode","isShift","shiftKey","isMeta","KeyCode","String","fromCharCode","preventDefault","moveSelection","undo","redo","newControl","cloneControl","toggleHighlightRestricted","assignNewControl","toggleHighlightMatchingNumbers","toggleAutoCleanUp","toggleAntiKnight","toggleAntiKing","onKeyDown","handleKeyDown","tabIndex","onMouseUp","handleMouseUp","handleClick","handleMouseDown","handleMouseOver","verifyBoard","handleToggleHighlightRestricted","handleToggleHighlightMatchingNumbers","handleToggleAutoCleanUp","handleToggleAntiKnight","handleToggleAntiKing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.21f27347.chunk.js","sourcesContent":["import React from 'react';\n\nclass Cell extends React.Component {\n    renderCellMainValue() {\n        if (this.props.cell.value) {\n            return (\n                <span className=\"cell-main-value\">\n                    {this.props.cell.value}\n                </span>\n            );\n        }\n        return;\n    }\n\n    shouldHighlightMatching(value) {\n        return this.props.highlightMatching && value === this.props.highlightMatching;\n    }\n\n    renderCellCornerValues() {\n        if (this.props.cell.value) {\n            // Do not show corner values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.cornerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span className={classes}>{value}</span>\n                );\n            });\n        return (\n            <span className=\"cell-corner-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    renderCellCenterValues() {\n        if (this.props.cell.value) {\n            // Do not show center values, if cell is filled.\n            return;\n        }\n        const sortedValues = Array.from(this.props.cell.centerValues)\n            .sort()\n            .map((value) => {\n                const classes = this.shouldHighlightMatching(value) ? 'matching' : '';\n                return (\n                    <span className={classes}>{value}</span>\n                );\n            });\n        return (\n            <span className=\"cell-center-value\">\n                {sortedValues}\n            </span>\n        );\n    }\n\n    render() {\n        let classes = ['cell'];\n\n        // Add border based on region position.\n        if (this.props.cell.isRegionTop()) {\n            classes.push('region-top');\n        }\n        if (this.props.cell.isRegionLeft()) {\n            classes.push('region-left');\n        }\n\n        // Add border based on board position.\n        if (this.props.cell.isBoardLeft()) {\n            classes.push('board-left');\n        }\n        if (this.props.cell.isBoardRight()) {\n            classes.push('board-right');\n        }\n        if (this.props.cell.isBoardTop()) {\n            classes.push('board-top');\n        }\n        if (this.props.cell.isBoardBottom()) {\n            classes.push('board-bottom');\n        }\n\n        // Add highlighting class.\n        if (this.props.cell.selected) {\n            classes.push('selected');\n        } else if (this.shouldHighlightMatching(this.props.cell.value)) {\n            classes.push('matching');\n        } else if (this.props.cell.restricted) {\n            classes.push('restricted');\n        }\n        if (this.props.cell.error) {\n            classes.push('error');\n        }\n\n        return (\n            <div\n                className={classes.join(' ')}\n                onClick={this.props.onClick}\n                onMouseDown={this.props.onMouseDown}\n                onMouseOver={this.props.onMouseOver}\n                key={this.props.cell.id}\n            >\n                {this.renderCellMainValue()}\n                {this.renderCellCornerValues()}\n                {this.renderCellCenterValues()}\n            </div>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    renderCell(i) {\n        return (\n            <Cell\n                cell={this.props.board.cells[i]}\n                onClick={(e) => this.props.onClick(e, i)}\n                onMouseDown={(e) => this.props.onMouseDown(e, i)}\n                onMouseOver={() => this.props.onMouseOver(i)}\n                key={i}\n                highlightMatching={this.props.highlightMatching}\n            />\n        );\n    }\n\n    renderRow(startingCell) {\n        let cells = [];\n        for (let i = startingCell; i < startingCell + 9; i++) {\n            cells.push(this.renderCell(i));\n        }\n        return (\n            <div className=\"row\" key={startingCell}>\n                {cells}\n            </div>\n        );\n    }\n\n    render() {\n        let rows = [];\n        for (let i = 0; i < 81; i += 9) {\n            rows.push(this.renderRow(i));\n        }\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nclass Control extends React.Component {\n    render() {\n        return (\n            <Form>\n                <div className=\"\">\n                    <Button onClick={this.props.onClickVerify}>\n                        Verify\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickUndo}\n                        className=\"btn-secondary\"\n                    >\n                        Undo\n                    </Button>\n                    &nbsp;\n                    <Button\n                        onClick={this.props.onClickRedo}\n                        className=\"btn-secondary\"\n                    >\n                        Redo\n                    </Button>\n                </div>\n                <hr/>\n                <h4>Display Options</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-restricted'\n                    label='Highlight restricted cells'\n                    checked={this.props.control.displayOptions.highlightRestricted}\n                    onChange={this.props.onToggleHighlightRestricted}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-highlight-matching-numbers'\n                    label='Highlight matching numbers'\n                    checked={this.props.control.displayOptions.highlightMatchingNumbers}\n                    onChange={this.props.onToggleHighlightMatchingNumbers}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-auto-cleanup'\n                    label='Auto Cleanup corner & center values'\n                    checked={this.props.control.displayOptions.autoCleanUp}\n                    onChange={this.props.onToggleAutoCleanUp}\n                />\n                <hr/>\n                <h4>Game Play</h4>\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-knight'\n                    label='Anti Knight'\n                    checked={this.props.control.gamePlay.antiKnight}\n                    onChange={this.props.onToggleAntiKnight}\n                />\n                <Form.Check\n                    type='checkbox'\n                    id='checkbox-anti-king'\n                    label='Anti King'\n                    checked={this.props.control.gamePlay.antiKing}\n                    onChange={this.props.onToggleAntiKing}\n                />\n            </Form>\n        );\n    }\n}\n\nexport default Control;\n","class CellModel {\n    constructor(id) {\n        this.value = null;\n        this.cornerValues = new Set();\n        this.centerValues = new Set();\n        this.selected = false;\n        this.restricted = false;\n        this.error = false;\n\n        this.row = ~~(id / 9);\n        this.col = id % 9;\n        this.id = id;\n    }\n\n    isRegionTop() {\n        return this.row % 3 === 0;\n    }\n    isRegionBottom() {\n        return this.row % 3 === 2;\n    }\n    isRegionLeft() {\n        return this.col % 3 === 0;\n    }\n    isRegionRight() {\n        return this.col % 3 === 2;\n    }\n\n    isBoardTop() {\n        return this.row === 0;\n    }\n    isBoardBottom() {\n        return this.row === 8;\n    }\n    isBoardLeft() {\n        return this.col === 0;\n    }\n    isBoardRight() {\n        return this.col === 8;\n    }\n}\n\nexport default CellModel;\n","import CellModel from './cellModel.js';\n\nfunction set_intersection(a, b) {\n    return new Set([...a].filter(x => b.has(x)));\n}\n\nclass BoardModel {\n    constructor() {\n        this.cells = [];\n        for (let i = 0; i < 81; i++) {\n            this.cells.push(new CellModel(i));\n        }\n    }\n\n    serialize() {\n        let result = [];\n        this.cells.forEach((cell) => {\n            result.push({\n                value: cell.value,\n                cornerValues: Array.from(cell.cornerValues),\n                centerValues: Array.from(cell.centerValues),\n            });\n        });\n        return JSON.stringify(result);\n    }\n\n    load(serialized) {\n        this.clearAllErrors();\n        this.clearAllRestricteds();\n        this.clearAllSelections();\n\n        let obj = JSON.parse(serialized);\n        for (let i = 0; i < 81; i++) {\n            this.cells[i].value = obj[i].value;\n            this.cells[i].cornerValues = new Set(obj[i].cornerValues);\n            this.cells[i].centerValues = new Set(obj[i].centerValues);\n        }\n    }\n\n    /** Check if a (row, col) is within the board. */\n    isInside(row, col) {\n        return 0 <= row && row < 9 && 0 <= col && col < 9;\n    }\n\n    toCellId(row, col) {\n        return row * 9 + col;\n    }\n\n    toRowCol(cellId) {\n        return [~~(cellId / 9), cellId % 9];\n    }\n\n    getRegionByPosition(row, col) {\n        const r = ~~(row / 3);\n        const c = ~~(col / 3);\n        return r * 3 + c;\n    }\n\n    getRegion(cellId) {\n        const [row, col] = this.toRowCol(cellId);\n        return this.getRegionByPosition(row, col);\n    }\n\n    /**\n     * Return set of cells visible from a single cell, not including\n     * that cell.\n     */\n    getVisibleCells(cellId, gamePlay) {\n        const [row, col] = this.toRowCol(cellId);\n\n        let result = new Set();\n\n        // Same row\n        for (let col2 = 0; col2 < 9; col2++) {\n            result.add(this.toCellId(row, col2));\n        }\n        // Same colum\n        for (let row2 = 0; row2 < 9; row2++) {\n            result.add(this.toCellId(row2, col));\n        }\n        // Same region\n        const region = this.getRegion(cellId);\n        for (let i = 0; i < 81; i++) {\n            if (this.getRegion(i) === region) {\n                result.add(i);\n            }\n        }\n\n        // Anti-knight\n        if (gamePlay.antiKnight) {\n            for (let di = -2; di <= 2; di++) {\n                for (let dj = -2; dj <= 2; dj++) {\n                    if (di*di + dj*dj === 5) {\n                        const row2 = row + di;\n                        const col2 = col + dj;\n                        if (this.isInside(row2, col2)) {\n                            result.add(this.toCellId(row2, col2));\n                        }\n                    }\n                }\n            }\n        }\n\n        // Anti-king\n        if (gamePlay.antiKing) {\n            for (let di = -1; di <= 1; di++) {\n                for (let dj = -1; dj <= 1; dj++) {\n                    const row2 = row + di;\n                    const col2 = col + dj;\n                    if (this.isInside(row2, col2)) {\n                        result.add(this.toCellId(row2, col2));\n                    }\n                }\n            }\n        }\n\n        // Do not include the same cell.\n        result.delete(cellId);\n        return result;\n    }\n\n    getInvalidCellIds(gamePlay) {\n        let result = new Set();\n        for (let i = 0; i < 81; i++) {\n            const myValue = this.cells[i].value;\n            if (myValue) {\n                this.getVisibleCells(i, gamePlay).forEach((neighborId) => {\n                    if (myValue === this.cells[neighborId].value) {\n                        result.add(i);\n                        result.add(neighborId);\n                    }\n                })\n            }\n        }\n        return result;\n    }\n\n    setSelected(cellId) {\n        this.cells[cellId].selected = true;\n    }\n\n    setRestricted(gamePlay) {\n        let restricted = null;\n\n        for (let id = 0; id < 81; id++) {\n            if (this.cells[id].selected) {\n                if (restricted === null) {\n                    restricted = this.getVisibleCells(id, gamePlay);\n                } else {\n                    restricted = set_intersection(this.getVisibleCells(id, gamePlay), restricted);\n                }\n            }\n        }\n\n        restricted.forEach((cellId) => {\n            this.cells[cellId].restricted = true;\n        })\n    }\n\n    setErrors(cellIds) {\n        cellIds.forEach((id) => {\n            this.cells[id].error = true;\n        });\n    }\n\n    setValueOfSelectedCells(newValue, gamePlay, autoCleanup = false) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = newValue;\n                if (autoCleanup) {\n                    this.getVisibleCells(cell.id, gamePlay).forEach((id) => {\n                        this.cells[id].cornerValues.delete(newValue);\n                        this.cells[id].centerValues.delete(newValue);\n                    });\n                }\n            }\n        });\n    }\n\n    unsetSelectedCells() {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.value = null;\n            }\n        });\n    }\n\n    toggleCornerValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.cornerValues.has(value)) {\n                    cell.cornerValues.delete(value);\n                } else {\n                    cell.cornerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCornerValuesOfSelectedCells() {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.cornerValues.clear();\n            }\n        })\n    }\n\n    toggleCenterValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                if (cell.centerValues.has(value)) {\n                    cell.centerValues.delete(value);\n                } else {\n                    cell.centerValues.add(value);\n                }\n            }\n        });\n    }\n\n    clearCenterValuesOfSelectedCells(value) {\n        this.cells.forEach((cell) => {\n            if (cell.selected) {\n                cell.centerValues.clear();\n            }\n        });\n    }\n\n    clearAllSelections() {\n        this.cells.forEach((cell) => {\n            cell.selected = false;\n        });\n    }\n\n    clearAllRestricteds() {\n        this.cells.forEach((cell) => {\n            cell.restricted = false;\n        });\n    }\n\n    clearAllErrors() {\n        this.cells.forEach((cell) => {\n            cell.error = false;\n        });\n    }\n}\n\nexport default BoardModel;\n","class ControlModel {\n    constructor() {\n        this.displayOptions = {\n            highlightRestricted: true,\n            highlightMatchingNumbers: false,\n            autoCleanUp: false,\n        };\n        this.gamePlay = {\n            antiKnight: false,\n            antiKing: false,\n        };\n    }\n\n    toggleHighlightRestricted() {\n        this.displayOptions.highlightRestricted = !this.displayOptions.highlightRestricted;\n    }\n\n    toggleHighlightMatchingNumbers() {\n        this.displayOptions.highlightMatchingNumbers = !this.displayOptions.highlightMatchingNumbers;\n    }\n\n    toggleAutoCleanUp() {\n        this.displayOptions.autoCleanUp = !this.displayOptions.autoCleanUp;\n    }\n\n    toggleAntiKnight() {\n        this.gamePlay.antiKnight = !this.gamePlay.antiKnight;\n    }\n\n    toggleAntiKing() {\n        this.gamePlay.antiKing = !this.gamePlay.antiKing;\n    }\n}\n\nexport default ControlModel;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport * as KeyCode from 'keycode-js';\n\nimport Board from './board.js';\nimport Control from './control.js';\nimport BoardModel from './models/boardModel.js';\nimport ControlModel from './models/controlModel.js';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            board: new BoardModel(),\n            control: new ControlModel(),\n            history: [],\n            historyId: 0,\n            isMouseDown: false,\n            highlightMatching: null,\n        };\n        // Assumption:\n        // board is equivalent to history[historyId] at all times.\n        this.state.history.push(this.state.board.serialize());\n    }\n    \n    cloneBoard() {\n        let newBoard = _.clone(this.state.board, true);\n        return newBoard;\n    }\n\n    cloneControl() {\n        let newControl = _.clone(this.state.control, true);\n        return newControl;\n    }\n\n    assignNewBoard(board) {\n        const serialized = board.serialize();\n        let history = this.state.history;\n        let historyId = this.state.historyId;\n\n        // Only update history if the serialized new board is different.\n        // Thus, we ignore all selections and restrictions.\n        if (serialized !== this.state.history[historyId]) {\n            // Remove the rest of history.\n            // This clean data in case we do lots of undo, and then make a new move.\n            history = _.slice(history, 0, historyId + 1);\n\n            // Update history.\n            history.push(serialized);\n            historyId += 1;\n        }\n\n        this.setState({\n            board: board,\n            history: history,\n            historyId: historyId,\n        });\n    }\n    \n    undo() {\n        if (this.state.historyId === 0) {\n            // Nothing to undo.\n            return;\n        }\n        let board = new BoardModel();\n        board.load(this.state.history[this.state.historyId - 1]);\n\n        this.setState({\n            board: board,\n            historyId: this.state.historyId - 1,\n        });\n    }\n\n    redo() {\n        if (this.state.historyId >= this.state.history.length - 1) {\n            // Nothing to redo.\n            return;\n        }\n        let board = new BoardModel();\n        board.load(this.state.history[this.state.historyId + 1]);\n\n        this.setState({\n            board: board,\n            historyId: this.state.historyId + 1,\n        });\n    }\n\n    assignNewControl(control) {\n        this.setState({ control: control });\n    }\n\n    clearSelectionAndRestricted() {\n        console.log('clearSelectionAndRestricted');\n        let newBoard = this.cloneBoard();\n\n        newBoard.clearAllSelections();\n        newBoard.clearAllRestricteds();\n\n        this.assignNewBoard(newBoard);\n        this.setState({highlightMatching: null});\n    }\n\n    // Select a cell.\n    select(cellId, clearSelection = true) {\n        console.log('select ' + cellId);\n        let newBoard = this.cloneBoard();\n        if (clearSelection) {\n            this.clearSelectionAndRestricted();\n        } else {\n            newBoard.clearAllRestricteds();\n        }\n\n        newBoard.setSelected(cellId);\n\n        if (this.state.control.displayOptions.highlightRestricted) {\n            newBoard.setRestricted(this.state.control.gamePlay);\n        }\n\n        this.assignNewBoard(newBoard);\n\n        if (this.state.control.displayOptions.highlightMatchingNumbers) {\n            const selectedValues = new Set(\n                newBoard.cells\n                    .filter((cell) => cell.selected)\n                    .filter((cell) => cell.value)\n                    .map((cell) => cell.value)\n            );\n            if (selectedValues.size === 1) {\n                const selectedValue = selectedValues.values().next().value;\n                this.setState({highlightMatching: selectedValue});\n            }\n        }\n    }\n\n    // Handle clicking on a cell.\n    handleClick(e, cellId) {\n        console.log('handleClick ' + cellId);\n        this.select(cellId, !e.metaKey);\n    }\n\n    // Handle mousedown on a cell.\n    handleMouseDown(e, cellId) {\n        console.log('handleMouseDown ' + cellId);\n        this.setState({isMouseDown: true});\n\n        this.select(cellId, !e.metaKey);\n    }\n\n    // Handle mouseover a cell.\n    handleMouseOver(cellId) {\n        if (!this.state.isMouseDown) {\n            return;\n        }\n        console.log('handleMouseOver ' + cellId);\n        this.select(cellId, false);\n    }\n\n    handleMouseUp() {\n        console.log('handleMouseUp');\n        this.setState({isMouseDown: false});\n    }\n\n    setValueOfSelectedCells(newValue) {\n        console.log('setValueOfSelectedCells ' + newValue);\n        this.clearAllError();\n\n        let newBoard = this.cloneBoard();\n        newBoard.setValueOfSelectedCells(\n            newValue,\n            this.state.control.gamePlay,\n            this.state.control.displayOptions.autoCleanUp);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    unsetSelectedCells() {\n        console.log('unsetSelectedCells');\n        this.clearAllError();\n\n        let newBoard = this.cloneBoard();\n        newBoard.unsetSelectedCells();\n\n        this.assignNewBoard(newBoard);\n    }\n\n    toggleCornerValuesOfSelectedCells(newValue) {\n        console.log('toggleCornerValuesOfSelectedCells ' + newValue);\n\n        let newBoard = this.cloneBoard();\n        newBoard.toggleCornerValuesOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    clearCornerValuesOfSelectedCells() {\n        console.log('clearCornerValuesOfSelectedCells');\n        \n        let newBoard = this.cloneBoard();\n        newBoard.clearCornerValuesOfSelectedCells();\n        this.assignNewBoard(newBoard);\n    }\n\n    toggleCenterValuesOfSelectedCells(newValue) {\n        console.log('toggleCenterValuesOfSelectedCells ' + newValue);\n\n        let newBoard = this.cloneBoard();\n        newBoard.toggleCenterValuesOfSelectedCells(newValue);\n\n        this.assignNewBoard(newBoard);\n    }\n\n    clearCenterValuesOfSelectedCells() {\n        console.log('clearCenterValuesOfSelectedCells');\n\n        let newBoard = this.cloneBoard();\n        newBoard.clearCenterValuesOfSelectedCells();\n        this.assignNewBoard(newBoard);\n    }\n\n    clearAllError() {\n        console.log('clearAllError');\n        let newBoard = this.cloneBoard();\n        newBoard.clearAllErrors();\n        this.assignNewBoard(newBoard);\n    }\n\n    verifyBoard() {\n        console.log('verifyBoard');\n        let newBoard = this.cloneBoard();\n        newBoard.clearAllErrors();\n        let invalidCellIds = newBoard.getInvalidCellIds(this.state.control.gamePlay);\n        newBoard.setErrors(invalidCellIds);\n        this.assignNewBoard(newBoard);\n\n        alert(invalidCellIds.size > 0 ? 'Error found :(' : 'LGTM!');\n    }\n\n    // Move selected cell in direction (d_row, d_col).\n    // If there are more than one selected cells, only move the first one.\n    moveSelection(d_row, d_col) {\n        let r = 0, c = 0;  // by default, assume that we selected (0, 0).\n        for (let i = 0; i < 81; i++) {\n            if (this.state.board.cells[i].selected) {\n                console.log(this.state);\n                [r, c] = this.state.board.toRowCol(i);\n                break;\n            }\n        }\n        r = (r + d_row + 9) % 9;\n        c = (c + d_col + 9) % 9;\n        this.select(this.state.board.toCellId(r, c));\n    }\n\n    // Handle keypress event on a cell.\n    handleKeyDown(e) {\n        console.log('handleKeyDown, keyCode = ' + e.keyCode);\n\n        let isShift = !!e.shiftKey;\n        let isMeta = !!e.metaKey;\n\n        // Pressed 1-9\n        if (e.keyCode >= KeyCode.KEY_1 && e.keyCode <= KeyCode.KEY_9) {\n            const value = String.fromCharCode(e.keyCode);\n            if (isShift) {\n                this.toggleCornerValuesOfSelectedCells(value)\n            } else if (isMeta) {\n                this.toggleCenterValuesOfSelectedCells(value);\n                e.preventDefault();\n            } else {\n                this.setValueOfSelectedCells(value);\n            }\n        }\n\n        switch (e.keyCode) {\n            case KeyCode.KEY_SPACE:\n                this.unsetSelectedCells();\n                break;\n            case KeyCode.KEY_BACK_SPACE:\n                this.unsetSelectedCells();\n                this.clearCornerValuesOfSelectedCells();\n                this.clearCenterValuesOfSelectedCells();\n                e.preventDefault();\n                break;\n            case KeyCode.KEY_DOWN:\n                this.moveSelection(+1, 0);\n                break;\n            case KeyCode.KEY_UP:\n                this.moveSelection(-1, 0);\n                break;\n            case KeyCode.KEY_LEFT:\n                this.moveSelection(0, -1);\n                break;\n            case KeyCode.KEY_RIGHT:\n                this.moveSelection(0, +1);\n                break;\n            case KeyCode.KEY_ESCAPE:\n                this.clearSelectionAndRestricted();\n                break;\n            case KeyCode.KEY_Z:\n            case KeyCode.KEY_U:\n                this.undo();\n                break;\n            case KeyCode.KEY_Y:\n            case KeyCode.KEY_R:\n                this.redo();\n                break;\n            default:\n        }\n    }\n\n    handleToggleHighlightRestricted() {\n        console.log('handleToggleHighlightRestricted');\n        let newControl = this.cloneControl();\n        newControl.toggleHighlightRestricted();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleHighlightMatchingNumbers() {\n        console.log('handleToggleHighlightMatchingNumbers');\n        let newControl = this.cloneControl();\n        newControl.toggleHighlightMatchingNumbers();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAutoCleanUp() {\n        console.log('handleToggleAutoCleanUp');\n        let newControl = this.cloneControl();\n        newControl.toggleAutoCleanUp();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAntiKnight() {\n        console.log('handleToggleAntiKnight');\n        let newControl = this.cloneControl();\n        newControl.toggleAntiKnight();\n        this.assignNewControl(newControl);\n    }\n\n    handleToggleAntiKing() {\n        console.log('handleToggleAntiKing');\n        let newControl = this.cloneControl();\n        newControl.toggleAntiKing();\n        this.assignNewControl(newControl);\n    }\n\n    render() {\n        return (\n            <div\n                onKeyDown={(e) => this.handleKeyDown(e)}\n                tabIndex=\"0\"\n                className=\"container\"\n                onMouseUp={() => this.handleMouseUp()}\n            >\n                <h1>Sudoku Tool</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <Board\n                            board={this.state.board}\n                            onClick={(e, i) => this.handleClick(e, i)}\n                            onMouseDown={(e, i) => this.handleMouseDown(e, i)}\n                            onMouseOver={(i) => this.handleMouseOver(i)}\n                            highlightMatching={this.state.highlightMatching}\n                        />\n                    </div>\n                    <div className=\"col-sm\">\n                        <Control\n                            control={this.state.control}\n                            onClickVerify={() => this.verifyBoard()}\n                            onClickUndo={() => this.undo()}\n                            onClickRedo={() => this.redo()}\n                            onToggleHighlightRestricted={() => this.handleToggleHighlightRestricted()}\n                            onToggleHighlightMatchingNumbers={() => this.handleToggleHighlightMatchingNumbers()}\n                            onToggleAutoCleanUp={() => this.handleToggleAutoCleanUp()}\n                            onToggleAntiKnight={() => this.handleToggleAntiKnight()}\n                            onToggleAntiKing={() => this.handleToggleAntiKing()}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}